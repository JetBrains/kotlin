// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/metadata/src/metadata.debug.proto

package org.jetbrains.kotlin.metadata;

public final class DebugProtoBuf {
  private DebugProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Modality}
   */
  public enum Modality
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>FINAL = 0;</code>
     *
     * <pre>
     * 2 bits
     * </pre>
     */
    FINAL(0, 0),
    /**
     * <code>OPEN = 1;</code>
     */
    OPEN(1, 1),
    /**
     * <code>ABSTRACT = 2;</code>
     */
    ABSTRACT(2, 2),
    /**
     * <code>SEALED = 3;</code>
     */
    SEALED(3, 3),
    ;

    /**
     * <code>FINAL = 0;</code>
     *
     * <pre>
     * 2 bits
     * </pre>
     */
    public static final int FINAL_VALUE = 0;
    /**
     * <code>OPEN = 1;</code>
     */
    public static final int OPEN_VALUE = 1;
    /**
     * <code>ABSTRACT = 2;</code>
     */
    public static final int ABSTRACT_VALUE = 2;
    /**
     * <code>SEALED = 3;</code>
     */
    public static final int SEALED_VALUE = 3;


    public final int getNumber() { return value; }

    public static Modality valueOf(int value) {
      switch (value) {
        case 0: return FINAL;
        case 1: return OPEN;
        case 2: return ABSTRACT;
        case 3: return SEALED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>() {
            public Modality findValueByNumber(int number) {
              return Modality.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final Modality[] VALUES = values();

    public static Modality valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Modality(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Modality)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Visibility}
   */
  public enum Visibility
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>INTERNAL = 0;</code>
     *
     * <pre>
     * 3 bits
     * </pre>
     */
    INTERNAL(0, 0),
    /**
     * <code>PRIVATE = 1;</code>
     */
    PRIVATE(1, 1),
    /**
     * <code>PROTECTED = 2;</code>
     */
    PROTECTED(2, 2),
    /**
     * <code>PUBLIC = 3;</code>
     */
    PUBLIC(3, 3),
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    PRIVATE_TO_THIS(4, 4),
    /**
     * <code>LOCAL = 5;</code>
     */
    LOCAL(5, 5),
    ;

    /**
     * <code>INTERNAL = 0;</code>
     *
     * <pre>
     * 3 bits
     * </pre>
     */
    public static final int INTERNAL_VALUE = 0;
    /**
     * <code>PRIVATE = 1;</code>
     */
    public static final int PRIVATE_VALUE = 1;
    /**
     * <code>PROTECTED = 2;</code>
     */
    public static final int PROTECTED_VALUE = 2;
    /**
     * <code>PUBLIC = 3;</code>
     */
    public static final int PUBLIC_VALUE = 3;
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    public static final int PRIVATE_TO_THIS_VALUE = 4;
    /**
     * <code>LOCAL = 5;</code>
     */
    public static final int LOCAL_VALUE = 5;


    public final int getNumber() { return value; }

    public static Visibility valueOf(int value) {
      switch (value) {
        case 0: return INTERNAL;
        case 1: return PRIVATE;
        case 2: return PROTECTED;
        case 3: return PUBLIC;
        case 4: return PRIVATE_TO_THIS;
        case 5: return LOCAL;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>() {
            public Visibility findValueByNumber(int number) {
              return Visibility.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final Visibility[] VALUES = values();

    public static Visibility valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Visibility(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Visibility)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.MemberKind}
   */
  public enum MemberKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>DECLARATION = 0;</code>
     *
     * <pre>
     * 2 bits
     * </pre>
     */
    DECLARATION(0, 0),
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    FAKE_OVERRIDE(1, 1),
    /**
     * <code>DELEGATION = 2;</code>
     */
    DELEGATION(2, 2),
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    SYNTHESIZED(3, 3),
    ;

    /**
     * <code>DECLARATION = 0;</code>
     *
     * <pre>
     * 2 bits
     * </pre>
     */
    public static final int DECLARATION_VALUE = 0;
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    public static final int FAKE_OVERRIDE_VALUE = 1;
    /**
     * <code>DELEGATION = 2;</code>
     */
    public static final int DELEGATION_VALUE = 2;
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    public static final int SYNTHESIZED_VALUE = 3;


    public final int getNumber() { return value; }

    public static MemberKind valueOf(int value) {
      switch (value) {
        case 0: return DECLARATION;
        case 1: return FAKE_OVERRIDE;
        case 2: return DELEGATION;
        case 3: return SYNTHESIZED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>() {
            public MemberKind findValueByNumber(int number) {
              return MemberKind.valueOf(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final MemberKind[] VALUES = values();

    public static MemberKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MemberKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.MemberKind)
  }

  public interface StringTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.StringTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string string = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ProtocolStringList
        getStringList();
    /**
     * <code>repeated string string = 1;</code>
     */
    int getStringCount();
    /**
     * <code>repeated string string = 1;</code>
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
   */
  public static final class StringTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.StringTable)
      StringTableOrBuilder {
    // Use StringTable.newBuilder() to construct.
    private StringTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StringTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StringTable defaultInstance;
    public static StringTable getDefaultInstance() {
      return defaultInstance;
    }

    public StringTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StringTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                string_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              string_.add(bs);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          string_ = string_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<StringTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<StringTable>() {
      public StringTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new StringTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StringTable> getParserForType() {
      return PARSER;
    }

    public static final int STRING_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.LazyStringList string_;
    /**
     * <code>repeated string string = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 1;</code>
     */
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 1;</code>
     */
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index) {
      return string_.getByteString(index);
    }

    private void initFields() {
      string_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < string_.size(); i++) {
        output.writeBytes(1, string_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < string_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(string_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStringList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.StringTable)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        string_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          string_ = string_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.string_ = string_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance()) return this;
        if (!other.string_.isEmpty()) {
          if (string_.isEmpty()) {
            string_ = other.string_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStringIsMutable();
            string_.addAll(other.string_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.LazyStringList string_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          string_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(string_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getStringList() {
        return string_.getUnmodifiableView();
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public int getStringCount() {
        return string_.size();
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public java.lang.String getString(int index) {
        return string_.get(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes(int index) {
        return string_.getByteString(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public Builder setString(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public Builder addString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, string_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public Builder clearString() {
        string_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       */
      public Builder addStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.StringTable)
    }

    static {
      defaultInstance = new StringTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.StringTable)
  }

  public interface QualifiedNameTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> 
        getQualifiedNameList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    int getQualifiedNameCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
        getQualifiedNameOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
   */
  public static final class QualifiedNameTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      QualifiedNameTableOrBuilder {
    // Use QualifiedNameTable.newBuilder() to construct.
    private QualifiedNameTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private QualifiedNameTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final QualifiedNameTable defaultInstance;
    public static QualifiedNameTable getDefaultInstance() {
      return defaultInstance;
    }

    public QualifiedNameTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private QualifiedNameTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                qualifiedName_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName>();
                mutable_bitField0_ |= 0x00000001;
              }
              qualifiedName_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          qualifiedName_ = java.util.Collections.unmodifiableList(qualifiedName_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<QualifiedNameTable>() {
      public QualifiedNameTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new QualifiedNameTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> getParserForType() {
      return PARSER;
    }

    public interface QualifiedNameOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
       */
      boolean hasParentQualifiedName();
      /**
       * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
       */
      int getParentQualifiedName();

      /**
       * <code>required int32 short_name = 2;</code>
       *
       * <pre>
       * id in the StringTable
       * </pre>
       */
      boolean hasShortName();
      /**
       * <code>required int32 short_name = 2;</code>
       *
       * <pre>
       * id in the StringTable
       * </pre>
       */
      int getShortName();

      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       */
      boolean hasKind();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
     */
    public static final class QualifiedName extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        QualifiedNameOrBuilder {
      // Use QualifiedName.newBuilder() to construct.
      private QualifiedName(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private QualifiedName(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final QualifiedName defaultInstance;
      public static QualifiedName getDefaultInstance() {
        return defaultInstance;
      }

      public QualifiedName getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private QualifiedName(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
            org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                parentQualifiedName_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                shortName_ = input.readInt32();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind value = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  kind_ = value;
                }
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder.class);
      }

      public static org.jetbrains.kotlin.protobuf.Parser<QualifiedName> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<QualifiedName>() {
        public QualifiedName parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new QualifiedName(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<QualifiedName> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind}
       */
      public enum Kind
          implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
        /**
         * <code>CLASS = 0;</code>
         */
        CLASS(0, 0),
        /**
         * <code>PACKAGE = 1;</code>
         */
        PACKAGE(1, 1),
        /**
         * <code>LOCAL = 2;</code>
         */
        LOCAL(2, 2),
        ;

        /**
         * <code>CLASS = 0;</code>
         */
        public static final int CLASS_VALUE = 0;
        /**
         * <code>PACKAGE = 1;</code>
         */
        public static final int PACKAGE_VALUE = 1;
        /**
         * <code>LOCAL = 2;</code>
         */
        public static final int LOCAL_VALUE = 2;


        public final int getNumber() { return value; }

        public static Kind valueOf(int value) {
          switch (value) {
            case 0: return CLASS;
            case 1: return PACKAGE;
            case 2: return LOCAL;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
            internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
                public Kind findValueByNumber(int number) {
                  return Kind.valueOf(number);
                }
              };

        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.getDescriptor().getEnumTypes().get(0);
        }

        private static final Kind[] VALUES = values();

        public static Kind valueOf(
            org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private Kind(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind)
      }

      private int bitField0_;
      public static final int PARENT_QUALIFIED_NAME_FIELD_NUMBER = 1;
      private int parentQualifiedName_;
      /**
       * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
       */
      public boolean hasParentQualifiedName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
       */
      public int getParentQualifiedName() {
        return parentQualifiedName_;
      }

      public static final int SHORT_NAME_FIELD_NUMBER = 2;
      private int shortName_;
      /**
       * <code>required int32 short_name = 2;</code>
       *
       * <pre>
       * id in the StringTable
       * </pre>
       */
      public boolean hasShortName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 short_name = 2;</code>
       *
       * <pre>
       * id in the StringTable
       * </pre>
       */
      public int getShortName() {
        return shortName_;
      }

      public static final int KIND_FIELD_NUMBER = 3;
      private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind kind_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
        return kind_;
      }

      private void initFields() {
        parentQualifiedName_ = -1;
        shortName_ = 0;
        kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasShortName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, parentQualifiedName_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, shortName_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeEnum(3, kind_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, parentQualifiedName_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(2, shortName_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(3, kind_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          parentQualifiedName_ = -1;
          bitField0_ = (bitField0_ & ~0x00000001);
          shortName_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance();
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName build() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName buildPartial() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.parentQualifiedName_ = parentQualifiedName_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.shortName_ = shortName_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.kind_ = kind_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName) {
            return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName other) {
          if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance()) return this;
          if (other.hasParentQualifiedName()) {
            setParentQualifiedName(other.getParentQualifiedName());
          }
          if (other.hasShortName()) {
            setShortName(other.getShortName());
          }
          if (other.hasKind()) {
            setKind(other.getKind());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasShortName()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int parentQualifiedName_ = -1;
        /**
         * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
         */
        public boolean hasParentQualifiedName() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
         */
        public int getParentQualifiedName() {
          return parentQualifiedName_;
        }
        /**
         * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
         */
        public Builder setParentQualifiedName(int value) {
          bitField0_ |= 0x00000001;
          parentQualifiedName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 parent_qualified_name = 1 [default = -1];</code>
         */
        public Builder clearParentQualifiedName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          parentQualifiedName_ = -1;
          onChanged();
          return this;
        }

        private int shortName_ ;
        /**
         * <code>required int32 short_name = 2;</code>
         *
         * <pre>
         * id in the StringTable
         * </pre>
         */
        public boolean hasShortName() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int32 short_name = 2;</code>
         *
         * <pre>
         * id in the StringTable
         * </pre>
         */
        public int getShortName() {
          return shortName_;
        }
        /**
         * <code>required int32 short_name = 2;</code>
         *
         * <pre>
         * id in the StringTable
         * </pre>
         */
        public Builder setShortName(int value) {
          bitField0_ |= 0x00000002;
          shortName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 short_name = 2;</code>
         *
         * <pre>
         * id in the StringTable
         * </pre>
         */
        public Builder clearShortName() {
          bitField0_ = (bitField0_ & ~0x00000002);
          shortName_ = 0;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         */
        public boolean hasKind() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
          return kind_;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         */
        public Builder setKind(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          kind_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         */
        public Builder clearKind() {
          bitField0_ = (bitField0_ & ~0x00000004);
          kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
      }

      static {
        defaultInstance = new QualifiedName(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
    }

    public static final int QUALIFIED_NAME_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> qualifiedName_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
        getQualifiedNameOrBuilderList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public int getQualifiedNameCount() {
      return qualifiedName_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
      return qualifiedName_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
        int index) {
      return qualifiedName_.get(index);
    }

    private void initFields() {
      qualifiedName_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getQualifiedNameCount(); i++) {
        if (!getQualifiedName(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < qualifiedName_.size(); i++) {
        output.writeMessage(1, qualifiedName_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < qualifiedName_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, qualifiedName_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getQualifiedNameFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (qualifiedNameBuilder_ == null) {
          qualifiedName_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          qualifiedNameBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable(this);
        int from_bitField0_ = bitField0_;
        if (qualifiedNameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            qualifiedName_ = java.util.Collections.unmodifiableList(qualifiedName_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.qualifiedName_ = qualifiedName_;
        } else {
          result.qualifiedName_ = qualifiedNameBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance()) return this;
        if (qualifiedNameBuilder_ == null) {
          if (!other.qualifiedName_.isEmpty()) {
            if (qualifiedName_.isEmpty()) {
              qualifiedName_ = other.qualifiedName_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureQualifiedNameIsMutable();
              qualifiedName_.addAll(other.qualifiedName_);
            }
            onChanged();
          }
        } else {
          if (!other.qualifiedName_.isEmpty()) {
            if (qualifiedNameBuilder_.isEmpty()) {
              qualifiedNameBuilder_.dispose();
              qualifiedNameBuilder_ = null;
              qualifiedName_ = other.qualifiedName_;
              bitField0_ = (bitField0_ & ~0x00000001);
              qualifiedNameBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getQualifiedNameFieldBuilder() : null;
            } else {
              qualifiedNameBuilder_.addAllMessages(other.qualifiedName_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getQualifiedNameCount(); i++) {
          if (!getQualifiedName(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> qualifiedName_ =
        java.util.Collections.emptyList();
      private void ensureQualifiedNameIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          qualifiedName_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName>(qualifiedName_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> qualifiedNameBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
        if (qualifiedNameBuilder_ == null) {
          return java.util.Collections.unmodifiableList(qualifiedName_);
        } else {
          return qualifiedNameBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public int getQualifiedNameCount() {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.size();
        } else {
          return qualifiedNameBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.get(index);
        } else {
          return qualifiedNameBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.set(index, value);
          onChanged();
        } else {
          qualifiedNameBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.set(index, builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(value);
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(index, value);
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(index, builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addAllQualifiedName(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName> values) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, qualifiedName_);
          onChanged();
        } else {
          qualifiedNameBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder clearQualifiedName() {
        if (qualifiedNameBuilder_ == null) {
          qualifiedName_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          qualifiedNameBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder removeQualifiedName(int index) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.remove(index);
          onChanged();
        } else {
          qualifiedNameBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder getQualifiedNameBuilder(
          int index) {
        return getQualifiedNameFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
          int index) {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.get(index);  } else {
          return qualifiedNameBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
           getQualifiedNameOrBuilderList() {
        if (qualifiedNameBuilder_ != null) {
          return qualifiedNameBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(qualifiedName_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder addQualifiedNameBuilder() {
        return getQualifiedNameFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder addQualifiedNameBuilder(
          int index) {
        return getQualifiedNameFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder> 
           getQualifiedNameBuilderList() {
        return getQualifiedNameFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
          getQualifiedNameFieldBuilder() {
        if (qualifiedNameBuilder_ == null) {
          qualifiedNameBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder>(
                  qualifiedName_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          qualifiedName_ = null;
        }
        return qualifiedNameBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
    }

    static {
      defaultInstance = new QualifiedNameTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
  }

  public interface AnnotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     */
    int getId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
   */
  public static final class Annotation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation)
      AnnotationOrBuilder {
    // Use Annotation.newBuilder() to construct.
    private Annotation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Annotation(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Annotation defaultInstance;
    public static Annotation getDefaultInstance() {
      return defaultInstance;
    }

    public Annotation getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Annotation(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument>();
                mutable_bitField0_ |= 0x00000002;
              }
              argument_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          argument_ = java.util.Collections.unmodifiableList(argument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Annotation> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Annotation>() {
      public Annotation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Annotation(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Annotation> getParserForType() {
      return PARSER;
    }

    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>required int32 name_id = 1;</code>
       */
      boolean hasNameId();
      /**
       * <code>required int32 name_id = 1;</code>
       */
      int getNameId();

      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      boolean hasValue();
      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getValue();
      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
     */
    public static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
        ArgumentOrBuilder {
      // Use Argument.newBuilder() to construct.
      private Argument(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Argument(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Argument defaultInstance;
      public static Argument getDefaultInstance() {
        return defaultInstance;
      }

      public Argument getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Argument(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
            org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                nameId_ = input.readInt32();
                break;
              }
              case 18: {
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = value_.toBuilder();
                }
                value_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(value_);
                  value_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder.class);
      }

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<Argument>() {
        public Argument parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new Argument(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Argument> getParserForType() {
        return PARSER;
      }

      public interface ValueOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          org.jetbrains.kotlin.protobuf.MessageOrBuilder {

        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         *
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         */
        boolean hasType();
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         *
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         */
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type getType();

        /**
         * <code>optional sint64 int_value = 2;</code>
         */
        boolean hasIntValue();
        /**
         * <code>optional sint64 int_value = 2;</code>
         */
        long getIntValue();

        /**
         * <code>optional float float_value = 3;</code>
         */
        boolean hasFloatValue();
        /**
         * <code>optional float float_value = 3;</code>
         */
        float getFloatValue();

        /**
         * <code>optional double double_value = 4;</code>
         */
        boolean hasDoubleValue();
        /**
         * <code>optional double double_value = 4;</code>
         */
        double getDoubleValue();

        /**
         * <code>optional int32 string_value = 5;</code>
         */
        boolean hasStringValue();
        /**
         * <code>optional int32 string_value = 5;</code>
         */
        int getStringValue();

        /**
         * <code>optional int32 class_id = 6;</code>
         *
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         */
        boolean hasClassId();
        /**
         * <code>optional int32 class_id = 6;</code>
         *
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         */
        int getClassId();

        /**
         * <code>optional int32 enum_value_id = 7;</code>
         */
        boolean hasEnumValueId();
        /**
         * <code>optional int32 enum_value_id = 7;</code>
         */
        int getEnumValueId();

        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        boolean hasAnnotation();
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation();
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder();

        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> 
            getArrayElementList();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getArrayElement(int index);
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        int getArrayElementCount();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getArrayElementOrBuilderList();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
            int index);
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
       */
      public static final class Value extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          ValueOrBuilder {
        // Use Value.newBuilder() to construct.
        private Value(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private Value(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final Value defaultInstance;
        public static Value getDefaultInstance() {
          return defaultInstance;
        }

        public Value getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private Value(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
              org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type value = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    type_ = value;
                  }
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  intValue_ = input.readSInt64();
                  break;
                }
                case 29: {
                  bitField0_ |= 0x00000004;
                  floatValue_ = input.readFloat();
                  break;
                }
                case 33: {
                  bitField0_ |= 0x00000008;
                  doubleValue_ = input.readDouble();
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  stringValue_ = input.readInt32();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000020;
                  classId_ = input.readInt32();
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000040;
                  enumValueId_ = input.readInt32();
                  break;
                }
                case 66: {
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000080) == 0x00000080)) {
                    subBuilder = annotation_.toBuilder();
                  }
                  annotation_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.PARSER, extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(annotation_);
                    annotation_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000080;
                  break;
                }
                case 74: {
                  if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                    arrayElement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value>();
                    mutable_bitField0_ |= 0x00000100;
                  }
                  arrayElement_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.PARSER, extensionRegistry));
                  break;
                }
              }
            }
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              arrayElement_ = java.util.Collections.unmodifiableList(arrayElement_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder.class);
        }

        public static org.jetbrains.kotlin.protobuf.Parser<Value> PARSER =
            new org.jetbrains.kotlin.protobuf.AbstractParser<Value>() {
          public Value parsePartialFrom(
              org.jetbrains.kotlin.protobuf.CodedInputStream input,
              org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
              throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
            return new Value(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Parser<Value> getParserForType() {
          return PARSER;
        }

        /**
         * Protobuf enum {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type}
         */
        public enum Type
            implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
          /**
           * <code>BYTE = 0;</code>
           */
          BYTE(0, 0),
          /**
           * <code>CHAR = 1;</code>
           */
          CHAR(1, 1),
          /**
           * <code>SHORT = 2;</code>
           */
          SHORT(2, 2),
          /**
           * <code>INT = 3;</code>
           */
          INT(3, 3),
          /**
           * <code>LONG = 4;</code>
           */
          LONG(4, 4),
          /**
           * <code>FLOAT = 5;</code>
           */
          FLOAT(5, 5),
          /**
           * <code>DOUBLE = 6;</code>
           */
          DOUBLE(6, 6),
          /**
           * <code>BOOLEAN = 7;</code>
           */
          BOOLEAN(7, 7),
          /**
           * <code>STRING = 8;</code>
           */
          STRING(8, 8),
          /**
           * <code>CLASS = 9;</code>
           */
          CLASS(9, 9),
          /**
           * <code>ENUM = 10;</code>
           */
          ENUM(10, 10),
          /**
           * <code>ANNOTATION = 11;</code>
           */
          ANNOTATION(11, 11),
          /**
           * <code>ARRAY = 12;</code>
           */
          ARRAY(12, 12),
          ;

          /**
           * <code>BYTE = 0;</code>
           */
          public static final int BYTE_VALUE = 0;
          /**
           * <code>CHAR = 1;</code>
           */
          public static final int CHAR_VALUE = 1;
          /**
           * <code>SHORT = 2;</code>
           */
          public static final int SHORT_VALUE = 2;
          /**
           * <code>INT = 3;</code>
           */
          public static final int INT_VALUE = 3;
          /**
           * <code>LONG = 4;</code>
           */
          public static final int LONG_VALUE = 4;
          /**
           * <code>FLOAT = 5;</code>
           */
          public static final int FLOAT_VALUE = 5;
          /**
           * <code>DOUBLE = 6;</code>
           */
          public static final int DOUBLE_VALUE = 6;
          /**
           * <code>BOOLEAN = 7;</code>
           */
          public static final int BOOLEAN_VALUE = 7;
          /**
           * <code>STRING = 8;</code>
           */
          public static final int STRING_VALUE = 8;
          /**
           * <code>CLASS = 9;</code>
           */
          public static final int CLASS_VALUE = 9;
          /**
           * <code>ENUM = 10;</code>
           */
          public static final int ENUM_VALUE = 10;
          /**
           * <code>ANNOTATION = 11;</code>
           */
          public static final int ANNOTATION_VALUE = 11;
          /**
           * <code>ARRAY = 12;</code>
           */
          public static final int ARRAY_VALUE = 12;


          public final int getNumber() { return value; }

          public static Type valueOf(int value) {
            switch (value) {
              case 0: return BYTE;
              case 1: return CHAR;
              case 2: return SHORT;
              case 3: return INT;
              case 4: return LONG;
              case 5: return FLOAT;
              case 6: return DOUBLE;
              case 7: return BOOLEAN;
              case 8: return STRING;
              case 9: return CLASS;
              case 10: return ENUM;
              case 11: return ANNOTATION;
              case 12: return ARRAY;
              default: return null;
            }
          }

          public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
              internalValueMap =
                new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
                  public Type findValueByNumber(int number) {
                    return Type.valueOf(number);
                  }
                };

          public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(index);
          }
          public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDescriptor().getEnumTypes().get(0);
          }

          private static final Type[] VALUES = values();

          public static Type valueOf(
              org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int index;
          private final int value;

          private Type(int index, int value) {
            this.index = index;
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type)
        }

        private int bitField0_;
        public static final int TYPE_FIELD_NUMBER = 1;
        private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type type_;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         *
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         *
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type getType() {
          return type_;
        }

        public static final int INT_VALUE_FIELD_NUMBER = 2;
        private long intValue_;
        /**
         * <code>optional sint64 int_value = 2;</code>
         */
        public boolean hasIntValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional sint64 int_value = 2;</code>
         */
        public long getIntValue() {
          return intValue_;
        }

        public static final int FLOAT_VALUE_FIELD_NUMBER = 3;
        private float floatValue_;
        /**
         * <code>optional float float_value = 3;</code>
         */
        public boolean hasFloatValue() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional float float_value = 3;</code>
         */
        public float getFloatValue() {
          return floatValue_;
        }

        public static final int DOUBLE_VALUE_FIELD_NUMBER = 4;
        private double doubleValue_;
        /**
         * <code>optional double double_value = 4;</code>
         */
        public boolean hasDoubleValue() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double double_value = 4;</code>
         */
        public double getDoubleValue() {
          return doubleValue_;
        }

        public static final int STRING_VALUE_FIELD_NUMBER = 5;
        private int stringValue_;
        /**
         * <code>optional int32 string_value = 5;</code>
         */
        public boolean hasStringValue() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional int32 string_value = 5;</code>
         */
        public int getStringValue() {
          return stringValue_;
        }

        public static final int CLASS_ID_FIELD_NUMBER = 6;
        private int classId_;
        /**
         * <code>optional int32 class_id = 6;</code>
         *
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         */
        public boolean hasClassId() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional int32 class_id = 6;</code>
         *
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         */
        public int getClassId() {
          return classId_;
        }

        public static final int ENUM_VALUE_ID_FIELD_NUMBER = 7;
        private int enumValueId_;
        /**
         * <code>optional int32 enum_value_id = 7;</code>
         */
        public boolean hasEnumValueId() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional int32 enum_value_id = 7;</code>
         */
        public int getEnumValueId() {
          return enumValueId_;
        }

        public static final int ANNOTATION_FIELD_NUMBER = 8;
        private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation annotation_;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        public boolean hasAnnotation() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation() {
          return annotation_;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder() {
          return annotation_;
        }

        public static final int ARRAY_ELEMENT_FIELD_NUMBER = 9;
        private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> arrayElement_;
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> getArrayElementList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getArrayElementOrBuilderList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public int getArrayElementCount() {
          return arrayElement_.size();
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
          return arrayElement_.get(index);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
            int index) {
          return arrayElement_.get(index);
        }

        private void initFields() {
          type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type.BYTE;
          intValue_ = 0L;
          floatValue_ = 0F;
          doubleValue_ = 0D;
          stringValue_ = 0;
          classId_ = 0;
          enumValueId_ = 0;
          annotation_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance();
          arrayElement_ = java.util.Collections.emptyList();
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (hasAnnotation()) {
            if (!getAnnotation().isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          for (int i = 0; i < getArrayElementCount(); i++) {
            if (!getArrayElement(i).isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeEnum(1, type_.getNumber());
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeSInt64(2, intValue_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeFloat(3, floatValue_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeDouble(4, doubleValue_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeInt32(5, stringValue_);
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeInt32(6, classId_);
          }
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            output.writeInt32(7, enumValueId_);
          }
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            output.writeMessage(8, annotation_);
          }
          for (int i = 0; i < arrayElement_.size(); i++) {
            output.writeMessage(9, arrayElement_.get(i));
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeEnumSize(1, type_.getNumber());
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeSInt64Size(2, intValue_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeFloatSize(3, floatValue_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeDoubleSize(4, doubleValue_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(5, stringValue_);
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(6, classId_);
          }
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(7, enumValueId_);
          }
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeMessageSize(8, annotation_);
          }
          for (int i = 0; i < arrayElement_.size(); i++) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeMessageSize(9, arrayElement_.get(i));
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(byte[] data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            byte[] data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseDelimitedFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
         */
        public static final class Builder extends
            org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder {
          public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
          }

          protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder.class);
          }

          // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
              getAnnotationFieldBuilder();
              getArrayElementFieldBuilder();
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type.BYTE;
            bitField0_ = (bitField0_ & ~0x00000001);
            intValue_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000002);
            floatValue_ = 0F;
            bitField0_ = (bitField0_ & ~0x00000004);
            doubleValue_ = 0D;
            bitField0_ = (bitField0_ & ~0x00000008);
            stringValue_ = 0;
            bitField0_ = (bitField0_ & ~0x00000010);
            classId_ = 0;
            bitField0_ = (bitField0_ & ~0x00000020);
            enumValueId_ = 0;
            bitField0_ = (bitField0_ & ~0x00000040);
            if (annotationBuilder_ == null) {
              annotation_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance();
            } else {
              annotationBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000080);
            if (arrayElementBuilder_ == null) {
              arrayElement_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              arrayElementBuilder_.clear();
            }
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
          }

          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getDefaultInstanceForType() {
            return org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance();
          }

          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value build() {
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value buildPartial() {
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.type_ = type_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.intValue_ = intValue_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
              to_bitField0_ |= 0x00000004;
            }
            result.floatValue_ = floatValue_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
              to_bitField0_ |= 0x00000008;
            }
            result.doubleValue_ = doubleValue_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
              to_bitField0_ |= 0x00000010;
            }
            result.stringValue_ = stringValue_;
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
              to_bitField0_ |= 0x00000020;
            }
            result.classId_ = classId_;
            if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
              to_bitField0_ |= 0x00000040;
            }
            result.enumValueId_ = enumValueId_;
            if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
              to_bitField0_ |= 0x00000080;
            }
            if (annotationBuilder_ == null) {
              result.annotation_ = annotation_;
            } else {
              result.annotation_ = annotationBuilder_.build();
            }
            if (arrayElementBuilder_ == null) {
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                arrayElement_ = java.util.Collections.unmodifiableList(arrayElement_);
                bitField0_ = (bitField0_ & ~0x00000100);
              }
              result.arrayElement_ = arrayElement_;
            } else {
              result.arrayElement_ = arrayElementBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
            if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value) {
              return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value other) {
            if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance()) return this;
            if (other.hasType()) {
              setType(other.getType());
            }
            if (other.hasIntValue()) {
              setIntValue(other.getIntValue());
            }
            if (other.hasFloatValue()) {
              setFloatValue(other.getFloatValue());
            }
            if (other.hasDoubleValue()) {
              setDoubleValue(other.getDoubleValue());
            }
            if (other.hasStringValue()) {
              setStringValue(other.getStringValue());
            }
            if (other.hasClassId()) {
              setClassId(other.getClassId());
            }
            if (other.hasEnumValueId()) {
              setEnumValueId(other.getEnumValueId());
            }
            if (other.hasAnnotation()) {
              mergeAnnotation(other.getAnnotation());
            }
            if (arrayElementBuilder_ == null) {
              if (!other.arrayElement_.isEmpty()) {
                if (arrayElement_.isEmpty()) {
                  arrayElement_ = other.arrayElement_;
                  bitField0_ = (bitField0_ & ~0x00000100);
                } else {
                  ensureArrayElementIsMutable();
                  arrayElement_.addAll(other.arrayElement_);
                }
                onChanged();
              }
            } else {
              if (!other.arrayElement_.isEmpty()) {
                if (arrayElementBuilder_.isEmpty()) {
                  arrayElementBuilder_.dispose();
                  arrayElementBuilder_ = null;
                  arrayElement_ = other.arrayElement_;
                  bitField0_ = (bitField0_ & ~0x00000100);
                  arrayElementBuilder_ = 
                    org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                       getArrayElementFieldBuilder() : null;
                } else {
                  arrayElementBuilder_.addAllMessages(other.arrayElement_);
                }
              }
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            if (hasAnnotation()) {
              if (!getAnnotation().isInitialized()) {
                
                return false;
              }
            }
            for (int i = 0; i < getArrayElementCount(); i++) {
              if (!getArrayElement(i).isInitialized()) {
                
                return false;
              }
            }
            return true;
          }

          public Builder mergeFrom(
              org.jetbrains.kotlin.protobuf.CodedInputStream input,
              org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type.BYTE;
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           *
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           */
          public boolean hasType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           *
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type getType() {
            return type_;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           *
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           */
          public Builder setType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            type_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           *
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           */
          public Builder clearType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Type.BYTE;
            onChanged();
            return this;
          }

          private long intValue_ ;
          /**
           * <code>optional sint64 int_value = 2;</code>
           */
          public boolean hasIntValue() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional sint64 int_value = 2;</code>
           */
          public long getIntValue() {
            return intValue_;
          }
          /**
           * <code>optional sint64 int_value = 2;</code>
           */
          public Builder setIntValue(long value) {
            bitField0_ |= 0x00000002;
            intValue_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional sint64 int_value = 2;</code>
           */
          public Builder clearIntValue() {
            bitField0_ = (bitField0_ & ~0x00000002);
            intValue_ = 0L;
            onChanged();
            return this;
          }

          private float floatValue_ ;
          /**
           * <code>optional float float_value = 3;</code>
           */
          public boolean hasFloatValue() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
          }
          /**
           * <code>optional float float_value = 3;</code>
           */
          public float getFloatValue() {
            return floatValue_;
          }
          /**
           * <code>optional float float_value = 3;</code>
           */
          public Builder setFloatValue(float value) {
            bitField0_ |= 0x00000004;
            floatValue_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional float float_value = 3;</code>
           */
          public Builder clearFloatValue() {
            bitField0_ = (bitField0_ & ~0x00000004);
            floatValue_ = 0F;
            onChanged();
            return this;
          }

          private double doubleValue_ ;
          /**
           * <code>optional double double_value = 4;</code>
           */
          public boolean hasDoubleValue() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
          }
          /**
           * <code>optional double double_value = 4;</code>
           */
          public double getDoubleValue() {
            return doubleValue_;
          }
          /**
           * <code>optional double double_value = 4;</code>
           */
          public Builder setDoubleValue(double value) {
            bitField0_ |= 0x00000008;
            doubleValue_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional double double_value = 4;</code>
           */
          public Builder clearDoubleValue() {
            bitField0_ = (bitField0_ & ~0x00000008);
            doubleValue_ = 0D;
            onChanged();
            return this;
          }

          private int stringValue_ ;
          /**
           * <code>optional int32 string_value = 5;</code>
           */
          public boolean hasStringValue() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
          }
          /**
           * <code>optional int32 string_value = 5;</code>
           */
          public int getStringValue() {
            return stringValue_;
          }
          /**
           * <code>optional int32 string_value = 5;</code>
           */
          public Builder setStringValue(int value) {
            bitField0_ |= 0x00000010;
            stringValue_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 string_value = 5;</code>
           */
          public Builder clearStringValue() {
            bitField0_ = (bitField0_ & ~0x00000010);
            stringValue_ = 0;
            onChanged();
            return this;
          }

          private int classId_ ;
          /**
           * <code>optional int32 class_id = 6;</code>
           *
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           */
          public boolean hasClassId() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
          }
          /**
           * <code>optional int32 class_id = 6;</code>
           *
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           */
          public int getClassId() {
            return classId_;
          }
          /**
           * <code>optional int32 class_id = 6;</code>
           *
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           */
          public Builder setClassId(int value) {
            bitField0_ |= 0x00000020;
            classId_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 class_id = 6;</code>
           *
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           */
          public Builder clearClassId() {
            bitField0_ = (bitField0_ & ~0x00000020);
            classId_ = 0;
            onChanged();
            return this;
          }

          private int enumValueId_ ;
          /**
           * <code>optional int32 enum_value_id = 7;</code>
           */
          public boolean hasEnumValueId() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
          }
          /**
           * <code>optional int32 enum_value_id = 7;</code>
           */
          public int getEnumValueId() {
            return enumValueId_;
          }
          /**
           * <code>optional int32 enum_value_id = 7;</code>
           */
          public Builder setEnumValueId(int value) {
            bitField0_ |= 0x00000040;
            enumValueId_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 enum_value_id = 7;</code>
           */
          public Builder clearEnumValueId() {
            bitField0_ = (bitField0_ & ~0x00000040);
            enumValueId_ = 0;
            onChanged();
            return this;
          }

          private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation annotation_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance();
          private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> annotationBuilder_;
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public boolean hasAnnotation() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation() {
            if (annotationBuilder_ == null) {
              return annotation_;
            } else {
              return annotationBuilder_.getMessage();
            }
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
            if (annotationBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              annotation_ = value;
              onChanged();
            } else {
              annotationBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000080;
            return this;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
            if (annotationBuilder_ == null) {
              annotation_ = builderForValue.build();
              onChanged();
            } else {
              annotationBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000080;
            return this;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder mergeAnnotation(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
            if (annotationBuilder_ == null) {
              if (((bitField0_ & 0x00000080) == 0x00000080) &&
                  annotation_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance()) {
                annotation_ =
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.newBuilder(annotation_).mergeFrom(value).buildPartial();
              } else {
                annotation_ = value;
              }
              onChanged();
            } else {
              annotationBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000080;
            return this;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder clearAnnotation() {
            if (annotationBuilder_ == null) {
              annotation_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance();
              onChanged();
            } else {
              annotationBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000080);
            return this;
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder getAnnotationBuilder() {
            bitField0_ |= 0x00000080;
            onChanged();
            return getAnnotationFieldBuilder().getBuilder();
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder() {
            if (annotationBuilder_ != null) {
              return annotationBuilder_.getMessageOrBuilder();
            } else {
              return annotation_;
            }
          }
          /**
           * <code>optional .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
              getAnnotationFieldBuilder() {
            if (annotationBuilder_ == null) {
              annotationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder>(
                      getAnnotation(),
                      getParentForChildren(),
                      isClean());
              annotation_ = null;
            }
            return annotationBuilder_;
          }

          private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> arrayElement_ =
            java.util.Collections.emptyList();
          private void ensureArrayElementIsMutable() {
            if (!((bitField0_ & 0x00000100) == 0x00000100)) {
              arrayElement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value>(arrayElement_);
              bitField0_ |= 0x00000100;
             }
          }

          private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> arrayElementBuilder_;

          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> getArrayElementList() {
            if (arrayElementBuilder_ == null) {
              return java.util.Collections.unmodifiableList(arrayElement_);
            } else {
              return arrayElementBuilder_.getMessageList();
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public int getArrayElementCount() {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.size();
            } else {
              return arrayElementBuilder_.getCount();
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.get(index);
            } else {
              return arrayElementBuilder_.getMessage(index);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.set(index, value);
              onChanged();
            } else {
              arrayElementBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.set(index, builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.add(value);
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.add(index, value);
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.add(builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.add(index, builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addAllArrayElement(
              java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> values) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
                  values, arrayElement_);
              onChanged();
            } else {
              arrayElementBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder clearArrayElement() {
            if (arrayElementBuilder_ == null) {
              arrayElement_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000100);
              onChanged();
            } else {
              arrayElementBuilder_.clear();
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder removeArrayElement(int index) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.remove(index);
              onChanged();
            } else {
              arrayElementBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder getArrayElementBuilder(
              int index) {
            return getArrayElementFieldBuilder().getBuilder(index);
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
              int index) {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.get(index);  } else {
              return arrayElementBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> 
               getArrayElementOrBuilderList() {
            if (arrayElementBuilder_ != null) {
              return arrayElementBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(arrayElement_);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder addArrayElementBuilder() {
            return getArrayElementFieldBuilder().addBuilder(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance());
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder addArrayElementBuilder(
              int index) {
            return getArrayElementFieldBuilder().addBuilder(
                index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance());
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder> 
               getArrayElementBuilderList() {
            return getArrayElementFieldBuilder().getBuilderList();
          }
          private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> 
              getArrayElementFieldBuilder() {
            if (arrayElementBuilder_ == null) {
              arrayElementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder>(
                      arrayElement_,
                      ((bitField0_ & 0x00000100) == 0x00000100),
                      getParentForChildren(),
                      isClean());
              arrayElement_ = null;
            }
            return arrayElementBuilder_;
          }

          // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
        }

        static {
          defaultInstance = new Value(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
      }

      private int bitField0_;
      public static final int NAME_ID_FIELD_NUMBER = 1;
      private int nameId_;
      /**
       * <code>required int32 name_id = 1;</code>
       */
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 name_id = 1;</code>
       */
      public int getNameId() {
        return nameId_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value_;
      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getValue() {
        return value_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder() {
        return value_;
      }

      private void initFields() {
        nameId_ = 0;
        value_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasNameId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValue()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, nameId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, value_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, nameId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(2, value_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getValueFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          nameId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (valueBuilder_ == null) {
            value_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance();
          } else {
            valueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.getDefaultInstance();
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument build() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument buildPartial() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.nameId_ = nameId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (valueBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = valueBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument) {
            return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument other) {
          if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.getDefaultInstance()) return this;
          if (other.hasNameId()) {
            setNameId(other.getNameId());
          }
          if (other.hasValue()) {
            mergeValue(other.getValue());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasNameId()) {
            
            return false;
          }
          if (!hasValue()) {
            
            return false;
          }
          if (!getValue().isInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int nameId_ ;
        /**
         * <code>required int32 name_id = 1;</code>
         */
        public boolean hasNameId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 name_id = 1;</code>
         */
        public int getNameId() {
          return nameId_;
        }
        /**
         * <code>required int32 name_id = 1;</code>
         */
        public Builder setNameId(int value) {
          bitField0_ |= 0x00000001;
          nameId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 name_id = 1;</code>
         */
        public Builder clearNameId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          nameId_ = 0;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> valueBuilder_;
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public boolean hasValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value getValue() {
          if (valueBuilder_ == null) {
            return value_;
          } else {
            return valueBuilder_.getMessage();
          }
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public Builder setValue(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            value_ = value;
            onChanged();
          } else {
            valueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public Builder setValue(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
          if (valueBuilder_ == null) {
            value_ = builderForValue.build();
            onChanged();
          } else {
            valueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public Builder mergeValue(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value value) {
          if (valueBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                value_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance()) {
              value_ =
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.newBuilder(value_).mergeFrom(value).buildPartial();
            } else {
              value_ = value;
            }
            onChanged();
          } else {
            valueBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public Builder clearValue() {
          if (valueBuilder_ == null) {
            value_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance();
            onChanged();
          } else {
            valueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder getValueBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getValueFieldBuilder().getBuilder();
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder() {
          if (valueBuilder_ != null) {
            return valueBuilder_.getMessageOrBuilder();
          } else {
            return value_;
          }
        }
        /**
         * <code>required .org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getValueFieldBuilder() {
          if (valueBuilder_ == null) {
            valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.ValueOrBuilder>(
                    getValue(),
                    getParentForChildren(),
                    isClean());
            value_ = null;
          }
          return valueBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
      }

      static {
        defaultInstance = new Argument(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    private void initFields() {
      id_ = 0;
      argument_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument>(argument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.ArgumentOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation)
    }

    static {
      defaultInstance = new Annotation(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation)
  }

  public interface TypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Type> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
        int index);

    /**
     * <code>optional bool nullable = 3 [default = false];</code>
     */
    boolean hasNullable();
    /**
     * <code>optional bool nullable = 3 [default = false];</code>
     */
    boolean getNullable();

    /**
     * <code>optional int32 flexible_type_capabilities_id = 4;</code>
     *
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     */
    boolean hasFlexibleTypeCapabilitiesId();
    /**
     * <code>optional int32 flexible_type_capabilities_id = 4;</code>
     *
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     */
    int getFlexibleTypeCapabilitiesId();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    boolean hasFlexibleUpperBound();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getFlexibleUpperBound();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder();

    /**
     * <code>optional int32 flexible_upper_bound_id = 8;</code>
     */
    boolean hasFlexibleUpperBoundId();
    /**
     * <code>optional int32 flexible_upper_bound_id = 8;</code>
     */
    int getFlexibleUpperBoundId();

    /**
     * <code>optional int32 class_name = 6;</code>
     */
    boolean hasClassName();
    /**
     * <code>optional int32 class_name = 6;</code>
     */
    int getClassName();

    /**
     * <code>optional int32 type_parameter = 7;</code>
     *
     * <pre>
     * id of the type parameter
     * </pre>
     */
    boolean hasTypeParameter();
    /**
     * <code>optional int32 type_parameter = 7;</code>
     *
     * <pre>
     * id of the type parameter
     * </pre>
     */
    int getTypeParameter();

    /**
     * <code>optional int32 type_parameter_name = 9;</code>
     *
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     */
    boolean hasTypeParameterName();
    /**
     * <code>optional int32 type_parameter_name = 9;</code>
     *
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     */
    int getTypeParameterName();

    /**
     * <code>optional int32 type_alias_name = 12;</code>
     *
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     */
    boolean hasTypeAliasName();
    /**
     * <code>optional int32 type_alias_name = 12;</code>
     *
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     */
    int getTypeAliasName();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    boolean hasOuterType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getOuterType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getOuterTypeOrBuilder();

    /**
     * <code>optional int32 outer_type_id = 11;</code>
     */
    boolean hasOuterTypeId();
    /**
     * <code>optional int32 outer_type_id = 11;</code>
     */
    int getOuterTypeId();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    boolean hasAbbreviatedType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getAbbreviatedType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder();

    /**
     * <code>optional int32 abbreviated_type_id = 14;</code>
     */
    boolean hasAbbreviatedTypeId();
    /**
     * <code>optional int32 abbreviated_type_id = 14;</code>
     */
    int getAbbreviatedTypeId();

    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *suspend
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *suspend
     * </pre>
     */
    int getFlags();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
   */
  public static final class Type extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Type> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type)
      TypeOrBuilder {
    // Use Type.newBuilder() to construct.
    private Type(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Type(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Type defaultInstance;
    public static Type getDefaultInstance() {
      return defaultInstance;
    }

    public Type getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Type(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00001000;
              flags_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument>();
                mutable_bitField0_ |= 0x00000001;
              }
              argument_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              nullable_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              flexibleTypeCapabilitiesId_ = input.readInt32();
              break;
            }
            case 42: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = flexibleUpperBound_.toBuilder();
              }
              flexibleUpperBound_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flexibleUpperBound_);
                flexibleUpperBound_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              className_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              typeParameter_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              flexibleUpperBoundId_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              typeParameterName_ = input.readInt32();
              break;
            }
            case 82: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = outerType_.toBuilder();
              }
              outerType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(outerType_);
                outerType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              outerTypeId_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              typeAliasName_ = input.readInt32();
              break;
            }
            case 106: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = abbreviatedType_.toBuilder();
              }
              abbreviatedType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(abbreviatedType_);
                abbreviatedType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 112: {
              bitField0_ |= 0x00000800;
              abbreviatedTypeId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          argument_ = java.util.Collections.unmodifiableList(argument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Type> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Type>() {
      public Type parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Type(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Type> getParserForType() {
      return PARSER;
    }

    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type.Argument)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       */
      boolean hasProjection();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection getProjection();

      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      boolean hasType();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder();

      /**
       * <code>optional int32 type_id = 3;</code>
       */
      boolean hasTypeId();
      /**
       * <code>optional int32 type_id = 3;</code>
       */
      int getTypeId();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
     */
    public static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type.Argument)
        ArgumentOrBuilder {
      // Use Argument.newBuilder() to construct.
      private Argument(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Argument(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Argument defaultInstance;
      public static Argument getDefaultInstance() {
        return defaultInstance;
      }

      public Argument getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Argument(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
            org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection value = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  projection_ = value;
                }
                break;
              }
              case 18: {
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = type_.toBuilder();
                }
                type_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(type_);
                  type_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                typeId_ = input.readInt32();
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder.class);
      }

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<Argument>() {
        public Argument parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new Argument(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Argument> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.Type.Argument.Projection}
       */
      public enum Projection
          implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
        /**
         * <code>IN = 0;</code>
         */
        IN(0, 0),
        /**
         * <code>OUT = 1;</code>
         */
        OUT(1, 1),
        /**
         * <code>INV = 2;</code>
         */
        INV(2, 2),
        /**
         * <code>STAR = 3;</code>
         */
        STAR(3, 3),
        ;

        /**
         * <code>IN = 0;</code>
         */
        public static final int IN_VALUE = 0;
        /**
         * <code>OUT = 1;</code>
         */
        public static final int OUT_VALUE = 1;
        /**
         * <code>INV = 2;</code>
         */
        public static final int INV_VALUE = 2;
        /**
         * <code>STAR = 3;</code>
         */
        public static final int STAR_VALUE = 3;


        public final int getNumber() { return value; }

        public static Projection valueOf(int value) {
          switch (value) {
            case 0: return IN;
            case 1: return OUT;
            case 2: return INV;
            case 3: return STAR;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>
            internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>() {
                public Projection findValueByNumber(int number) {
                  return Projection.valueOf(number);
                }
              };

        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.getDescriptor().getEnumTypes().get(0);
        }

        private static final Projection[] VALUES = values();

        public static Projection valueOf(
            org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private Projection(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Type.Argument.Projection)
      }

      private int bitField0_;
      public static final int PROJECTION_FIELD_NUMBER = 1;
      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection projection_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       */
      public boolean hasProjection() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection getProjection() {
        return projection_;
      }

      public static final int TYPE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type type_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType() {
        return type_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
       *
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder() {
        return type_;
      }

      public static final int TYPE_ID_FIELD_NUMBER = 3;
      private int typeId_;
      /**
       * <code>optional int32 type_id = 3;</code>
       */
      public boolean hasTypeId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 type_id = 3;</code>
       */
      public int getTypeId() {
        return typeId_;
      }

      private void initFields() {
        projection_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection.INV;
        type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        typeId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasType()) {
          if (!getType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, projection_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, type_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, typeId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(1, projection_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(2, type_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(3, typeId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type.Argument)
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          projection_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection.INV;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (typeBuilder_ == null) {
            type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          } else {
            typeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          typeId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.getDefaultInstance();
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument build() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument buildPartial() {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.projection_ = projection_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (typeBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = typeBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.typeId_ = typeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument) {
            return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument other) {
          if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.getDefaultInstance()) return this;
          if (other.hasProjection()) {
            setProjection(other.getProjection());
          }
          if (other.hasType()) {
            mergeType(other.getType());
          }
          if (other.hasTypeId()) {
            setTypeId(other.getTypeId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasType()) {
            if (!getType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection projection_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection.INV;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         */
        public boolean hasProjection() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection getProjection() {
          return projection_;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         */
        public Builder setProjection(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          projection_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         */
        public Builder clearProjection() {
          bitField0_ = (bitField0_ & ~0x00000001);
          projection_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Projection.INV;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> typeBuilder_;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType() {
          if (typeBuilder_ == null) {
            return type_;
          } else {
            return typeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public Builder setType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
          if (typeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            typeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public Builder setType(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
          if (typeBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            typeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public Builder mergeType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
          if (typeBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                type_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
              type_ =
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(type_).mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            typeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public Builder clearType() {
          if (typeBuilder_ == null) {
            type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
            onChanged();
          } else {
            typeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getTypeBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder() {
          if (typeBuilder_ != null) {
            return typeBuilder_.getMessageOrBuilder();
          } else {
            return type_;
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.Type type = 2;</code>
         *
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
            getTypeFieldBuilder() {
          if (typeBuilder_ == null) {
            typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                    getType(),
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          return typeBuilder_;
        }

        private int typeId_ ;
        /**
         * <code>optional int32 type_id = 3;</code>
         */
        public boolean hasTypeId() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 type_id = 3;</code>
         */
        public int getTypeId() {
          return typeId_;
        }
        /**
         * <code>optional int32 type_id = 3;</code>
         */
        public Builder setTypeId(int value) {
          bitField0_ |= 0x00000004;
          typeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 type_id = 3;</code>
         */
        public Builder clearTypeId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          typeId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type.Argument)
      }

      static {
        defaultInstance = new Argument(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type.Argument)
    }

    private int bitField0_;
    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    public static final int NULLABLE_FIELD_NUMBER = 3;
    private boolean nullable_;
    /**
     * <code>optional bool nullable = 3 [default = false];</code>
     */
    public boolean hasNullable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool nullable = 3 [default = false];</code>
     */
    public boolean getNullable() {
      return nullable_;
    }

    public static final int FLEXIBLE_TYPE_CAPABILITIES_ID_FIELD_NUMBER = 4;
    private int flexibleTypeCapabilitiesId_;
    /**
     * <code>optional int32 flexible_type_capabilities_id = 4;</code>
     *
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     */
    public boolean hasFlexibleTypeCapabilitiesId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 flexible_type_capabilities_id = 4;</code>
     *
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     */
    public int getFlexibleTypeCapabilitiesId() {
      return flexibleTypeCapabilitiesId_;
    }

    public static final int FLEXIBLE_UPPER_BOUND_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type flexibleUpperBound_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    public boolean hasFlexibleUpperBound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getFlexibleUpperBound() {
      return flexibleUpperBound_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder() {
      return flexibleUpperBound_;
    }

    public static final int FLEXIBLE_UPPER_BOUND_ID_FIELD_NUMBER = 8;
    private int flexibleUpperBoundId_;
    /**
     * <code>optional int32 flexible_upper_bound_id = 8;</code>
     */
    public boolean hasFlexibleUpperBoundId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 flexible_upper_bound_id = 8;</code>
     */
    public int getFlexibleUpperBoundId() {
      return flexibleUpperBoundId_;
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 6;
    private int className_;
    /**
     * <code>optional int32 class_name = 6;</code>
     */
    public boolean hasClassName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 class_name = 6;</code>
     */
    public int getClassName() {
      return className_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 7;
    private int typeParameter_;
    /**
     * <code>optional int32 type_parameter = 7;</code>
     *
     * <pre>
     * id of the type parameter
     * </pre>
     */
    public boolean hasTypeParameter() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 type_parameter = 7;</code>
     *
     * <pre>
     * id of the type parameter
     * </pre>
     */
    public int getTypeParameter() {
      return typeParameter_;
    }

    public static final int TYPE_PARAMETER_NAME_FIELD_NUMBER = 9;
    private int typeParameterName_;
    /**
     * <code>optional int32 type_parameter_name = 9;</code>
     *
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     */
    public boolean hasTypeParameterName() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 type_parameter_name = 9;</code>
     *
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     */
    public int getTypeParameterName() {
      return typeParameterName_;
    }

    public static final int TYPE_ALIAS_NAME_FIELD_NUMBER = 12;
    private int typeAliasName_;
    /**
     * <code>optional int32 type_alias_name = 12;</code>
     *
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     */
    public boolean hasTypeAliasName() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 type_alias_name = 12;</code>
     *
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     */
    public int getTypeAliasName() {
      return typeAliasName_;
    }

    public static final int OUTER_TYPE_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type outerType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    public boolean hasOuterType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getOuterType() {
      return outerType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     *
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getOuterTypeOrBuilder() {
      return outerType_;
    }

    public static final int OUTER_TYPE_ID_FIELD_NUMBER = 11;
    private int outerTypeId_;
    /**
     * <code>optional int32 outer_type_id = 11;</code>
     */
    public boolean hasOuterTypeId() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 outer_type_id = 11;</code>
     */
    public int getOuterTypeId() {
      return outerTypeId_;
    }

    public static final int ABBREVIATED_TYPE_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type abbreviatedType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    public boolean hasAbbreviatedType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getAbbreviatedType() {
      return abbreviatedType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder() {
      return abbreviatedType_;
    }

    public static final int ABBREVIATED_TYPE_ID_FIELD_NUMBER = 14;
    private int abbreviatedTypeId_;
    /**
     * <code>optional int32 abbreviated_type_id = 14;</code>
     */
    public boolean hasAbbreviatedTypeId() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 abbreviated_type_id = 14;</code>
     */
    public int getAbbreviatedTypeId() {
      return abbreviatedTypeId_;
    }

    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *suspend
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *suspend
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    private void initFields() {
      argument_ = java.util.Collections.emptyList();
      nullable_ = false;
      flexibleTypeCapabilitiesId_ = 0;
      flexibleUpperBound_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      flexibleUpperBoundId_ = 0;
      className_ = 0;
      typeParameter_ = 0;
      typeParameterName_ = 0;
      typeAliasName_ = 0;
      outerType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      outerTypeId_ = 0;
      abbreviatedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      abbreviatedTypeId_ = 0;
      flags_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFlexibleUpperBound()) {
        if (!getFlexibleUpperBound().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasOuterType()) {
        if (!getOuterType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAbbreviatedType()) {
        if (!getAbbreviatedType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(1, flags_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(3, nullable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, flexibleTypeCapabilitiesId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(5, flexibleUpperBound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, className_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, typeParameter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, flexibleUpperBoundId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, typeParameterName_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(10, outerType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(11, outerTypeId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, typeAliasName_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(13, abbreviatedType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(14, abbreviatedTypeId_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, nullable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, flexibleTypeCapabilitiesId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, flexibleUpperBound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(6, className_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, typeParameter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, flexibleUpperBoundId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, typeParameterName_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, outerType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(11, outerTypeId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(12, typeAliasName_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, abbreviatedType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(14, abbreviatedTypeId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArgumentFieldBuilder();
          getFlexibleUpperBoundFieldBuilder();
          getOuterTypeFieldBuilder();
          getAbbreviatedTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argumentBuilder_.clear();
        }
        nullable_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        flexibleTypeCapabilitiesId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBound_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          flexibleUpperBoundBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        flexibleUpperBoundId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        className_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        typeParameter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        typeParameterName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        typeAliasName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (outerTypeBuilder_ == null) {
          outerType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          outerTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        outerTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          abbreviatedTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        abbreviatedTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Type result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Type result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Type(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.nullable_ = nullable_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flexibleTypeCapabilitiesId_ = flexibleTypeCapabilitiesId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (flexibleUpperBoundBuilder_ == null) {
          result.flexibleUpperBound_ = flexibleUpperBound_;
        } else {
          result.flexibleUpperBound_ = flexibleUpperBoundBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.flexibleUpperBoundId_ = flexibleUpperBoundId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.className_ = className_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.typeParameter_ = typeParameter_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.typeParameterName_ = typeParameterName_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.typeAliasName_ = typeAliasName_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        if (outerTypeBuilder_ == null) {
          result.outerType_ = outerType_;
        } else {
          result.outerType_ = outerTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.outerTypeId_ = outerTypeId_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        if (abbreviatedTypeBuilder_ == null) {
          result.abbreviatedType_ = abbreviatedType_;
        } else {
          result.abbreviatedType_ = abbreviatedTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.abbreviatedTypeId_ = abbreviatedTypeId_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.flags_ = flags_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Type) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Type)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) return this;
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        if (other.hasNullable()) {
          setNullable(other.getNullable());
        }
        if (other.hasFlexibleTypeCapabilitiesId()) {
          setFlexibleTypeCapabilitiesId(other.getFlexibleTypeCapabilitiesId());
        }
        if (other.hasFlexibleUpperBound()) {
          mergeFlexibleUpperBound(other.getFlexibleUpperBound());
        }
        if (other.hasFlexibleUpperBoundId()) {
          setFlexibleUpperBoundId(other.getFlexibleUpperBoundId());
        }
        if (other.hasClassName()) {
          setClassName(other.getClassName());
        }
        if (other.hasTypeParameter()) {
          setTypeParameter(other.getTypeParameter());
        }
        if (other.hasTypeParameterName()) {
          setTypeParameterName(other.getTypeParameterName());
        }
        if (other.hasTypeAliasName()) {
          setTypeAliasName(other.getTypeAliasName());
        }
        if (other.hasOuterType()) {
          mergeOuterType(other.getOuterType());
        }
        if (other.hasOuterTypeId()) {
          setOuterTypeId(other.getOuterTypeId());
        }
        if (other.hasAbbreviatedType()) {
          mergeAbbreviatedType(other.getAbbreviatedType());
        }
        if (other.hasAbbreviatedTypeId()) {
          setAbbreviatedTypeId(other.getAbbreviatedTypeId());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasFlexibleUpperBound()) {
          if (!getFlexibleUpperBound().isInitialized()) {
            
            return false;
          }
        }
        if (hasOuterType()) {
          if (!getOuterType().isInitialized()) {
            
            return false;
          }
        }
        if (hasAbbreviatedType()) {
          if (!getAbbreviatedType().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Type parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Type) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument>(argument_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.ArgumentOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      private boolean nullable_ ;
      /**
       * <code>optional bool nullable = 3 [default = false];</code>
       */
      public boolean hasNullable() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool nullable = 3 [default = false];</code>
       */
      public boolean getNullable() {
        return nullable_;
      }
      /**
       * <code>optional bool nullable = 3 [default = false];</code>
       */
      public Builder setNullable(boolean value) {
        bitField0_ |= 0x00000002;
        nullable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool nullable = 3 [default = false];</code>
       */
      public Builder clearNullable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nullable_ = false;
        onChanged();
        return this;
      }

      private int flexibleTypeCapabilitiesId_ ;
      /**
       * <code>optional int32 flexible_type_capabilities_id = 4;</code>
       *
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       */
      public boolean hasFlexibleTypeCapabilitiesId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 flexible_type_capabilities_id = 4;</code>
       *
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       */
      public int getFlexibleTypeCapabilitiesId() {
        return flexibleTypeCapabilitiesId_;
      }
      /**
       * <code>optional int32 flexible_type_capabilities_id = 4;</code>
       *
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       */
      public Builder setFlexibleTypeCapabilitiesId(int value) {
        bitField0_ |= 0x00000004;
        flexibleTypeCapabilitiesId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flexible_type_capabilities_id = 4;</code>
       *
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       */
      public Builder clearFlexibleTypeCapabilitiesId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        flexibleTypeCapabilitiesId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type flexibleUpperBound_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> flexibleUpperBoundBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public boolean hasFlexibleUpperBound() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getFlexibleUpperBound() {
        if (flexibleUpperBoundBuilder_ == null) {
          return flexibleUpperBound_;
        } else {
          return flexibleUpperBoundBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (flexibleUpperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flexibleUpperBound_ = value;
          onChanged();
        } else {
          flexibleUpperBoundBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBound_ = builderForValue.build();
          onChanged();
        } else {
          flexibleUpperBoundBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder mergeFlexibleUpperBound(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (flexibleUpperBoundBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              flexibleUpperBound_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            flexibleUpperBound_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(flexibleUpperBound_).mergeFrom(value).buildPartial();
          } else {
            flexibleUpperBound_ = value;
          }
          onChanged();
        } else {
          flexibleUpperBoundBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder clearFlexibleUpperBound() {
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBound_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          flexibleUpperBoundBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getFlexibleUpperBoundBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getFlexibleUpperBoundFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder() {
        if (flexibleUpperBoundBuilder_ != null) {
          return flexibleUpperBoundBuilder_.getMessageOrBuilder();
        } else {
          return flexibleUpperBound_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getFlexibleUpperBoundFieldBuilder() {
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBoundBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getFlexibleUpperBound(),
                  getParentForChildren(),
                  isClean());
          flexibleUpperBound_ = null;
        }
        return flexibleUpperBoundBuilder_;
      }

      private int flexibleUpperBoundId_ ;
      /**
       * <code>optional int32 flexible_upper_bound_id = 8;</code>
       */
      public boolean hasFlexibleUpperBoundId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 flexible_upper_bound_id = 8;</code>
       */
      public int getFlexibleUpperBoundId() {
        return flexibleUpperBoundId_;
      }
      /**
       * <code>optional int32 flexible_upper_bound_id = 8;</code>
       */
      public Builder setFlexibleUpperBoundId(int value) {
        bitField0_ |= 0x00000010;
        flexibleUpperBoundId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flexible_upper_bound_id = 8;</code>
       */
      public Builder clearFlexibleUpperBoundId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        flexibleUpperBoundId_ = 0;
        onChanged();
        return this;
      }

      private int className_ ;
      /**
       * <code>optional int32 class_name = 6;</code>
       */
      public boolean hasClassName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 class_name = 6;</code>
       */
      public int getClassName() {
        return className_;
      }
      /**
       * <code>optional int32 class_name = 6;</code>
       */
      public Builder setClassName(int value) {
        bitField0_ |= 0x00000020;
        className_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 class_name = 6;</code>
       */
      public Builder clearClassName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        className_ = 0;
        onChanged();
        return this;
      }

      private int typeParameter_ ;
      /**
       * <code>optional int32 type_parameter = 7;</code>
       *
       * <pre>
       * id of the type parameter
       * </pre>
       */
      public boolean hasTypeParameter() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 type_parameter = 7;</code>
       *
       * <pre>
       * id of the type parameter
       * </pre>
       */
      public int getTypeParameter() {
        return typeParameter_;
      }
      /**
       * <code>optional int32 type_parameter = 7;</code>
       *
       * <pre>
       * id of the type parameter
       * </pre>
       */
      public Builder setTypeParameter(int value) {
        bitField0_ |= 0x00000040;
        typeParameter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type_parameter = 7;</code>
       *
       * <pre>
       * id of the type parameter
       * </pre>
       */
      public Builder clearTypeParameter() {
        bitField0_ = (bitField0_ & ~0x00000040);
        typeParameter_ = 0;
        onChanged();
        return this;
      }

      private int typeParameterName_ ;
      /**
       * <code>optional int32 type_parameter_name = 9;</code>
       *
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       */
      public boolean hasTypeParameterName() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 type_parameter_name = 9;</code>
       *
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       */
      public int getTypeParameterName() {
        return typeParameterName_;
      }
      /**
       * <code>optional int32 type_parameter_name = 9;</code>
       *
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       */
      public Builder setTypeParameterName(int value) {
        bitField0_ |= 0x00000080;
        typeParameterName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type_parameter_name = 9;</code>
       *
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       */
      public Builder clearTypeParameterName() {
        bitField0_ = (bitField0_ & ~0x00000080);
        typeParameterName_ = 0;
        onChanged();
        return this;
      }

      private int typeAliasName_ ;
      /**
       * <code>optional int32 type_alias_name = 12;</code>
       *
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       */
      public boolean hasTypeAliasName() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 type_alias_name = 12;</code>
       *
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       */
      public int getTypeAliasName() {
        return typeAliasName_;
      }
      /**
       * <code>optional int32 type_alias_name = 12;</code>
       *
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       */
      public Builder setTypeAliasName(int value) {
        bitField0_ |= 0x00000100;
        typeAliasName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type_alias_name = 12;</code>
       *
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       */
      public Builder clearTypeAliasName() {
        bitField0_ = (bitField0_ & ~0x00000100);
        typeAliasName_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type outerType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> outerTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public boolean hasOuterType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getOuterType() {
        if (outerTypeBuilder_ == null) {
          return outerType_;
        } else {
          return outerTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public Builder setOuterType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (outerTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          outerType_ = value;
          onChanged();
        } else {
          outerTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public Builder setOuterType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (outerTypeBuilder_ == null) {
          outerType_ = builderForValue.build();
          onChanged();
        } else {
          outerTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public Builder mergeOuterType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (outerTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              outerType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            outerType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(outerType_).mergeFrom(value).buildPartial();
          } else {
            outerType_ = value;
          }
          onChanged();
        } else {
          outerTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public Builder clearOuterType() {
        if (outerTypeBuilder_ == null) {
          outerType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          outerTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getOuterTypeBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getOuterTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getOuterTypeOrBuilder() {
        if (outerTypeBuilder_ != null) {
          return outerTypeBuilder_.getMessageOrBuilder();
        } else {
          return outerType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       *
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getOuterTypeFieldBuilder() {
        if (outerTypeBuilder_ == null) {
          outerTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getOuterType(),
                  getParentForChildren(),
                  isClean());
          outerType_ = null;
        }
        return outerTypeBuilder_;
      }

      private int outerTypeId_ ;
      /**
       * <code>optional int32 outer_type_id = 11;</code>
       */
      public boolean hasOuterTypeId() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 outer_type_id = 11;</code>
       */
      public int getOuterTypeId() {
        return outerTypeId_;
      }
      /**
       * <code>optional int32 outer_type_id = 11;</code>
       */
      public Builder setOuterTypeId(int value) {
        bitField0_ |= 0x00000400;
        outerTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 outer_type_id = 11;</code>
       */
      public Builder clearOuterTypeId() {
        bitField0_ = (bitField0_ & ~0x00000400);
        outerTypeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type abbreviatedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> abbreviatedTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public boolean hasAbbreviatedType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getAbbreviatedType() {
        if (abbreviatedTypeBuilder_ == null) {
          return abbreviatedType_;
        } else {
          return abbreviatedTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (abbreviatedTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          abbreviatedType_ = value;
          onChanged();
        } else {
          abbreviatedTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedType_ = builderForValue.build();
          onChanged();
        } else {
          abbreviatedTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder mergeAbbreviatedType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (abbreviatedTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              abbreviatedType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            abbreviatedType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(abbreviatedType_).mergeFrom(value).buildPartial();
          } else {
            abbreviatedType_ = value;
          }
          onChanged();
        } else {
          abbreviatedTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder clearAbbreviatedType() {
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          abbreviatedTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getAbbreviatedTypeBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getAbbreviatedTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder() {
        if (abbreviatedTypeBuilder_ != null) {
          return abbreviatedTypeBuilder_.getMessageOrBuilder();
        } else {
          return abbreviatedType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getAbbreviatedTypeFieldBuilder() {
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getAbbreviatedType(),
                  getParentForChildren(),
                  isClean());
          abbreviatedType_ = null;
        }
        return abbreviatedTypeBuilder_;
      }

      private int abbreviatedTypeId_ ;
      /**
       * <code>optional int32 abbreviated_type_id = 14;</code>
       */
      public boolean hasAbbreviatedTypeId() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 abbreviated_type_id = 14;</code>
       */
      public int getAbbreviatedTypeId() {
        return abbreviatedTypeId_;
      }
      /**
       * <code>optional int32 abbreviated_type_id = 14;</code>
       */
      public Builder setAbbreviatedTypeId(int value) {
        bitField0_ |= 0x00001000;
        abbreviatedTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 abbreviated_type_id = 14;</code>
       */
      public Builder clearAbbreviatedTypeId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        abbreviatedTypeId_ = 0;
        onChanged();
        return this;
      }

      private int flags_ ;
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *suspend
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *suspend
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *suspend
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00002000;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *suspend
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00002000);
        flags_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type)
    }

    static {
      defaultInstance = new Type(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type)
  }

  public interface TypeParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeParameter)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TypeParameter> {

    /**
     * <code>required int32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     */
    int getId();

    /**
     * <code>required int32 name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required int32 name = 2;</code>
     */
    int getName();

    /**
     * <code>optional bool reified = 3 [default = false];</code>
     */
    boolean hasReified();
    /**
     * <code>optional bool reified = 3 [default = false];</code>
     */
    boolean getReified();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     */
    boolean hasVariance();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance getVariance();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> 
        getUpperBoundList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUpperBound(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    int getUpperBoundCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getUpperBoundOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
        int index);

    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getUpperBoundIdList();
    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    int getUpperBoundIdCount();
    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    int getUpperBoundId(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
   */
  public static final class TypeParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        TypeParameter> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeParameter)
      TypeParameterOrBuilder {
    // Use TypeParameter.newBuilder() to construct.
    private TypeParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TypeParameter(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TypeParameter defaultInstance;
    public static TypeParameter getDefaultInstance() {
      return defaultInstance;
    }

    public TypeParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TypeParameter(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              name_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              reified_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance value = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                variance_ = value;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                upperBound_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>();
                mutable_bitField0_ |= 0x00000010;
              }
              upperBound_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                upperBoundId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              upperBoundId_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                upperBoundId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                upperBoundId_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          upperBound_ = java.util.Collections.unmodifiableList(upperBound_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          upperBoundId_ = java.util.Collections.unmodifiableList(upperBoundId_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<TypeParameter> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<TypeParameter>() {
      public TypeParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new TypeParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.TypeParameter.Variance}
     */
    public enum Variance
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>IN = 0;</code>
       */
      IN(0, 0),
      /**
       * <code>OUT = 1;</code>
       */
      OUT(1, 1),
      /**
       * <code>INV = 2;</code>
       */
      INV(2, 2),
      ;

      /**
       * <code>IN = 0;</code>
       */
      public static final int IN_VALUE = 0;
      /**
       * <code>OUT = 1;</code>
       */
      public static final int OUT_VALUE = 1;
      /**
       * <code>INV = 2;</code>
       */
      public static final int INV_VALUE = 2;


      public final int getNumber() { return value; }

      public static Variance valueOf(int value) {
        switch (value) {
          case 0: return IN;
          case 1: return OUT;
          case 2: return INV;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>() {
              public Variance findValueByNumber(int number) {
                return Variance.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Variance[] VALUES = values();

      public static Variance valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Variance(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.TypeParameter.Variance)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int REIFIED_FIELD_NUMBER = 3;
    private boolean reified_;
    /**
     * <code>optional bool reified = 3 [default = false];</code>
     */
    public boolean hasReified() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool reified = 3 [default = false];</code>
     */
    public boolean getReified() {
      return reified_;
    }

    public static final int VARIANCE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance variance_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     */
    public boolean hasVariance() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance getVariance() {
      return variance_;
    }

    public static final int UPPER_BOUND_FIELD_NUMBER = 5;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> upperBound_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getUpperBoundList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getUpperBoundOrBuilderList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public int getUpperBoundCount() {
      return upperBound_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUpperBound(int index) {
      return upperBound_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
        int index) {
      return upperBound_.get(index);
    }

    public static final int UPPER_BOUND_ID_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> upperBoundId_;
    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getUpperBoundIdList() {
      return upperBoundId_;
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    public int getUpperBoundIdCount() {
      return upperBoundId_.size();
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
     */
    public int getUpperBoundId(int index) {
      return upperBoundId_.get(index);
    }
    private int upperBoundIdMemoizedSerializedSize = -1;

    private void initFields() {
      id_ = 0;
      name_ = 0;
      reified_ = false;
      variance_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance.INV;
      upperBound_ = java.util.Collections.emptyList();
      upperBoundId_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getUpperBoundCount(); i++) {
        if (!getUpperBound(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, reified_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, variance_.getNumber());
      }
      for (int i = 0; i < upperBound_.size(); i++) {
        output.writeMessage(5, upperBound_.get(i));
      }
      if (getUpperBoundIdList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(upperBoundIdMemoizedSerializedSize);
      }
      for (int i = 0; i < upperBoundId_.size(); i++) {
        output.writeInt32NoTag(upperBoundId_.get(i));
      }
      extensionWriter.writeUntil(1000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, reified_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, variance_.getNumber());
      }
      for (int i = 0; i < upperBound_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, upperBound_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < upperBoundId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(upperBoundId_.get(i));
        }
        size += dataSize;
        if (!getUpperBoundIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        upperBoundIdMemoizedSerializedSize = dataSize;
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeParameter)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUpperBoundFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        reified_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        variance_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance.INV;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (upperBoundBuilder_ == null) {
          upperBound_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          upperBoundBuilder_.clear();
        }
        upperBoundId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.reified_ = reified_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.variance_ = variance_;
        if (upperBoundBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            upperBound_ = java.util.Collections.unmodifiableList(upperBound_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.upperBound_ = upperBound_;
        } else {
          result.upperBound_ = upperBoundBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          upperBoundId_ = java.util.Collections.unmodifiableList(upperBoundId_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.upperBoundId_ = upperBoundId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReified()) {
          setReified(other.getReified());
        }
        if (other.hasVariance()) {
          setVariance(other.getVariance());
        }
        if (upperBoundBuilder_ == null) {
          if (!other.upperBound_.isEmpty()) {
            if (upperBound_.isEmpty()) {
              upperBound_ = other.upperBound_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureUpperBoundIsMutable();
              upperBound_.addAll(other.upperBound_);
            }
            onChanged();
          }
        } else {
          if (!other.upperBound_.isEmpty()) {
            if (upperBoundBuilder_.isEmpty()) {
              upperBoundBuilder_.dispose();
              upperBoundBuilder_ = null;
              upperBound_ = other.upperBound_;
              bitField0_ = (bitField0_ & ~0x00000010);
              upperBoundBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUpperBoundFieldBuilder() : null;
            } else {
              upperBoundBuilder_.addAllMessages(other.upperBound_);
            }
          }
        }
        if (!other.upperBoundId_.isEmpty()) {
          if (upperBoundId_.isEmpty()) {
            upperBoundId_ = other.upperBoundId_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureUpperBoundIdIsMutable();
            upperBoundId_.addAll(other.upperBoundId_);
          }
          onChanged();
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        for (int i = 0; i < getUpperBoundCount(); i++) {
          if (!getUpperBound(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>required int32 name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private boolean reified_ ;
      /**
       * <code>optional bool reified = 3 [default = false];</code>
       */
      public boolean hasReified() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool reified = 3 [default = false];</code>
       */
      public boolean getReified() {
        return reified_;
      }
      /**
       * <code>optional bool reified = 3 [default = false];</code>
       */
      public Builder setReified(boolean value) {
        bitField0_ |= 0x00000004;
        reified_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool reified = 3 [default = false];</code>
       */
      public Builder clearReified() {
        bitField0_ = (bitField0_ & ~0x00000004);
        reified_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance variance_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance.INV;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       */
      public boolean hasVariance() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance getVariance() {
        return variance_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       */
      public Builder setVariance(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        variance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       */
      public Builder clearVariance() {
        bitField0_ = (bitField0_ & ~0x00000008);
        variance_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Variance.INV;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> upperBound_ =
        java.util.Collections.emptyList();
      private void ensureUpperBoundIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          upperBound_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>(upperBound_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> upperBoundBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getUpperBoundList() {
        if (upperBoundBuilder_ == null) {
          return java.util.Collections.unmodifiableList(upperBound_);
        } else {
          return upperBoundBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public int getUpperBoundCount() {
        if (upperBoundBuilder_ == null) {
          return upperBound_.size();
        } else {
          return upperBoundBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUpperBound(int index) {
        if (upperBoundBuilder_ == null) {
          return upperBound_.get(index);
        } else {
          return upperBoundBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.set(index, value);
          onChanged();
        } else {
          upperBoundBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.set(index, builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.add(value);
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.add(index, value);
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.add(builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.add(index, builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addAllUpperBound(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> values) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, upperBound_);
          onChanged();
        } else {
          upperBoundBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder clearUpperBound() {
        if (upperBoundBuilder_ == null) {
          upperBound_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          upperBoundBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder removeUpperBound(int index) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.remove(index);
          onChanged();
        } else {
          upperBoundBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getUpperBoundBuilder(
          int index) {
        return getUpperBoundFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
          int index) {
        if (upperBoundBuilder_ == null) {
          return upperBound_.get(index);  } else {
          return upperBoundBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
           getUpperBoundOrBuilderList() {
        if (upperBoundBuilder_ != null) {
          return upperBoundBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(upperBound_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addUpperBoundBuilder() {
        return getUpperBoundFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addUpperBoundBuilder(
          int index) {
        return getUpperBoundFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder> 
           getUpperBoundBuilderList() {
        return getUpperBoundFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getUpperBoundFieldBuilder() {
        if (upperBoundBuilder_ == null) {
          upperBoundBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  upperBound_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          upperBound_ = null;
        }
        return upperBoundBuilder_;
      }

      private java.util.List<java.lang.Integer> upperBoundId_ = java.util.Collections.emptyList();
      private void ensureUpperBoundIdIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          upperBoundId_ = new java.util.ArrayList<java.lang.Integer>(upperBoundId_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getUpperBoundIdList() {
        return java.util.Collections.unmodifiableList(upperBoundId_);
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public int getUpperBoundIdCount() {
        return upperBoundId_.size();
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public int getUpperBoundId(int index) {
        return upperBoundId_.get(index);
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public Builder setUpperBoundId(
          int index, int value) {
        ensureUpperBoundIdIsMutable();
        upperBoundId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public Builder addUpperBoundId(int value) {
        ensureUpperBoundIdIsMutable();
        upperBoundId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public Builder addAllUpperBoundId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUpperBoundIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, upperBoundId_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [packed = true];</code>
       */
      public Builder clearUpperBoundId() {
        upperBoundId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeParameter)
    }

    static {
      defaultInstance = new TypeParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeParameter)
  }

  public interface ClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Class)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Class> {

    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *ClassKind
     *isInner
     *isData
     *isExternal
     *isExpect
     *isInline
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *ClassKind
     *isInner
     *isData
     *isExternal
     *isExpect
     *isInline
     * </pre>
     */
    int getFlags();

    /**
     * <code>required int32 fq_name = 3;</code>
     */
    boolean hasFqName();
    /**
     * <code>required int32 fq_name = 3;</code>
     */
    int getFqName();

    /**
     * <code>optional int32 companion_object_name = 4;</code>
     */
    boolean hasCompanionObjectName();
    /**
     * <code>optional int32 companion_object_name = 4;</code>
     */
    int getCompanionObjectName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> 
        getSupertypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getSupertype(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    int getSupertypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getSupertypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
        int index);

    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getSupertypeIdList();
    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    int getSupertypeIdCount();
    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    int getSupertypeId(int index);

    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getNestedClassNameList();
    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    int getNestedClassNameCount();
    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    int getNestedClassName(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> 
        getConstructorList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor getConstructor(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    int getConstructorCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder> 
        getConstructorOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    int getFunctionCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    int getPropertyCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    int getTypeAliasCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> 
        getEnumEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry getEnumEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    int getEnumEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder> 
        getEnumEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
        int index);

    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getSealedSubclassFqNameList();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    int getSealedSubclassFqNameCount();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    int getSealedSubclassFqName(int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    boolean hasTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    boolean hasVersionRequirement();
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    int getVersionRequirement();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
   */
  public static final class Class extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Class> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Class)
      ClassOrBuilder {
    // Use Class.newBuilder() to construct.
    private Class(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Class(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Class defaultInstance;
    public static Class getDefaultInstance() {
      return defaultInstance;
    }

    public Class getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Class(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                supertypeId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              supertypeId_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                supertypeId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                supertypeId_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              fqName_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              companionObjectName_ = input.readInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>();
                mutable_bitField0_ |= 0x00000008;
              }
              typeParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                supertype_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>();
                mutable_bitField0_ |= 0x00000010;
              }
              supertype_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                nestedClassName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              nestedClassName_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                nestedClassName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                nestedClassName_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                constructor_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor>();
                mutable_bitField0_ |= 0x00000080;
              }
              constructor_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function>();
                mutable_bitField0_ |= 0x00000100;
              }
              function_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.PARSER, extensionRegistry));
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property>();
                mutable_bitField0_ |= 0x00000200;
              }
              property_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias>();
                mutable_bitField0_ |= 0x00000400;
              }
              typeAlias_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.PARSER, extensionRegistry));
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                enumEntry_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry>();
                mutable_bitField0_ |= 0x00000800;
              }
              enumEntry_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.PARSER, extensionRegistry));
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                sealedSubclassFqName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              sealedSubclassFqName_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                sealedSubclassFqName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                sealedSubclassFqName_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 242: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = typeTable_.toBuilder();
              }
              typeTable_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeTable_);
                typeTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 248: {
              bitField0_ |= 0x00000010;
              versionRequirement_ = input.readInt32();
              break;
            }
            case 258: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = versionRequirementTable_.toBuilder();
              }
              versionRequirementTable_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(versionRequirementTable_);
                versionRequirementTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          supertypeId_ = java.util.Collections.unmodifiableList(supertypeId_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          supertype_ = java.util.Collections.unmodifiableList(supertype_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          nestedClassName_ = java.util.Collections.unmodifiableList(nestedClassName_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          constructor_ = java.util.Collections.unmodifiableList(constructor_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          function_ = java.util.Collections.unmodifiableList(function_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          property_ = java.util.Collections.unmodifiableList(property_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          enumEntry_ = java.util.Collections.unmodifiableList(enumEntry_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          sealedSubclassFqName_ = java.util.Collections.unmodifiableList(sealedSubclassFqName_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Class> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Class>() {
      public Class parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Class(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Class> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Class.Kind}
     */
    public enum Kind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>CLASS = 0;</code>
       *
       * <pre>
       * 3 bits
       * </pre>
       */
      CLASS(0, 0),
      /**
       * <code>INTERFACE = 1;</code>
       */
      INTERFACE(1, 1),
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      ENUM_CLASS(2, 2),
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      ENUM_ENTRY(3, 3),
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      ANNOTATION_CLASS(4, 4),
      /**
       * <code>OBJECT = 5;</code>
       */
      OBJECT(5, 5),
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      COMPANION_OBJECT(6, 6),
      ;

      /**
       * <code>CLASS = 0;</code>
       *
       * <pre>
       * 3 bits
       * </pre>
       */
      public static final int CLASS_VALUE = 0;
      /**
       * <code>INTERFACE = 1;</code>
       */
      public static final int INTERFACE_VALUE = 1;
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      public static final int ENUM_CLASS_VALUE = 2;
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      public static final int ENUM_ENTRY_VALUE = 3;
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      public static final int ANNOTATION_CLASS_VALUE = 4;
      /**
       * <code>OBJECT = 5;</code>
       */
      public static final int OBJECT_VALUE = 5;
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      public static final int COMPANION_OBJECT_VALUE = 6;


      public final int getNumber() { return value; }

      public static Kind valueOf(int value) {
        switch (value) {
          case 0: return CLASS;
          case 1: return INTERFACE;
          case 2: return ENUM_CLASS;
          case 3: return ENUM_ENTRY;
          case 4: return ANNOTATION_CLASS;
          case 5: return OBJECT;
          case 6: return COMPANION_OBJECT;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
              public Kind findValueByNumber(int number) {
                return Kind.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.getDescriptor().getEnumTypes().get(0);
      }

      private static final Kind[] VALUES = values();

      public static Kind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Kind(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Class.Kind)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *ClassKind
     *isInner
     *isData
     *isExternal
     *isExpect
     *isInline
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *ClassKind
     *isInner
     *isData
     *isExternal
     *isExpect
     *isInline
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int FQ_NAME_FIELD_NUMBER = 3;
    private int fqName_;
    /**
     * <code>required int32 fq_name = 3;</code>
     */
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 fq_name = 3;</code>
     */
    public int getFqName() {
      return fqName_;
    }

    public static final int COMPANION_OBJECT_NAME_FIELD_NUMBER = 4;
    private int companionObjectName_;
    /**
     * <code>optional int32 companion_object_name = 4;</code>
     */
    public boolean hasCompanionObjectName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 companion_object_name = 4;</code>
     */
    public int getCompanionObjectName() {
      return companionObjectName_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 5;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int SUPERTYPE_FIELD_NUMBER = 6;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> supertype_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getSupertypeList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getSupertypeOrBuilderList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public int getSupertypeCount() {
      return supertype_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getSupertype(int index) {
      return supertype_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
        int index) {
      return supertype_.get(index);
    }

    public static final int SUPERTYPE_ID_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> supertypeId_;
    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getSupertypeIdList() {
      return supertypeId_;
    }
    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    public int getSupertypeIdCount() {
      return supertypeId_.size();
    }
    /**
     * <code>repeated int32 supertype_id = 2 [packed = true];</code>
     */
    public int getSupertypeId(int index) {
      return supertypeId_.get(index);
    }
    private int supertypeIdMemoizedSerializedSize = -1;

    public static final int NESTED_CLASS_NAME_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> nestedClassName_;
    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getNestedClassNameList() {
      return nestedClassName_;
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    public int getNestedClassNameCount() {
      return nestedClassName_.size();
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
     */
    public int getNestedClassName(int index) {
      return nestedClassName_.get(index);
    }
    private int nestedClassNameMemoizedSerializedSize = -1;

    public static final int CONSTRUCTOR_FIELD_NUMBER = 8;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> constructor_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> getConstructorList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder> 
        getConstructorOrBuilderList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public int getConstructorCount() {
      return constructor_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor getConstructor(int index) {
      return constructor_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
        int index) {
      return constructor_.get(index);
    }

    public static final int FUNCTION_FIELD_NUMBER = 9;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 10;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 11;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }

    public static final int ENUM_ENTRY_FIELD_NUMBER = 13;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> enumEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> getEnumEntryList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder> 
        getEnumEntryOrBuilderList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public int getEnumEntryCount() {
      return enumEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry getEnumEntry(int index) {
      return enumEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
        int index) {
      return enumEntry_.get(index);
    }

    public static final int SEALED_SUBCLASS_FQ_NAME_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> sealedSubclassFqName_;
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getSealedSubclassFqNameList() {
      return sealedSubclassFqName_;
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    public int getSealedSubclassFqNameCount() {
      return sealedSubclassFqName_.size();
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
     */
    public int getSealedSubclassFqName(int index) {
      return sealedSubclassFqName_.get(index);
    }
    private int sealedSubclassFqNameMemoizedSerializedSize = -1;

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
      return typeTable_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private int versionRequirement_;
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public boolean hasVersionRequirement() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public int getVersionRequirement() {
      return versionRequirement_;
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
      return versionRequirementTable_;
    }

    private void initFields() {
      flags_ = 6;
      fqName_ = 0;
      companionObjectName_ = 0;
      typeParameter_ = java.util.Collections.emptyList();
      supertype_ = java.util.Collections.emptyList();
      supertypeId_ = java.util.Collections.emptyList();
      nestedClassName_ = java.util.Collections.emptyList();
      constructor_ = java.util.Collections.emptyList();
      function_ = java.util.Collections.emptyList();
      property_ = java.util.Collections.emptyList();
      typeAlias_ = java.util.Collections.emptyList();
      enumEntry_ = java.util.Collections.emptyList();
      sealedSubclassFqName_ = java.util.Collections.emptyList();
      typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      versionRequirement_ = 0;
      versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSupertypeCount(); i++) {
        if (!getSupertype(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getConstructorCount(); i++) {
        if (!getConstructor(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getFunctionCount(); i++) {
        if (!getFunction(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPropertyCount(); i++) {
        if (!getProperty(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeAliasCount(); i++) {
        if (!getTypeAlias(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getEnumEntryCount(); i++) {
        if (!getEnumEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (getSupertypeIdList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(supertypeIdMemoizedSerializedSize);
      }
      for (int i = 0; i < supertypeId_.size(); i++) {
        output.writeInt32NoTag(supertypeId_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, fqName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, companionObjectName_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(5, typeParameter_.get(i));
      }
      for (int i = 0; i < supertype_.size(); i++) {
        output.writeMessage(6, supertype_.get(i));
      }
      if (getNestedClassNameList().size() > 0) {
        output.writeRawVarint32(58);
        output.writeRawVarint32(nestedClassNameMemoizedSerializedSize);
      }
      for (int i = 0; i < nestedClassName_.size(); i++) {
        output.writeInt32NoTag(nestedClassName_.get(i));
      }
      for (int i = 0; i < constructor_.size(); i++) {
        output.writeMessage(8, constructor_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        output.writeMessage(9, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        output.writeMessage(10, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        output.writeMessage(11, typeAlias_.get(i));
      }
      for (int i = 0; i < enumEntry_.size(); i++) {
        output.writeMessage(13, enumEntry_.get(i));
      }
      if (getSealedSubclassFqNameList().size() > 0) {
        output.writeRawVarint32(130);
        output.writeRawVarint32(sealedSubclassFqNameMemoizedSerializedSize);
      }
      for (int i = 0; i < sealedSubclassFqName_.size(); i++) {
        output.writeInt32NoTag(sealedSubclassFqName_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(30, typeTable_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(31, versionRequirement_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(32, versionRequirementTable_);
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < supertypeId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(supertypeId_.get(i));
        }
        size += dataSize;
        if (!getSupertypeIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        supertypeIdMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, fqName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, companionObjectName_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, typeParameter_.get(i));
      }
      for (int i = 0; i < supertype_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, supertype_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < nestedClassName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(nestedClassName_.get(i));
        }
        size += dataSize;
        if (!getNestedClassNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        nestedClassNameMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < constructor_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, constructor_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, typeAlias_.get(i));
      }
      for (int i = 0; i < enumEntry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, enumEntry_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sealedSubclassFqName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sealedSubclassFqName_.get(i));
        }
        size += dataSize;
        if (!getSealedSubclassFqNameList().isEmpty()) {
          size += 2;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sealedSubclassFqNameMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, typeTable_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(31, versionRequirement_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, versionRequirementTable_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Class prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Class, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Class)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeParameterFieldBuilder();
          getSupertypeFieldBuilder();
          getConstructorFieldBuilder();
          getFunctionFieldBuilder();
          getPropertyFieldBuilder();
          getTypeAliasFieldBuilder();
          getEnumEntryFieldBuilder();
          getTypeTableFieldBuilder();
          getVersionRequirementTableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 6;
        bitField0_ = (bitField0_ & ~0x00000001);
        fqName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        companionObjectName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          typeParameterBuilder_.clear();
        }
        if (supertypeBuilder_ == null) {
          supertype_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          supertypeBuilder_.clear();
        }
        supertypeId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        nestedClassName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        if (constructorBuilder_ == null) {
          constructor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          constructorBuilder_.clear();
        }
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          functionBuilder_.clear();
        }
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          propertyBuilder_.clear();
        }
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          typeAliasBuilder_.clear();
        }
        if (enumEntryBuilder_ == null) {
          enumEntry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          enumEntryBuilder_.clear();
        }
        sealedSubclassFqName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        versionRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
        } else {
          versionRequirementTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Class result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Class result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Class(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fqName_ = fqName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.companionObjectName_ = companionObjectName_;
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (supertypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            supertype_ = java.util.Collections.unmodifiableList(supertype_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.supertype_ = supertype_;
        } else {
          result.supertype_ = supertypeBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          supertypeId_ = java.util.Collections.unmodifiableList(supertypeId_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.supertypeId_ = supertypeId_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          nestedClassName_ = java.util.Collections.unmodifiableList(nestedClassName_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.nestedClassName_ = nestedClassName_;
        if (constructorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            constructor_ = java.util.Collections.unmodifiableList(constructor_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.constructor_ = constructor_;
        } else {
          result.constructor_ = constructorBuilder_.build();
        }
        if (functionBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            function_ = java.util.Collections.unmodifiableList(function_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
        if (propertyBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            property_ = java.util.Collections.unmodifiableList(property_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.property_ = property_;
        } else {
          result.property_ = propertyBuilder_.build();
        }
        if (typeAliasBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.typeAlias_ = typeAlias_;
        } else {
          result.typeAlias_ = typeAliasBuilder_.build();
        }
        if (enumEntryBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            enumEntry_ = java.util.Collections.unmodifiableList(enumEntry_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.enumEntry_ = enumEntry_;
        } else {
          result.enumEntry_ = enumEntryBuilder_.build();
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          sealedSubclassFqName_ = java.util.Collections.unmodifiableList(sealedSubclassFqName_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.sealedSubclassFqName_ = sealedSubclassFqName_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000008;
        }
        if (typeTableBuilder_ == null) {
          result.typeTable_ = typeTable_;
        } else {
          result.typeTable_ = typeTableBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.versionRequirement_ = versionRequirement_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000020;
        }
        if (versionRequirementTableBuilder_ == null) {
          result.versionRequirementTable_ = versionRequirementTable_;
        } else {
          result.versionRequirementTable_ = versionRequirementTableBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Class) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Class)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Class other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasFqName()) {
          setFqName(other.getFqName());
        }
        if (other.hasCompanionObjectName()) {
          setCompanionObjectName(other.getCompanionObjectName());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000008);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (supertypeBuilder_ == null) {
          if (!other.supertype_.isEmpty()) {
            if (supertype_.isEmpty()) {
              supertype_ = other.supertype_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSupertypeIsMutable();
              supertype_.addAll(other.supertype_);
            }
            onChanged();
          }
        } else {
          if (!other.supertype_.isEmpty()) {
            if (supertypeBuilder_.isEmpty()) {
              supertypeBuilder_.dispose();
              supertypeBuilder_ = null;
              supertype_ = other.supertype_;
              bitField0_ = (bitField0_ & ~0x00000010);
              supertypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSupertypeFieldBuilder() : null;
            } else {
              supertypeBuilder_.addAllMessages(other.supertype_);
            }
          }
        }
        if (!other.supertypeId_.isEmpty()) {
          if (supertypeId_.isEmpty()) {
            supertypeId_ = other.supertypeId_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSupertypeIdIsMutable();
            supertypeId_.addAll(other.supertypeId_);
          }
          onChanged();
        }
        if (!other.nestedClassName_.isEmpty()) {
          if (nestedClassName_.isEmpty()) {
            nestedClassName_ = other.nestedClassName_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureNestedClassNameIsMutable();
            nestedClassName_.addAll(other.nestedClassName_);
          }
          onChanged();
        }
        if (constructorBuilder_ == null) {
          if (!other.constructor_.isEmpty()) {
            if (constructor_.isEmpty()) {
              constructor_ = other.constructor_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureConstructorIsMutable();
              constructor_.addAll(other.constructor_);
            }
            onChanged();
          }
        } else {
          if (!other.constructor_.isEmpty()) {
            if (constructorBuilder_.isEmpty()) {
              constructorBuilder_.dispose();
              constructorBuilder_ = null;
              constructor_ = other.constructor_;
              bitField0_ = (bitField0_ & ~0x00000080);
              constructorBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getConstructorFieldBuilder() : null;
            } else {
              constructorBuilder_.addAllMessages(other.constructor_);
            }
          }
        }
        if (functionBuilder_ == null) {
          if (!other.function_.isEmpty()) {
            if (function_.isEmpty()) {
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureFunctionIsMutable();
              function_.addAll(other.function_);
            }
            onChanged();
          }
        } else {
          if (!other.function_.isEmpty()) {
            if (functionBuilder_.isEmpty()) {
              functionBuilder_.dispose();
              functionBuilder_ = null;
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000100);
              functionBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFunctionFieldBuilder() : null;
            } else {
              functionBuilder_.addAllMessages(other.function_);
            }
          }
        }
        if (propertyBuilder_ == null) {
          if (!other.property_.isEmpty()) {
            if (property_.isEmpty()) {
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensurePropertyIsMutable();
              property_.addAll(other.property_);
            }
            onChanged();
          }
        } else {
          if (!other.property_.isEmpty()) {
            if (propertyBuilder_.isEmpty()) {
              propertyBuilder_.dispose();
              propertyBuilder_ = null;
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000200);
              propertyBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertyFieldBuilder() : null;
            } else {
              propertyBuilder_.addAllMessages(other.property_);
            }
          }
        }
        if (typeAliasBuilder_ == null) {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAlias_.isEmpty()) {
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureTypeAliasIsMutable();
              typeAlias_.addAll(other.typeAlias_);
            }
            onChanged();
          }
        } else {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAliasBuilder_.isEmpty()) {
              typeAliasBuilder_.dispose();
              typeAliasBuilder_ = null;
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000400);
              typeAliasBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeAliasFieldBuilder() : null;
            } else {
              typeAliasBuilder_.addAllMessages(other.typeAlias_);
            }
          }
        }
        if (enumEntryBuilder_ == null) {
          if (!other.enumEntry_.isEmpty()) {
            if (enumEntry_.isEmpty()) {
              enumEntry_ = other.enumEntry_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureEnumEntryIsMutable();
              enumEntry_.addAll(other.enumEntry_);
            }
            onChanged();
          }
        } else {
          if (!other.enumEntry_.isEmpty()) {
            if (enumEntryBuilder_.isEmpty()) {
              enumEntryBuilder_.dispose();
              enumEntryBuilder_ = null;
              enumEntry_ = other.enumEntry_;
              bitField0_ = (bitField0_ & ~0x00000800);
              enumEntryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEnumEntryFieldBuilder() : null;
            } else {
              enumEntryBuilder_.addAllMessages(other.enumEntry_);
            }
          }
        }
        if (!other.sealedSubclassFqName_.isEmpty()) {
          if (sealedSubclassFqName_.isEmpty()) {
            sealedSubclassFqName_ = other.sealedSubclassFqName_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureSealedSubclassFqNameIsMutable();
            sealedSubclassFqName_.addAll(other.sealedSubclassFqName_);
          }
          onChanged();
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (other.hasVersionRequirement()) {
          setVersionRequirement(other.getVersionRequirement());
        }
        if (other.hasVersionRequirementTable()) {
          mergeVersionRequirementTable(other.getVersionRequirementTable());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFqName()) {
          
          return false;
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSupertypeCount(); i++) {
          if (!getSupertype(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getConstructorCount(); i++) {
          if (!getConstructor(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getFunctionCount(); i++) {
          if (!getFunction(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getPropertyCount(); i++) {
          if (!getProperty(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTypeAliasCount(); i++) {
          if (!getTypeAlias(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getEnumEntryCount(); i++) {
          if (!getEnumEntry(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Class parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Class) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *ClassKind
       *isInner
       *isData
       *isExternal
       *isExpect
       *isInline
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *ClassKind
       *isInner
       *isData
       *isExternal
       *isExpect
       *isInline
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *ClassKind
       *isInner
       *isData
       *isExternal
       *isExpect
       *isInline
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *ClassKind
       *isInner
       *isData
       *isExternal
       *isExpect
       *isInline
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int fqName_ ;
      /**
       * <code>required int32 fq_name = 3;</code>
       */
      public boolean hasFqName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 fq_name = 3;</code>
       */
      public int getFqName() {
        return fqName_;
      }
      /**
       * <code>required int32 fq_name = 3;</code>
       */
      public Builder setFqName(int value) {
        bitField0_ |= 0x00000002;
        fqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 fq_name = 3;</code>
       */
      public Builder clearFqName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fqName_ = 0;
        onChanged();
        return this;
      }

      private int companionObjectName_ ;
      /**
       * <code>optional int32 companion_object_name = 4;</code>
       */
      public boolean hasCompanionObjectName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 companion_object_name = 4;</code>
       */
      public int getCompanionObjectName() {
        return companionObjectName_;
      }
      /**
       * <code>optional int32 companion_object_name = 4;</code>
       */
      public Builder setCompanionObjectName(int value) {
        bitField0_ |= 0x00000004;
        companionObjectName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 companion_object_name = 4;</code>
       */
      public Builder clearCompanionObjectName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        companionObjectName_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> supertype_ =
        java.util.Collections.emptyList();
      private void ensureSupertypeIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          supertype_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>(supertype_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> supertypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getSupertypeList() {
        if (supertypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(supertype_);
        } else {
          return supertypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public int getSupertypeCount() {
        if (supertypeBuilder_ == null) {
          return supertype_.size();
        } else {
          return supertypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getSupertype(int index) {
        if (supertypeBuilder_ == null) {
          return supertype_.get(index);
        } else {
          return supertypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.set(index, value);
          onChanged();
        } else {
          supertypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.set(index, builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.add(value);
          onChanged();
        } else {
          supertypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.add(index, value);
          onChanged();
        } else {
          supertypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.add(builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.add(index, builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addAllSupertype(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> values) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, supertype_);
          onChanged();
        } else {
          supertypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder clearSupertype() {
        if (supertypeBuilder_ == null) {
          supertype_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          supertypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder removeSupertype(int index) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.remove(index);
          onChanged();
        } else {
          supertypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getSupertypeBuilder(
          int index) {
        return getSupertypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
          int index) {
        if (supertypeBuilder_ == null) {
          return supertype_.get(index);  } else {
          return supertypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
           getSupertypeOrBuilderList() {
        if (supertypeBuilder_ != null) {
          return supertypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(supertype_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addSupertypeBuilder() {
        return getSupertypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addSupertypeBuilder(
          int index) {
        return getSupertypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder> 
           getSupertypeBuilderList() {
        return getSupertypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getSupertypeFieldBuilder() {
        if (supertypeBuilder_ == null) {
          supertypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  supertype_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          supertype_ = null;
        }
        return supertypeBuilder_;
      }

      private java.util.List<java.lang.Integer> supertypeId_ = java.util.Collections.emptyList();
      private void ensureSupertypeIdIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          supertypeId_ = new java.util.ArrayList<java.lang.Integer>(supertypeId_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getSupertypeIdList() {
        return java.util.Collections.unmodifiableList(supertypeId_);
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public int getSupertypeIdCount() {
        return supertypeId_.size();
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public int getSupertypeId(int index) {
        return supertypeId_.get(index);
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public Builder setSupertypeId(
          int index, int value) {
        ensureSupertypeIdIsMutable();
        supertypeId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public Builder addSupertypeId(int value) {
        ensureSupertypeIdIsMutable();
        supertypeId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public Builder addAllSupertypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSupertypeIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, supertypeId_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [packed = true];</code>
       */
      public Builder clearSupertypeId() {
        supertypeId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> nestedClassName_ = java.util.Collections.emptyList();
      private void ensureNestedClassNameIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          nestedClassName_ = new java.util.ArrayList<java.lang.Integer>(nestedClassName_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getNestedClassNameList() {
        return java.util.Collections.unmodifiableList(nestedClassName_);
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public int getNestedClassNameCount() {
        return nestedClassName_.size();
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public int getNestedClassName(int index) {
        return nestedClassName_.get(index);
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public Builder setNestedClassName(
          int index, int value) {
        ensureNestedClassNameIsMutable();
        nestedClassName_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public Builder addNestedClassName(int value) {
        ensureNestedClassNameIsMutable();
        nestedClassName_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public Builder addAllNestedClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNestedClassNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, nestedClassName_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [packed = true];</code>
       */
      public Builder clearNestedClassName() {
        nestedClassName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> constructor_ =
        java.util.Collections.emptyList();
      private void ensureConstructorIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          constructor_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor>(constructor_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder> constructorBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> getConstructorList() {
        if (constructorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(constructor_);
        } else {
          return constructorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public int getConstructorCount() {
        if (constructorBuilder_ == null) {
          return constructor_.size();
        } else {
          return constructorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor getConstructor(int index) {
        if (constructorBuilder_ == null) {
          return constructor_.get(index);
        } else {
          return constructorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.set(index, value);
          onChanged();
        } else {
          constructorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.set(index, builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.add(value);
          onChanged();
        } else {
          constructorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.add(index, value);
          onChanged();
        } else {
          constructorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.add(builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.add(index, builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addAllConstructor(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor> values) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, constructor_);
          onChanged();
        } else {
          constructorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder clearConstructor() {
        if (constructorBuilder_ == null) {
          constructor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          constructorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder removeConstructor(int index) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.remove(index);
          onChanged();
        } else {
          constructorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder getConstructorBuilder(
          int index) {
        return getConstructorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
          int index) {
        if (constructorBuilder_ == null) {
          return constructor_.get(index);  } else {
          return constructorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder> 
           getConstructorOrBuilderList() {
        if (constructorBuilder_ != null) {
          return constructorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(constructor_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder addConstructorBuilder() {
        return getConstructorFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder addConstructorBuilder(
          int index) {
        return getConstructorFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder> 
           getConstructorBuilderList() {
        return getConstructorFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder> 
          getConstructorFieldBuilder() {
        if (constructorBuilder_ == null) {
          constructorBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder>(
                  constructor_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          constructor_ = null;
        }
        return constructorBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> function_ =
        java.util.Collections.emptyList();
      private void ensureFunctionIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function>(function_);
          bitField0_ |= 0x00000100;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> functionBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> getFunctionList() {
        if (functionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(function_);
        } else {
          return functionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public int getFunctionCount() {
        if (functionBuilder_ == null) {
          return function_.size();
        } else {
          return functionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);
        } else {
          return functionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.set(index, value);
          onChanged();
        } else {
          functionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(value);
          onChanged();
        } else {
          functionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(index, value);
          onChanged();
        } else {
          functionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> values) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, function_);
          onChanged();
        } else {
          functionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder removeFunction(int index) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.remove(index);
          onChanged();
        } else {
          functionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder getFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
          int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);  } else {
          return functionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
           getFunctionOrBuilderList() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(function_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder addFunctionBuilder() {
        return getFunctionFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder addFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder> 
           getFunctionBuilderList() {
        return getFunctionFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder>(
                  function_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> property_ =
        java.util.Collections.emptyList();
      private void ensurePropertyIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property>(property_);
          bitField0_ |= 0x00000200;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> propertyBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> getPropertyList() {
        if (propertyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(property_);
        } else {
          return propertyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public int getPropertyCount() {
        if (propertyBuilder_ == null) {
          return property_.size();
        } else {
          return propertyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);
        } else {
          return propertyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.set(index, value);
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(index, value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> values) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, property_);
          onChanged();
        } else {
          propertyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder clearProperty() {
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          propertyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder removeProperty(int index) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.remove(index);
          onChanged();
        } else {
          propertyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder getPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
          int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);  } else {
          return propertyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
           getPropertyOrBuilderList() {
        if (propertyBuilder_ != null) {
          return propertyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(property_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder addPropertyBuilder() {
        return getPropertyFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder addPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder> 
           getPropertyBuilderList() {
        return getPropertyFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
          getPropertyFieldBuilder() {
        if (propertyBuilder_ == null) {
          propertyBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder>(
                  property_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          property_ = null;
        }
        return propertyBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> typeAlias_ =
        java.util.Collections.emptyList();
      private void ensureTypeAliasIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias>(typeAlias_);
          bitField0_ |= 0x00000400;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> typeAliasBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> getTypeAliasList() {
        if (typeAliasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeAlias_);
        } else {
          return typeAliasBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public int getTypeAliasCount() {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.size();
        } else {
          return typeAliasBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);
        } else {
          return typeAliasBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> values) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeAlias_);
          onChanged();
        } else {
          typeAliasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder clearTypeAlias() {
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          typeAliasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder removeTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.remove(index);
          onChanged();
        } else {
          typeAliasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder getTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
          int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);  } else {
          return typeAliasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
           getTypeAliasOrBuilderList() {
        if (typeAliasBuilder_ != null) {
          return typeAliasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeAlias_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder addTypeAliasBuilder() {
        return getTypeAliasFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder addTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder> 
           getTypeAliasBuilderList() {
        return getTypeAliasFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
          getTypeAliasFieldBuilder() {
        if (typeAliasBuilder_ == null) {
          typeAliasBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder>(
                  typeAlias_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          typeAlias_ = null;
        }
        return typeAliasBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> enumEntry_ =
        java.util.Collections.emptyList();
      private void ensureEnumEntryIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          enumEntry_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry>(enumEntry_);
          bitField0_ |= 0x00000800;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder> enumEntryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> getEnumEntryList() {
        if (enumEntryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(enumEntry_);
        } else {
          return enumEntryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public int getEnumEntryCount() {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.size();
        } else {
          return enumEntryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry getEnumEntry(int index) {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.get(index);
        } else {
          return enumEntryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.set(index, value);
          onChanged();
        } else {
          enumEntryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.set(index, builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.add(value);
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.add(index, value);
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.add(builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.add(index, builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addAllEnumEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry> values) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, enumEntry_);
          onChanged();
        } else {
          enumEntryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder clearEnumEntry() {
        if (enumEntryBuilder_ == null) {
          enumEntry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          enumEntryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder removeEnumEntry(int index) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.remove(index);
          onChanged();
        } else {
          enumEntryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder getEnumEntryBuilder(
          int index) {
        return getEnumEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
          int index) {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.get(index);  } else {
          return enumEntryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder> 
           getEnumEntryOrBuilderList() {
        if (enumEntryBuilder_ != null) {
          return enumEntryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(enumEntry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder addEnumEntryBuilder() {
        return getEnumEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder addEnumEntryBuilder(
          int index) {
        return getEnumEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder> 
           getEnumEntryBuilderList() {
        return getEnumEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder> 
          getEnumEntryFieldBuilder() {
        if (enumEntryBuilder_ == null) {
          enumEntryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder>(
                  enumEntry_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          enumEntry_ = null;
        }
        return enumEntryBuilder_;
      }

      private java.util.List<java.lang.Integer> sealedSubclassFqName_ = java.util.Collections.emptyList();
      private void ensureSealedSubclassFqNameIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          sealedSubclassFqName_ = new java.util.ArrayList<java.lang.Integer>(sealedSubclassFqName_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getSealedSubclassFqNameList() {
        return java.util.Collections.unmodifiableList(sealedSubclassFqName_);
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public int getSealedSubclassFqNameCount() {
        return sealedSubclassFqName_.size();
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public int getSealedSubclassFqName(int index) {
        return sealedSubclassFqName_.get(index);
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public Builder setSealedSubclassFqName(
          int index, int value) {
        ensureSealedSubclassFqNameIsMutable();
        sealedSubclassFqName_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public Builder addSealedSubclassFqName(int value) {
        ensureSealedSubclassFqNameIsMutable();
        sealedSubclassFqName_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public Builder addAllSealedSubclassFqName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSealedSubclassFqNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, sealedSubclassFqName_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [packed = true];</code>
       */
      public Builder clearSealedSubclassFqName() {
        sealedSubclassFqName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
          onChanged();
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
          onChanged();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              typeTable_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance()) {
            typeTable_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
          } else {
            typeTable_ = value;
          }
          onChanged();
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
          onChanged();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private int versionRequirement_ ;
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public boolean hasVersionRequirement() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public int getVersionRequirement() {
        return versionRequirement_;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder setVersionRequirement(int value) {
        bitField0_ |= 0x00004000;
        versionRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder clearVersionRequirement() {
        bitField0_ = (bitField0_ & ~0x00004000);
        versionRequirement_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder> versionRequirementTableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public boolean hasVersionRequirementTable() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          return versionRequirementTable_;
        } else {
          return versionRequirementTableBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          versionRequirementTable_ = value;
          onChanged();
        } else {
          versionRequirementTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder builderForValue) {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = builderForValue.build();
          onChanged();
        } else {
          versionRequirementTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              versionRequirementTable_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance()) {
            versionRequirementTable_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.newBuilder(versionRequirementTable_).mergeFrom(value).buildPartial();
          } else {
            versionRequirementTable_ = value;
          }
          onChanged();
        } else {
          versionRequirementTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
          onChanged();
        } else {
          versionRequirementTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder getVersionRequirementTableBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getVersionRequirementTableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
        if (versionRequirementTableBuilder_ != null) {
          return versionRequirementTableBuilder_.getMessageOrBuilder();
        } else {
          return versionRequirementTable_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder> 
          getVersionRequirementTableFieldBuilder() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder>(
                  getVersionRequirementTable(),
                  getParentForChildren(),
                  isClean());
          versionRequirementTable_ = null;
        }
        return versionRequirementTableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Class)
    }

    static {
      defaultInstance = new Class(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Class)
  }

  public interface PackageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Package)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Package> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    int getFunctionCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    int getPropertyCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    int getTypeAliasCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    boolean hasTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
   */
  public static final class Package extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Package> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Package)
      PackageOrBuilder {
    // Use Package.newBuilder() to construct.
    private Package(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Package, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Package(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Package defaultInstance;
    public static Package getDefaultInstance() {
      return defaultInstance;
    }

    public Package getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Package(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function>();
                mutable_bitField0_ |= 0x00000001;
              }
              function_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property>();
                mutable_bitField0_ |= 0x00000002;
              }
              property_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias>();
                mutable_bitField0_ |= 0x00000004;
              }
              typeAlias_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.PARSER, extensionRegistry));
              break;
            }
            case 242: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = typeTable_.toBuilder();
              }
              typeTable_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeTable_);
                typeTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 258: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = versionRequirementTable_.toBuilder();
              }
              versionRequirementTable_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(versionRequirementTable_);
                versionRequirementTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          function_ = java.util.Collections.unmodifiableList(function_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          property_ = java.util.Collections.unmodifiableList(property_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Package> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Package>() {
      public Package parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Package(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Package> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FUNCTION_FIELD_NUMBER = 3;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 5;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
      return typeTable_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_;
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
      return versionRequirementTable_;
    }

    private void initFields() {
      function_ = java.util.Collections.emptyList();
      property_ = java.util.Collections.emptyList();
      typeAlias_ = java.util.Collections.emptyList();
      typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFunctionCount(); i++) {
        if (!getFunction(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPropertyCount(); i++) {
        if (!getProperty(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeAliasCount(); i++) {
        if (!getTypeAlias(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Package>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      for (int i = 0; i < function_.size(); i++) {
        output.writeMessage(3, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        output.writeMessage(4, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        output.writeMessage(5, typeAlias_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(30, typeTable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(32, versionRequirementTable_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < function_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, typeAlias_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, typeTable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, versionRequirementTable_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Package prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Package, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Package)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFunctionFieldBuilder();
          getPropertyFieldBuilder();
          getTypeAliasFieldBuilder();
          getTypeTableFieldBuilder();
          getVersionRequirementTableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          functionBuilder_.clear();
        }
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          propertyBuilder_.clear();
        }
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          typeAliasBuilder_.clear();
        }
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
        } else {
          versionRequirementTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Package result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Package result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Package(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (functionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            function_ = java.util.Collections.unmodifiableList(function_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
        if (propertyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            property_ = java.util.Collections.unmodifiableList(property_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.property_ = property_;
        } else {
          result.property_ = propertyBuilder_.build();
        }
        if (typeAliasBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.typeAlias_ = typeAlias_;
        } else {
          result.typeAlias_ = typeAliasBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000001;
        }
        if (typeTableBuilder_ == null) {
          result.typeTable_ = typeTable_;
        } else {
          result.typeTable_ = typeTableBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        if (versionRequirementTableBuilder_ == null) {
          result.versionRequirementTable_ = versionRequirementTable_;
        } else {
          result.versionRequirementTable_ = versionRequirementTableBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Package) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Package)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Package other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance()) return this;
        if (functionBuilder_ == null) {
          if (!other.function_.isEmpty()) {
            if (function_.isEmpty()) {
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFunctionIsMutable();
              function_.addAll(other.function_);
            }
            onChanged();
          }
        } else {
          if (!other.function_.isEmpty()) {
            if (functionBuilder_.isEmpty()) {
              functionBuilder_.dispose();
              functionBuilder_ = null;
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000001);
              functionBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFunctionFieldBuilder() : null;
            } else {
              functionBuilder_.addAllMessages(other.function_);
            }
          }
        }
        if (propertyBuilder_ == null) {
          if (!other.property_.isEmpty()) {
            if (property_.isEmpty()) {
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePropertyIsMutable();
              property_.addAll(other.property_);
            }
            onChanged();
          }
        } else {
          if (!other.property_.isEmpty()) {
            if (propertyBuilder_.isEmpty()) {
              propertyBuilder_.dispose();
              propertyBuilder_ = null;
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000002);
              propertyBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertyFieldBuilder() : null;
            } else {
              propertyBuilder_.addAllMessages(other.property_);
            }
          }
        }
        if (typeAliasBuilder_ == null) {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAlias_.isEmpty()) {
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTypeAliasIsMutable();
              typeAlias_.addAll(other.typeAlias_);
            }
            onChanged();
          }
        } else {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAliasBuilder_.isEmpty()) {
              typeAliasBuilder_.dispose();
              typeAliasBuilder_ = null;
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000004);
              typeAliasBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeAliasFieldBuilder() : null;
            } else {
              typeAliasBuilder_.addAllMessages(other.typeAlias_);
            }
          }
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (other.hasVersionRequirementTable()) {
          mergeVersionRequirementTable(other.getVersionRequirementTable());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getFunctionCount(); i++) {
          if (!getFunction(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getPropertyCount(); i++) {
          if (!getProperty(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTypeAliasCount(); i++) {
          if (!getTypeAlias(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Package parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Package) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> function_ =
        java.util.Collections.emptyList();
      private void ensureFunctionIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function>(function_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> functionBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> getFunctionList() {
        if (functionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(function_);
        } else {
          return functionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public int getFunctionCount() {
        if (functionBuilder_ == null) {
          return function_.size();
        } else {
          return functionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getFunction(int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);
        } else {
          return functionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.set(index, value);
          onChanged();
        } else {
          functionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(value);
          onChanged();
        } else {
          functionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(index, value);
          onChanged();
        } else {
          functionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Function> values) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, function_);
          onChanged();
        } else {
          functionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder removeFunction(int index) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.remove(index);
          onChanged();
        } else {
          functionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder getFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
          int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);  } else {
          return functionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
           getFunctionOrBuilderList() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(function_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder addFunctionBuilder() {
        return getFunctionFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder addFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder> 
           getFunctionBuilderList() {
        return getFunctionFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder>(
                  function_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> property_ =
        java.util.Collections.emptyList();
      private void ensurePropertyIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property>(property_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> propertyBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> getPropertyList() {
        if (propertyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(property_);
        } else {
          return propertyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public int getPropertyCount() {
        if (propertyBuilder_ == null) {
          return property_.size();
        } else {
          return propertyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getProperty(int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);
        } else {
          return propertyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.set(index, value);
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(index, value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Property> values) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, property_);
          onChanged();
        } else {
          propertyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder clearProperty() {
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          propertyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder removeProperty(int index) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.remove(index);
          onChanged();
        } else {
          propertyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder getPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
          int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);  } else {
          return propertyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
           getPropertyOrBuilderList() {
        if (propertyBuilder_ != null) {
          return propertyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(property_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder addPropertyBuilder() {
        return getPropertyFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder addPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder> 
           getPropertyBuilderList() {
        return getPropertyFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder> 
          getPropertyFieldBuilder() {
        if (propertyBuilder_ == null) {
          propertyBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder>(
                  property_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          property_ = null;
        }
        return propertyBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> typeAlias_ =
        java.util.Collections.emptyList();
      private void ensureTypeAliasIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias>(typeAlias_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> typeAliasBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> getTypeAliasList() {
        if (typeAliasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeAlias_);
        } else {
          return typeAliasBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public int getTypeAliasCount() {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.size();
        } else {
          return typeAliasBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);
        } else {
          return typeAliasBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias> values) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeAlias_);
          onChanged();
        } else {
          typeAliasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder clearTypeAlias() {
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          typeAliasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder removeTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.remove(index);
          onChanged();
        } else {
          typeAliasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder getTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
          int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);  } else {
          return typeAliasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
           getTypeAliasOrBuilderList() {
        if (typeAliasBuilder_ != null) {
          return typeAliasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeAlias_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder addTypeAliasBuilder() {
        return getTypeAliasFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder addTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder> 
           getTypeAliasBuilderList() {
        return getTypeAliasFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder> 
          getTypeAliasFieldBuilder() {
        if (typeAliasBuilder_ == null) {
          typeAliasBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder>(
                  typeAlias_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          typeAlias_ = null;
        }
        return typeAliasBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
          onChanged();
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
          onChanged();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              typeTable_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance()) {
            typeTable_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
          } else {
            typeTable_ = value;
          }
          onChanged();
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
          onChanged();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder> versionRequirementTableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public boolean hasVersionRequirementTable() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          return versionRequirementTable_;
        } else {
          return versionRequirementTableBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          versionRequirementTable_ = value;
          onChanged();
        } else {
          versionRequirementTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder builderForValue) {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = builderForValue.build();
          onChanged();
        } else {
          versionRequirementTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              versionRequirementTable_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance()) {
            versionRequirementTable_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.newBuilder(versionRequirementTable_).mergeFrom(value).buildPartial();
          } else {
            versionRequirementTable_ = value;
          }
          onChanged();
        } else {
          versionRequirementTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
          onChanged();
        } else {
          versionRequirementTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder getVersionRequirementTableBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getVersionRequirementTableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
        if (versionRequirementTableBuilder_ != null) {
          return versionRequirementTableBuilder_.getMessageOrBuilder();
        } else {
          return versionRequirementTable_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder> 
          getVersionRequirementTableFieldBuilder() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder>(
                  getVersionRequirementTable(),
                  getParentForChildren(),
                  isClean());
          versionRequirementTable_ = null;
        }
        return versionRequirementTableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Package)
    }

    static {
      defaultInstance = new Package(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Package)
  }

  public interface TypeTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> 
        getTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    int getTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder(
        int index);

    /**
     * <code>optional int32 first_nullable = 2 [default = -1];</code>
     *
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     */
    boolean hasFirstNullable();
    /**
     * <code>optional int32 first_nullable = 2 [default = -1];</code>
     *
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     */
    int getFirstNullable();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
   */
  public static final class TypeTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeTable)
      TypeTableOrBuilder {
    // Use TypeTable.newBuilder() to construct.
    private TypeTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TypeTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TypeTable defaultInstance;
    public static TypeTable getDefaultInstance() {
      return defaultInstance;
    }

    public TypeTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TypeTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                type_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>();
                mutable_bitField0_ |= 0x00000001;
              }
              type_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              firstNullable_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          type_ = java.util.Collections.unmodifiableList(type_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<TypeTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<TypeTable>() {
      public TypeTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new TypeTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeTable> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> type_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
        getTypeOrBuilderList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType(int index) {
      return type_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder(
        int index) {
      return type_.get(index);
    }

    public static final int FIRST_NULLABLE_FIELD_NUMBER = 2;
    private int firstNullable_;
    /**
     * <code>optional int32 first_nullable = 2 [default = -1];</code>
     *
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     */
    public boolean hasFirstNullable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 first_nullable = 2 [default = -1];</code>
     *
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     */
    public int getFirstNullable() {
      return firstNullable_;
    }

    private void initFields() {
      type_ = java.util.Collections.emptyList();
      firstNullable_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTypeCount(); i++) {
        if (!getType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < type_.size(); i++) {
        output.writeMessage(1, type_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, firstNullable_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < type_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, type_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, firstNullable_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeTable)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          typeBuilder_.clear();
        }
        firstNullable_ = -1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            type_ = java.util.Collections.unmodifiableList(type_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.firstNullable_ = firstNullable_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance()) return this;
        if (typeBuilder_ == null) {
          if (!other.type_.isEmpty()) {
            if (type_.isEmpty()) {
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypeIsMutable();
              type_.addAll(other.type_);
            }
            onChanged();
          }
        } else {
          if (!other.type_.isEmpty()) {
            if (typeBuilder_.isEmpty()) {
              typeBuilder_.dispose();
              typeBuilder_ = null;
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeFieldBuilder() : null;
            } else {
              typeBuilder_.addAllMessages(other.type_);
            }
          }
        }
        if (other.hasFirstNullable()) {
          setFirstNullable(other.getFirstNullable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTypeCount(); i++) {
          if (!getType(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> type_ =
        java.util.Collections.emptyList();
      private void ensureTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          type_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type>(type_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> typeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> getTypeList() {
        if (typeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(type_);
        } else {
          return typeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public int getTypeCount() {
        if (typeBuilder_ == null) {
          return type_.size();
        } else {
          return typeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType(int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);
        } else {
          return typeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.set(index, value);
          onChanged();
        } else {
          typeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(value);
          onChanged();
        } else {
          typeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(index, value);
          onChanged();
        } else {
          typeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Type> values) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, type_);
          onChanged();
        } else {
          typeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder removeType(int index) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.remove(index);
          onChanged();
        } else {
          typeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getTypeBuilder(
          int index) {
        return getTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder(
          int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);  } else {
          return typeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
           getTypeOrBuilderList() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(type_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addTypeBuilder() {
        return getTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder addTypeBuilder(
          int index) {
        return getTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder> 
           getTypeBuilderList() {
        return getTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  type_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private int firstNullable_ = -1;
      /**
       * <code>optional int32 first_nullable = 2 [default = -1];</code>
       *
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       */
      public boolean hasFirstNullable() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 first_nullable = 2 [default = -1];</code>
       *
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       */
      public int getFirstNullable() {
        return firstNullable_;
      }
      /**
       * <code>optional int32 first_nullable = 2 [default = -1];</code>
       *
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       */
      public Builder setFirstNullable(int value) {
        bitField0_ |= 0x00000002;
        firstNullable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 first_nullable = 2 [default = -1];</code>
       *
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       */
      public Builder clearFirstNullable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        firstNullable_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeTable)
    }

    static {
      defaultInstance = new TypeTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeTable)
  }

  public interface ConstructorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Constructor)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Constructor> {

    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *isSecondary
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *isSecondary
     * </pre>
     */
    int getFlags();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    int getValueParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index);

    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    boolean hasVersionRequirement();
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    int getVersionRequirement();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
   */
  public static final class Constructor extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Constructor> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Constructor)
      ConstructorOrBuilder {
    // Use Constructor.newBuilder() to construct.
    private Constructor(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Constructor(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Constructor defaultInstance;
    public static Constructor getDefaultInstance() {
      return defaultInstance;
    }

    public Constructor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Constructor(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter>();
                mutable_bitField0_ |= 0x00000002;
              }
              valueParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.PARSER, extensionRegistry));
              break;
            }
            case 248: {
              bitField0_ |= 0x00000002;
              versionRequirement_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Constructor> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Constructor>() {
      public Constructor parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Constructor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Constructor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *isSecondary
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *isSecondary
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private int versionRequirement_;
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public boolean hasVersionRequirement() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public int getVersionRequirement() {
      return versionRequirement_;
    }

    private void initFields() {
      flags_ = 6;
      valueParameter_ = java.util.Collections.emptyList();
      versionRequirement_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getValueParameterCount(); i++) {
        if (!getValueParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        output.writeMessage(2, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(31, versionRequirement_);
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(31, versionRequirement_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Constructor)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ConstructorOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getValueParameterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 6;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          valueParameterBuilder_.clear();
        }
        versionRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (valueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.valueParameter_ = valueParameter_;
        } else {
          result.valueParameter_ = valueParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.versionRequirement_ = versionRequirement_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (valueParameterBuilder_ == null) {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameter_.isEmpty()) {
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValueParameterIsMutable();
              valueParameter_.addAll(other.valueParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameterBuilder_.isEmpty()) {
              valueParameterBuilder_.dispose();
              valueParameterBuilder_ = null;
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              valueParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueParameterFieldBuilder() : null;
            } else {
              valueParameterBuilder_.addAllMessages(other.valueParameter_);
            }
          }
        }
        if (other.hasVersionRequirement()) {
          setVersionRequirement(other.getVersionRequirement());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getValueParameterCount(); i++) {
          if (!getValueParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *isSecondary
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *isSecondary
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *isSecondary
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *isSecondary
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> valueParameter_ =
        java.util.Collections.emptyList();
      private void ensureValueParameterIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter>(valueParameter_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> valueParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> getValueParameterList() {
        if (valueParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueParameter_);
        } else {
          return valueParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public int getValueParameterCount() {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.size();
        } else {
          return valueParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);
        } else {
          return valueParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.set(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> values) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueParameter_);
          onChanged();
        } else {
          valueParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder clearValueParameter() {
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          valueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder removeValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.remove(index);
          onChanged();
        } else {
          valueParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder getValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
          int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);  } else {
          return valueParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
           getValueParameterOrBuilderList() {
        if (valueParameterBuilder_ != null) {
          return valueParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder addValueParameterBuilder() {
        return getValueParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder addValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder> 
           getValueParameterBuilderList() {
        return getValueParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
          getValueParameterFieldBuilder() {
        if (valueParameterBuilder_ == null) {
          valueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder>(
                  valueParameter_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          valueParameter_ = null;
        }
        return valueParameterBuilder_;
      }

      private int versionRequirement_ ;
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public boolean hasVersionRequirement() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public int getVersionRequirement() {
        return versionRequirement_;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder setVersionRequirement(int value) {
        bitField0_ |= 0x00000004;
        versionRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder clearVersionRequirement() {
        bitField0_ = (bitField0_ & ~0x00000004);
        versionRequirement_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Constructor)
    }

    static {
      defaultInstance = new Constructor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Constructor)
  }

  public interface FunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Function)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Function> {

    /**
     * <code>optional int32 flags = 9 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isOperator
     *isInfix
     *isInline
     *isTailrec
     *isExternal
     *isSuspend
     *isExpect
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 9 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isOperator
     *isInfix
     *isInline
     *isTailrec
     *isExternal
     *isSuspend
     *isExpect
     * </pre>
     */
    int getFlags();

    /**
     * <code>optional int32 old_flags = 1 [default = 6];</code>
     */
    boolean hasOldFlags();
    /**
     * <code>optional int32 old_flags = 1 [default = 6];</code>
     */
    int getOldFlags();

    /**
     * <code>required int32 name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required int32 name = 2;</code>
     */
    int getName();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    boolean hasReturnType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder();

    /**
     * <code>optional int32 return_type_id = 7;</code>
     */
    boolean hasReturnTypeId();
    /**
     * <code>optional int32 return_type_id = 7;</code>
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    boolean hasReceiverType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder();

    /**
     * <code>optional int32 receiver_type_id = 8;</code>
     */
    boolean hasReceiverTypeId();
    /**
     * <code>optional int32 receiver_type_id = 8;</code>
     */
    int getReceiverTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    int getValueParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    boolean hasTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    boolean hasVersionRequirement();
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    int getVersionRequirement();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    boolean hasContract();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract getContract();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder getContractOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
   */
  public static final class Function extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Function> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Function)
      FunctionOrBuilder {
    // Use Function.newBuilder() to construct.
    private Function(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Function(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Function defaultInstance;
    public static Function getDefaultInstance() {
      return defaultInstance;
    }

    public Function getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Function(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              oldFlags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              name_ = input.readInt32();
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = returnType_.toBuilder();
              }
              returnType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(returnType_);
                returnType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>();
                mutable_bitField0_ |= 0x00000020;
              }
              typeParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = receiverType_.toBuilder();
              }
              receiverType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(receiverType_);
                receiverType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter>();
                mutable_bitField0_ |= 0x00000100;
              }
              valueParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              returnTypeId_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              receiverTypeId_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 242: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = typeTable_.toBuilder();
              }
              typeTable_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeTable_);
                typeTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 248: {
              bitField0_ |= 0x00000100;
              versionRequirement_ = input.readInt32();
              break;
            }
            case 258: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = contract_.toBuilder();
              }
              contract_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(contract_);
                contract_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Function> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Function>() {
      public Function parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Function(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Function> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 9;
    private int flags_;
    /**
     * <code>optional int32 flags = 9 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isOperator
     *isInfix
     *isInline
     *isTailrec
     *isExternal
     *isSuspend
     *isExpect
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 9 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isOperator
     *isInfix
     *isInline
     *isTailrec
     *isExternal
     *isSuspend
     *isExpect
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_;
    /**
     * <code>optional int32 old_flags = 1 [default = 6];</code>
     */
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 old_flags = 1 [default = 6];</code>
     */
    public int getOldFlags() {
      return oldFlags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type returnType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType() {
      return returnType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
      return returnType_;
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 7;
    private int returnTypeId_;
    /**
     * <code>optional int32 return_type_id = 7;</code>
     */
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 return_type_id = 7;</code>
     */
    public int getReturnTypeId() {
      return returnTypeId_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type receiverType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType() {
      return receiverType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
      return receiverType_;
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 8;
    private int receiverTypeId_;
    /**
     * <code>optional int32 receiver_type_id = 8;</code>
     */
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 receiver_type_id = 8;</code>
     */
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 6;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
      return typeTable_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private int versionRequirement_;
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public boolean hasVersionRequirement() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public int getVersionRequirement() {
      return versionRequirement_;
    }

    public static final int CONTRACT_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract contract_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    public boolean hasContract() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract getContract() {
      return contract_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder getContractOrBuilder() {
      return contract_;
    }

    private void initFields() {
      flags_ = 6;
      oldFlags_ = 6;
      name_ = 0;
      returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      returnTypeId_ = 0;
      typeParameter_ = java.util.Collections.emptyList();
      receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      receiverTypeId_ = 0;
      valueParameter_ = java.util.Collections.emptyList();
      typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      versionRequirement_ = 0;
      contract_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasReturnType()) {
        if (!getReturnType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReceiverType()) {
        if (!getReceiverType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getValueParameterCount(); i++) {
        if (!getValueParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasContract()) {
        if (!getContract().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Function>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(3, returnType_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(5, receiverType_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        output.writeMessage(6, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(9, flags_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(30, typeTable_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(31, versionRequirement_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(32, contract_);
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, returnType_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, receiverType_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, flags_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, typeTable_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(31, versionRequirement_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, contract_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Function, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Function)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.FunctionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReturnTypeFieldBuilder();
          getTypeParameterFieldBuilder();
          getReceiverTypeFieldBuilder();
          getValueParameterFieldBuilder();
          getTypeTableFieldBuilder();
          getContractFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 6;
        bitField0_ = (bitField0_ & ~0x00000001);
        oldFlags_ = 6;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        returnTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          typeParameterBuilder_.clear();
        }
        if (receiverTypeBuilder_ == null) {
          receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          receiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        receiverTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          valueParameterBuilder_.clear();
        }
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        versionRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (contractBuilder_ == null) {
          contract_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance();
        } else {
          contractBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Function result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Function buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Function result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Function(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.oldFlags_ = oldFlags_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (returnTypeBuilder_ == null) {
          result.returnType_ = returnType_;
        } else {
          result.returnType_ = returnTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.returnTypeId_ = returnTypeId_;
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        if (receiverTypeBuilder_ == null) {
          result.receiverType_ = receiverType_;
        } else {
          result.receiverType_ = receiverTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.receiverTypeId_ = receiverTypeId_;
        if (valueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.valueParameter_ = valueParameter_;
        } else {
          result.valueParameter_ = valueParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        if (typeTableBuilder_ == null) {
          result.typeTable_ = typeTable_;
        } else {
          result.typeTable_ = typeTableBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.versionRequirement_ = versionRequirement_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        if (contractBuilder_ == null) {
          result.contract_ = contract_;
        } else {
          result.contract_ = contractBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Function) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Function)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Function other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Function.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasOldFlags()) {
          setOldFlags(other.getOldFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReturnType()) {
          mergeReturnType(other.getReturnType());
        }
        if (other.hasReturnTypeId()) {
          setReturnTypeId(other.getReturnTypeId());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasReceiverType()) {
          mergeReceiverType(other.getReceiverType());
        }
        if (other.hasReceiverTypeId()) {
          setReceiverTypeId(other.getReceiverTypeId());
        }
        if (valueParameterBuilder_ == null) {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameter_.isEmpty()) {
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureValueParameterIsMutable();
              valueParameter_.addAll(other.valueParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameterBuilder_.isEmpty()) {
              valueParameterBuilder_.dispose();
              valueParameterBuilder_ = null;
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000100);
              valueParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueParameterFieldBuilder() : null;
            } else {
              valueParameterBuilder_.addAllMessages(other.valueParameter_);
            }
          }
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (other.hasVersionRequirement()) {
          setVersionRequirement(other.getVersionRequirement());
        }
        if (other.hasContract()) {
          mergeContract(other.getContract());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (hasReturnType()) {
          if (!getReturnType().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasReceiverType()) {
          if (!getReceiverType().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getValueParameterCount(); i++) {
          if (!getValueParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            
            return false;
          }
        }
        if (hasContract()) {
          if (!getContract().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Function parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Function) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <code>optional int32 flags = 9 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isOperator
       *isInfix
       *isInline
       *isTailrec
       *isExternal
       *isSuspend
       *isExpect
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 9 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isOperator
       *isInfix
       *isInline
       *isTailrec
       *isExternal
       *isSuspend
       *isExpect
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 9 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isOperator
       *isInfix
       *isInline
       *isTailrec
       *isExternal
       *isSuspend
       *isExpect
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 9 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isOperator
       *isInfix
       *isInline
       *isTailrec
       *isExternal
       *isSuspend
       *isExpect
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int oldFlags_ = 6;
      /**
       * <code>optional int32 old_flags = 1 [default = 6];</code>
       */
      public boolean hasOldFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 6];</code>
       */
      public int getOldFlags() {
        return oldFlags_;
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 6];</code>
       */
      public Builder setOldFlags(int value) {
        bitField0_ |= 0x00000002;
        oldFlags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 6];</code>
       */
      public Builder clearOldFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oldFlags_ = 6;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>required int32 name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> returnTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public boolean hasReturnType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType() {
        if (returnTypeBuilder_ == null) {
          return returnType_;
        } else {
          return returnTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnType_ = value;
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (returnTypeBuilder_ == null) {
          returnType_ = builderForValue.build();
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              returnType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            returnType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(returnType_).mergeFrom(value).buildPartial();
          } else {
            returnType_ = value;
          }
          onChanged();
        } else {
          returnTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getReturnTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReturnTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
        if (returnTypeBuilder_ != null) {
          return returnTypeBuilder_.getMessageOrBuilder();
        } else {
          return returnType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getReturnTypeFieldBuilder() {
        if (returnTypeBuilder_ == null) {
          returnTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getReturnType(),
                  getParentForChildren(),
                  isClean());
          returnType_ = null;
        }
        return returnTypeBuilder_;
      }

      private int returnTypeId_ ;
      /**
       * <code>optional int32 return_type_id = 7;</code>
       */
      public boolean hasReturnTypeId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 return_type_id = 7;</code>
       */
      public int getReturnTypeId() {
        return returnTypeId_;
      }
      /**
       * <code>optional int32 return_type_id = 7;</code>
       */
      public Builder setReturnTypeId(int value) {
        bitField0_ |= 0x00000010;
        returnTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 return_type_id = 7;</code>
       */
      public Builder clearReturnTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        returnTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> receiverTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public boolean hasReceiverType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType() {
        if (receiverTypeBuilder_ == null) {
          return receiverType_;
        } else {
          return receiverTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiverType_ = value;
          onChanged();
        } else {
          receiverTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = builderForValue.build();
          onChanged();
        } else {
          receiverTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              receiverType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            receiverType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(receiverType_).mergeFrom(value).buildPartial();
          } else {
            receiverType_ = value;
          }
          onChanged();
        } else {
          receiverTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          receiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getReceiverTypeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getReceiverTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
        if (receiverTypeBuilder_ != null) {
          return receiverTypeBuilder_.getMessageOrBuilder();
        } else {
          return receiverType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getReceiverTypeFieldBuilder() {
        if (receiverTypeBuilder_ == null) {
          receiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getReceiverType(),
                  getParentForChildren(),
                  isClean());
          receiverType_ = null;
        }
        return receiverTypeBuilder_;
      }

      private int receiverTypeId_ ;
      /**
       * <code>optional int32 receiver_type_id = 8;</code>
       */
      public boolean hasReceiverTypeId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 receiver_type_id = 8;</code>
       */
      public int getReceiverTypeId() {
        return receiverTypeId_;
      }
      /**
       * <code>optional int32 receiver_type_id = 8;</code>
       */
      public Builder setReceiverTypeId(int value) {
        bitField0_ |= 0x00000080;
        receiverTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 receiver_type_id = 8;</code>
       */
      public Builder clearReceiverTypeId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        receiverTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> valueParameter_ =
        java.util.Collections.emptyList();
      private void ensureValueParameterIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter>(valueParameter_);
          bitField0_ |= 0x00000100;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> valueParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> getValueParameterList() {
        if (valueParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueParameter_);
        } else {
          return valueParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public int getValueParameterCount() {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.size();
        } else {
          return valueParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);
        } else {
          return valueParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.set(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter> values) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueParameter_);
          onChanged();
        } else {
          valueParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder clearValueParameter() {
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          valueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder removeValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.remove(index);
          onChanged();
        } else {
          valueParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder getValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
          int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);  } else {
          return valueParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
           getValueParameterOrBuilderList() {
        if (valueParameterBuilder_ != null) {
          return valueParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder addValueParameterBuilder() {
        return getValueParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder addValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder> 
           getValueParameterBuilderList() {
        return getValueParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
          getValueParameterFieldBuilder() {
        if (valueParameterBuilder_ == null) {
          valueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder>(
                  valueParameter_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          valueParameter_ = null;
        }
        return valueParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
          onChanged();
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
          onChanged();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              typeTable_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance()) {
            typeTable_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
          } else {
            typeTable_ = value;
          }
          onChanged();
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        if (typeTableBuilder_ == null) {
          typeTable_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.getDefaultInstance();
          onChanged();
        } else {
          typeTableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private int versionRequirement_ ;
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public boolean hasVersionRequirement() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public int getVersionRequirement() {
        return versionRequirement_;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder setVersionRequirement(int value) {
        bitField0_ |= 0x00000400;
        versionRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder clearVersionRequirement() {
        bitField0_ = (bitField0_ & ~0x00000400);
        versionRequirement_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract contract_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract, org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder> contractBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public boolean hasContract() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract getContract() {
        if (contractBuilder_ == null) {
          return contract_;
        } else {
          return contractBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract value) {
        if (contractBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          contract_ = value;
          onChanged();
        } else {
          contractBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder builderForValue) {
        if (contractBuilder_ == null) {
          contract_ = builderForValue.build();
          onChanged();
        } else {
          contractBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder mergeContract(org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract value) {
        if (contractBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              contract_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance()) {
            contract_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.newBuilder(contract_).mergeFrom(value).buildPartial();
          } else {
            contract_ = value;
          }
          onChanged();
        } else {
          contractBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder clearContract() {
        if (contractBuilder_ == null) {
          contract_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance();
          onChanged();
        } else {
          contractBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder getContractBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getContractFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder getContractOrBuilder() {
        if (contractBuilder_ != null) {
          return contractBuilder_.getMessageOrBuilder();
        } else {
          return contract_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract, org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder> 
          getContractFieldBuilder() {
        if (contractBuilder_ == null) {
          contractBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract, org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder>(
                  getContract(),
                  getParentForChildren(),
                  isClean());
          contract_ = null;
        }
        return contractBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Function)
    }

    static {
      defaultInstance = new Function(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Function)
  }

  public interface PropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Property)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Property> {

    /**
     * <code>optional int32 flags = 11 [default = 518];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isVar
     *hasGetter
     *hasSetter
     *isConst
     *isLateinit
     *hasConstant
     *isExternal
     *isDelegated
     *isExpect
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 11 [default = 518];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isVar
     *hasGetter
     *hasSetter
     *isConst
     *isLateinit
     *hasConstant
     *isExternal
     *isDelegated
     *isExpect
     * </pre>
     */
    int getFlags();

    /**
     * <code>optional int32 old_flags = 1 [default = 2054];</code>
     */
    boolean hasOldFlags();
    /**
     * <code>optional int32 old_flags = 1 [default = 2054];</code>
     */
    int getOldFlags();

    /**
     * <code>required int32 name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required int32 name = 2;</code>
     */
    int getName();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    boolean hasReturnType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder();

    /**
     * <code>optional int32 return_type_id = 9;</code>
     */
    boolean hasReturnTypeId();
    /**
     * <code>optional int32 return_type_id = 9;</code>
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    boolean hasReceiverType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder();

    /**
     * <code>optional int32 receiver_type_id = 10;</code>
     */
    boolean hasReceiverTypeId();
    /**
     * <code>optional int32 receiver_type_id = 10;</code>
     */
    int getReceiverTypeId();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    boolean hasSetterValueParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getSetterValueParameter();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder();

    /**
     * <code>optional int32 getter_flags = 7;</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *isNotDefault
     *isExternal
     *isInline
     *If getter_flags or setter_flags are absent, their value should be computed as follows:
     *- hasAnnotations, Visibility, Modality have the same value as in the property flags
     *- all other flags are false
     * </pre>
     */
    boolean hasGetterFlags();
    /**
     * <code>optional int32 getter_flags = 7;</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *isNotDefault
     *isExternal
     *isInline
     *If getter_flags or setter_flags are absent, their value should be computed as follows:
     *- hasAnnotations, Visibility, Modality have the same value as in the property flags
     *- all other flags are false
     * </pre>
     */
    int getGetterFlags();

    /**
     * <code>optional int32 setter_flags = 8;</code>
     */
    boolean hasSetterFlags();
    /**
     * <code>optional int32 setter_flags = 8;</code>
     */
    int getSetterFlags();

    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    boolean hasVersionRequirement();
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    int getVersionRequirement();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
   */
  public static final class Property extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Property> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Property)
      PropertyOrBuilder {
    // Use Property.newBuilder() to construct.
    private Property(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Property(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Property defaultInstance;
    public static Property getDefaultInstance() {
      return defaultInstance;
    }

    public Property getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Property(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              oldFlags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              name_ = input.readInt32();
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = returnType_.toBuilder();
              }
              returnType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(returnType_);
                returnType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>();
                mutable_bitField0_ |= 0x00000020;
              }
              typeParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = receiverType_.toBuilder();
              }
              receiverType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(receiverType_);
                receiverType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = setterValueParameter_.toBuilder();
              }
              setterValueParameter_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setterValueParameter_);
                setterValueParameter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000100;
              getterFlags_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000200;
              setterFlags_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              returnTypeId_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000040;
              receiverTypeId_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00000400;
              versionRequirement_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Property> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Property>() {
      public Property parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Property(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Property> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 11;
    private int flags_;
    /**
     * <code>optional int32 flags = 11 [default = 518];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isVar
     *hasGetter
     *hasSetter
     *isConst
     *isLateinit
     *hasConstant
     *isExternal
     *isDelegated
     *isExpect
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 11 [default = 518];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *MemberKind
     *isVar
     *hasGetter
     *hasSetter
     *isConst
     *isLateinit
     *hasConstant
     *isExternal
     *isDelegated
     *isExpect
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_;
    /**
     * <code>optional int32 old_flags = 1 [default = 2054];</code>
     */
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 old_flags = 1 [default = 2054];</code>
     */
    public int getOldFlags() {
      return oldFlags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type returnType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType() {
      return returnType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
      return returnType_;
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 9;
    private int returnTypeId_;
    /**
     * <code>optional int32 return_type_id = 9;</code>
     */
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 return_type_id = 9;</code>
     */
    public int getReturnTypeId() {
      return returnTypeId_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type receiverType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType() {
      return receiverType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
      return receiverType_;
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 10;
    private int receiverTypeId_;
    /**
     * <code>optional int32 receiver_type_id = 10;</code>
     */
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 receiver_type_id = 10;</code>
     */
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }

    public static final int SETTER_VALUE_PARAMETER_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter setterValueParameter_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    public boolean hasSetterValueParameter() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getSetterValueParameter() {
      return setterValueParameter_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder() {
      return setterValueParameter_;
    }

    public static final int GETTER_FLAGS_FIELD_NUMBER = 7;
    private int getterFlags_;
    /**
     * <code>optional int32 getter_flags = 7;</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *isNotDefault
     *isExternal
     *isInline
     *If getter_flags or setter_flags are absent, their value should be computed as follows:
     *- hasAnnotations, Visibility, Modality have the same value as in the property flags
     *- all other flags are false
     * </pre>
     */
    public boolean hasGetterFlags() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 getter_flags = 7;</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     *Modality
     *isNotDefault
     *isExternal
     *isInline
     *If getter_flags or setter_flags are absent, their value should be computed as follows:
     *- hasAnnotations, Visibility, Modality have the same value as in the property flags
     *- all other flags are false
     * </pre>
     */
    public int getGetterFlags() {
      return getterFlags_;
    }

    public static final int SETTER_FLAGS_FIELD_NUMBER = 8;
    private int setterFlags_;
    /**
     * <code>optional int32 setter_flags = 8;</code>
     */
    public boolean hasSetterFlags() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 setter_flags = 8;</code>
     */
    public int getSetterFlags() {
      return setterFlags_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private int versionRequirement_;
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public boolean hasVersionRequirement() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public int getVersionRequirement() {
      return versionRequirement_;
    }

    private void initFields() {
      flags_ = 518;
      oldFlags_ = 2054;
      name_ = 0;
      returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      returnTypeId_ = 0;
      typeParameter_ = java.util.Collections.emptyList();
      receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      receiverTypeId_ = 0;
      setterValueParameter_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance();
      getterFlags_ = 0;
      setterFlags_ = 0;
      versionRequirement_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasReturnType()) {
        if (!getReturnType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReceiverType()) {
        if (!getReceiverType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetterValueParameter()) {
        if (!getSetterValueParameter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.Property>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(3, returnType_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(5, receiverType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(6, setterValueParameter_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(7, getterFlags_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(8, setterFlags_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(10, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(11, flags_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(31, versionRequirement_);
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, returnType_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, receiverType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, setterValueParameter_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, getterFlags_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, setterFlags_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(10, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(11, flags_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(31, versionRequirement_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Property, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Property)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PropertyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReturnTypeFieldBuilder();
          getTypeParameterFieldBuilder();
          getReceiverTypeFieldBuilder();
          getSetterValueParameterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 518;
        bitField0_ = (bitField0_ & ~0x00000001);
        oldFlags_ = 2054;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        returnTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          typeParameterBuilder_.clear();
        }
        if (receiverTypeBuilder_ == null) {
          receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          receiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        receiverTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (setterValueParameterBuilder_ == null) {
          setterValueParameter_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance();
        } else {
          setterValueParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        getterFlags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        setterFlags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        versionRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Property result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Property buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Property result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Property(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.oldFlags_ = oldFlags_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (returnTypeBuilder_ == null) {
          result.returnType_ = returnType_;
        } else {
          result.returnType_ = returnTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.returnTypeId_ = returnTypeId_;
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        if (receiverTypeBuilder_ == null) {
          result.receiverType_ = receiverType_;
        } else {
          result.receiverType_ = receiverTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.receiverTypeId_ = receiverTypeId_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        if (setterValueParameterBuilder_ == null) {
          result.setterValueParameter_ = setterValueParameter_;
        } else {
          result.setterValueParameter_ = setterValueParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.getterFlags_ = getterFlags_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.setterFlags_ = setterFlags_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.versionRequirement_ = versionRequirement_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Property) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Property)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Property other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Property.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasOldFlags()) {
          setOldFlags(other.getOldFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReturnType()) {
          mergeReturnType(other.getReturnType());
        }
        if (other.hasReturnTypeId()) {
          setReturnTypeId(other.getReturnTypeId());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasReceiverType()) {
          mergeReceiverType(other.getReceiverType());
        }
        if (other.hasReceiverTypeId()) {
          setReceiverTypeId(other.getReceiverTypeId());
        }
        if (other.hasSetterValueParameter()) {
          mergeSetterValueParameter(other.getSetterValueParameter());
        }
        if (other.hasGetterFlags()) {
          setGetterFlags(other.getGetterFlags());
        }
        if (other.hasSetterFlags()) {
          setSetterFlags(other.getSetterFlags());
        }
        if (other.hasVersionRequirement()) {
          setVersionRequirement(other.getVersionRequirement());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (hasReturnType()) {
          if (!getReturnType().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasReceiverType()) {
          if (!getReceiverType().isInitialized()) {
            
            return false;
          }
        }
        if (hasSetterValueParameter()) {
          if (!getSetterValueParameter().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Property parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Property) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ = 518;
      /**
       * <code>optional int32 flags = 11 [default = 518];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isVar
       *hasGetter
       *hasSetter
       *isConst
       *isLateinit
       *hasConstant
       *isExternal
       *isDelegated
       *isExpect
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 11 [default = 518];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isVar
       *hasGetter
       *hasSetter
       *isConst
       *isLateinit
       *hasConstant
       *isExternal
       *isDelegated
       *isExpect
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 11 [default = 518];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isVar
       *hasGetter
       *hasSetter
       *isConst
       *isLateinit
       *hasConstant
       *isExternal
       *isDelegated
       *isExpect
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 11 [default = 518];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *MemberKind
       *isVar
       *hasGetter
       *hasSetter
       *isConst
       *isLateinit
       *hasConstant
       *isExternal
       *isDelegated
       *isExpect
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 518;
        onChanged();
        return this;
      }

      private int oldFlags_ = 2054;
      /**
       * <code>optional int32 old_flags = 1 [default = 2054];</code>
       */
      public boolean hasOldFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 2054];</code>
       */
      public int getOldFlags() {
        return oldFlags_;
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 2054];</code>
       */
      public Builder setOldFlags(int value) {
        bitField0_ |= 0x00000002;
        oldFlags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 old_flags = 1 [default = 2054];</code>
       */
      public Builder clearOldFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oldFlags_ = 2054;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>required int32 name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> returnTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public boolean hasReturnType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReturnType() {
        if (returnTypeBuilder_ == null) {
          return returnType_;
        } else {
          return returnTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnType_ = value;
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (returnTypeBuilder_ == null) {
          returnType_ = builderForValue.build();
          onChanged();
        } else {
          returnTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              returnType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            returnType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(returnType_).mergeFrom(value).buildPartial();
          } else {
            returnType_ = value;
          }
          onChanged();
        } else {
          returnTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {
        if (returnTypeBuilder_ == null) {
          returnType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          returnTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getReturnTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReturnTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
        if (returnTypeBuilder_ != null) {
          return returnTypeBuilder_.getMessageOrBuilder();
        } else {
          return returnType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getReturnTypeFieldBuilder() {
        if (returnTypeBuilder_ == null) {
          returnTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getReturnType(),
                  getParentForChildren(),
                  isClean());
          returnType_ = null;
        }
        return returnTypeBuilder_;
      }

      private int returnTypeId_ ;
      /**
       * <code>optional int32 return_type_id = 9;</code>
       */
      public boolean hasReturnTypeId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 return_type_id = 9;</code>
       */
      public int getReturnTypeId() {
        return returnTypeId_;
      }
      /**
       * <code>optional int32 return_type_id = 9;</code>
       */
      public Builder setReturnTypeId(int value) {
        bitField0_ |= 0x00000010;
        returnTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 return_type_id = 9;</code>
       */
      public Builder clearReturnTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        returnTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> receiverTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public boolean hasReceiverType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getReceiverType() {
        if (receiverTypeBuilder_ == null) {
          return receiverType_;
        } else {
          return receiverTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiverType_ = value;
          onChanged();
        } else {
          receiverTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = builderForValue.build();
          onChanged();
        } else {
          receiverTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              receiverType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            receiverType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(receiverType_).mergeFrom(value).buildPartial();
          } else {
            receiverType_ = value;
          }
          onChanged();
        } else {
          receiverTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          receiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getReceiverTypeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getReceiverTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
        if (receiverTypeBuilder_ != null) {
          return receiverTypeBuilder_.getMessageOrBuilder();
        } else {
          return receiverType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getReceiverTypeFieldBuilder() {
        if (receiverTypeBuilder_ == null) {
          receiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getReceiverType(),
                  getParentForChildren(),
                  isClean());
          receiverType_ = null;
        }
        return receiverTypeBuilder_;
      }

      private int receiverTypeId_ ;
      /**
       * <code>optional int32 receiver_type_id = 10;</code>
       */
      public boolean hasReceiverTypeId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 receiver_type_id = 10;</code>
       */
      public int getReceiverTypeId() {
        return receiverTypeId_;
      }
      /**
       * <code>optional int32 receiver_type_id = 10;</code>
       */
      public Builder setReceiverTypeId(int value) {
        bitField0_ |= 0x00000080;
        receiverTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 receiver_type_id = 10;</code>
       */
      public Builder clearReceiverTypeId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        receiverTypeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter setterValueParameter_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> setterValueParameterBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public boolean hasSetterValueParameter() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getSetterValueParameter() {
        if (setterValueParameterBuilder_ == null) {
          return setterValueParameter_;
        } else {
          return setterValueParameterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (setterValueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setterValueParameter_ = value;
          onChanged();
        } else {
          setterValueParameterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder builderForValue) {
        if (setterValueParameterBuilder_ == null) {
          setterValueParameter_ = builderForValue.build();
          onChanged();
        } else {
          setterValueParameterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder mergeSetterValueParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter value) {
        if (setterValueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              setterValueParameter_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance()) {
            setterValueParameter_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.newBuilder(setterValueParameter_).mergeFrom(value).buildPartial();
          } else {
            setterValueParameter_ = value;
          }
          onChanged();
        } else {
          setterValueParameterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder clearSetterValueParameter() {
        if (setterValueParameterBuilder_ == null) {
          setterValueParameter_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance();
          onChanged();
        } else {
          setterValueParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder getSetterValueParameterBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getSetterValueParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder() {
        if (setterValueParameterBuilder_ != null) {
          return setterValueParameterBuilder_.getMessageOrBuilder();
        } else {
          return setterValueParameter_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder> 
          getSetterValueParameterFieldBuilder() {
        if (setterValueParameterBuilder_ == null) {
          setterValueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder>(
                  getSetterValueParameter(),
                  getParentForChildren(),
                  isClean());
          setterValueParameter_ = null;
        }
        return setterValueParameterBuilder_;
      }

      private int getterFlags_ ;
      /**
       * <code>optional int32 getter_flags = 7;</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *isNotDefault
       *isExternal
       *isInline
       *If getter_flags or setter_flags are absent, their value should be computed as follows:
       *- hasAnnotations, Visibility, Modality have the same value as in the property flags
       *- all other flags are false
       * </pre>
       */
      public boolean hasGetterFlags() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 getter_flags = 7;</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *isNotDefault
       *isExternal
       *isInline
       *If getter_flags or setter_flags are absent, their value should be computed as follows:
       *- hasAnnotations, Visibility, Modality have the same value as in the property flags
       *- all other flags are false
       * </pre>
       */
      public int getGetterFlags() {
        return getterFlags_;
      }
      /**
       * <code>optional int32 getter_flags = 7;</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *isNotDefault
       *isExternal
       *isInline
       *If getter_flags or setter_flags are absent, their value should be computed as follows:
       *- hasAnnotations, Visibility, Modality have the same value as in the property flags
       *- all other flags are false
       * </pre>
       */
      public Builder setGetterFlags(int value) {
        bitField0_ |= 0x00000200;
        getterFlags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 getter_flags = 7;</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       *Modality
       *isNotDefault
       *isExternal
       *isInline
       *If getter_flags or setter_flags are absent, their value should be computed as follows:
       *- hasAnnotations, Visibility, Modality have the same value as in the property flags
       *- all other flags are false
       * </pre>
       */
      public Builder clearGetterFlags() {
        bitField0_ = (bitField0_ & ~0x00000200);
        getterFlags_ = 0;
        onChanged();
        return this;
      }

      private int setterFlags_ ;
      /**
       * <code>optional int32 setter_flags = 8;</code>
       */
      public boolean hasSetterFlags() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 setter_flags = 8;</code>
       */
      public int getSetterFlags() {
        return setterFlags_;
      }
      /**
       * <code>optional int32 setter_flags = 8;</code>
       */
      public Builder setSetterFlags(int value) {
        bitField0_ |= 0x00000400;
        setterFlags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 setter_flags = 8;</code>
       */
      public Builder clearSetterFlags() {
        bitField0_ = (bitField0_ & ~0x00000400);
        setterFlags_ = 0;
        onChanged();
        return this;
      }

      private int versionRequirement_ ;
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public boolean hasVersionRequirement() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public int getVersionRequirement() {
        return versionRequirement_;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder setVersionRequirement(int value) {
        bitField0_ |= 0x00000800;
        versionRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder clearVersionRequirement() {
        bitField0_ = (bitField0_ & ~0x00000800);
        versionRequirement_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Property)
    }

    static {
      defaultInstance = new Property(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Property)
  }

  public interface ValueParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.ValueParameter)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<ValueParameter> {

    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *hasAnnotations
     *declaresDefault
     *isCrossinline
     *isNoinline
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *hasAnnotations
     *declaresDefault
     *isCrossinline
     *isNoinline
     * </pre>
     */
    int getFlags();

    /**
     * <code>required int32 name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required int32 name = 2;</code>
     */
    int getName();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    boolean hasType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder();

    /**
     * <code>optional int32 type_id = 5;</code>
     */
    boolean hasTypeId();
    /**
     * <code>optional int32 type_id = 5;</code>
     */
    int getTypeId();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    boolean hasVarargElementType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getVarargElementType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder();

    /**
     * <code>optional int32 vararg_element_type_id = 6;</code>
     */
    boolean hasVarargElementTypeId();
    /**
     * <code>optional int32 vararg_element_type_id = 6;</code>
     */
    int getVarargElementTypeId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
   */
  public static final class ValueParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        ValueParameter> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.ValueParameter)
      ValueParameterOrBuilder {
    // Use ValueParameter.newBuilder() to construct.
    private ValueParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ValueParameter(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ValueParameter defaultInstance;
    public static ValueParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ValueParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ValueParameter(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              name_ = input.readInt32();
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = varargElementType_.toBuilder();
              }
              varargElementType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(varargElementType_);
                varargElementType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              typeId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              varargElementTypeId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<ValueParameter> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ValueParameter>() {
      public ValueParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ValueParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ValueParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *hasAnnotations
     *declaresDefault
     *isCrossinline
     *isNoinline
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *hasAnnotations
     *declaresDefault
     *isCrossinline
     *isNoinline
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type type_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType() {
      return type_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder() {
      return type_;
    }

    public static final int TYPE_ID_FIELD_NUMBER = 5;
    private int typeId_;
    /**
     * <code>optional int32 type_id = 5;</code>
     */
    public boolean hasTypeId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 type_id = 5;</code>
     */
    public int getTypeId() {
      return typeId_;
    }

    public static final int VARARG_ELEMENT_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type varargElementType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    public boolean hasVarargElementType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getVarargElementType() {
      return varargElementType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder() {
      return varargElementType_;
    }

    public static final int VARARG_ELEMENT_TYPE_ID_FIELD_NUMBER = 6;
    private int varargElementTypeId_;
    /**
     * <code>optional int32 vararg_element_type_id = 6;</code>
     */
    public boolean hasVarargElementTypeId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 vararg_element_type_id = 6;</code>
     */
    public int getVarargElementTypeId() {
      return varargElementTypeId_;
    }

    private void initFields() {
      flags_ = 0;
      name_ = 0;
      type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      typeId_ = 0;
      varargElementType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      varargElementTypeId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasType()) {
        if (!getType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVarargElementType()) {
        if (!getVarargElementType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, type_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(4, varargElementType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, typeId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, varargElementTypeId_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, type_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, varargElementType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, typeId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(6, varargElementTypeId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.ValueParameter)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeFieldBuilder();
          getVarargElementTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        typeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          varargElementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        varargElementTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.typeId_ = typeId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (varargElementTypeBuilder_ == null) {
          result.varargElementType_ = varargElementType_;
        } else {
          result.varargElementType_ = varargElementTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.varargElementTypeId_ = varargElementTypeId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasTypeId()) {
          setTypeId(other.getTypeId());
        }
        if (other.hasVarargElementType()) {
          mergeVarargElementType(other.getVarargElementType());
        }
        if (other.hasVarargElementTypeId()) {
          setVarargElementTypeId(other.getVarargElementTypeId());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (hasType()) {
          if (!getType().isInitialized()) {
            
            return false;
          }
        }
        if (hasVarargElementType()) {
          if (!getVarargElementType().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *hasAnnotations
       *declaresDefault
       *isCrossinline
       *isNoinline
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *hasAnnotations
       *declaresDefault
       *isCrossinline
       *isNoinline
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *hasAnnotations
       *declaresDefault
       *isCrossinline
       *isNoinline
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *hasAnnotations
       *declaresDefault
       *isCrossinline
       *isNoinline
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>required int32 name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> typeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              type_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            type_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getTypeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private int typeId_ ;
      /**
       * <code>optional int32 type_id = 5;</code>
       */
      public boolean hasTypeId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 type_id = 5;</code>
       */
      public int getTypeId() {
        return typeId_;
      }
      /**
       * <code>optional int32 type_id = 5;</code>
       */
      public Builder setTypeId(int value) {
        bitField0_ |= 0x00000008;
        typeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type_id = 5;</code>
       */
      public Builder clearTypeId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        typeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type varargElementType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> varargElementTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public boolean hasVarargElementType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getVarargElementType() {
        if (varargElementTypeBuilder_ == null) {
          return varargElementType_;
        } else {
          return varargElementTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (varargElementTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          varargElementType_ = value;
          onChanged();
        } else {
          varargElementTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = builderForValue.build();
          onChanged();
        } else {
          varargElementTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder mergeVarargElementType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (varargElementTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              varargElementType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            varargElementType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(varargElementType_).mergeFrom(value).buildPartial();
          } else {
            varargElementType_ = value;
          }
          onChanged();
        } else {
          varargElementTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder clearVarargElementType() {
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          varargElementTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getVarargElementTypeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getVarargElementTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder() {
        if (varargElementTypeBuilder_ != null) {
          return varargElementTypeBuilder_.getMessageOrBuilder();
        } else {
          return varargElementType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getVarargElementTypeFieldBuilder() {
        if (varargElementTypeBuilder_ == null) {
          varargElementTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getVarargElementType(),
                  getParentForChildren(),
                  isClean());
          varargElementType_ = null;
        }
        return varargElementTypeBuilder_;
      }

      private int varargElementTypeId_ ;
      /**
       * <code>optional int32 vararg_element_type_id = 6;</code>
       */
      public boolean hasVarargElementTypeId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 vararg_element_type_id = 6;</code>
       */
      public int getVarargElementTypeId() {
        return varargElementTypeId_;
      }
      /**
       * <code>optional int32 vararg_element_type_id = 6;</code>
       */
      public Builder setVarargElementTypeId(int value) {
        bitField0_ |= 0x00000020;
        varargElementTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vararg_element_type_id = 6;</code>
       */
      public Builder clearVarargElementTypeId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        varargElementTypeId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.ValueParameter)
    }

    static {
      defaultInstance = new ValueParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.ValueParameter)
  }

  public interface TypeAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeAlias)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TypeAlias> {

    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     * </pre>
     */
    int getFlags();

    /**
     * <code>required int32 name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>required int32 name = 2;</code>
     */
    int getName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    boolean hasUnderlyingType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUnderlyingType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder();

    /**
     * <code>optional int32 underlying_type_id = 5;</code>
     */
    boolean hasUnderlyingTypeId();
    /**
     * <code>optional int32 underlying_type_id = 5;</code>
     */
    int getUnderlyingTypeId();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    boolean hasExpandedType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getExpandedType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder();

    /**
     * <code>optional int32 expanded_type_id = 7;</code>
     */
    boolean hasExpandedTypeId();
    /**
     * <code>optional int32 expanded_type_id = 7;</code>
     */
    int getExpandedTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    boolean hasVersionRequirement();
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    int getVersionRequirement();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
   */
  public static final class TypeAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        TypeAlias> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeAlias)
      TypeAliasOrBuilder {
    // Use TypeAlias.newBuilder() to construct.
    private TypeAlias(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TypeAlias(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TypeAlias defaultInstance;
    public static TypeAlias getDefaultInstance() {
      return defaultInstance;
    }

    public TypeAlias getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TypeAlias(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              name_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>();
                mutable_bitField0_ |= 0x00000004;
              }
              typeParameter_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = underlyingType_.toBuilder();
              }
              underlyingType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(underlyingType_);
                underlyingType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              underlyingTypeId_ = input.readInt32();
              break;
            }
            case 50: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = expandedType_.toBuilder();
              }
              expandedType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expandedType_);
                expandedType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              expandedTypeId_ = input.readInt32();
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>();
                mutable_bitField0_ |= 0x00000080;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.PARSER, extensionRegistry));
              break;
            }
            case 248: {
              bitField0_ |= 0x00000040;
              versionRequirement_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<TypeAlias> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<TypeAlias>() {
      public TypeAlias parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new TypeAlias(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeAlias> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1 [default = 6];</code>
     *
     * <pre>
     *hasAnnotations
     *Visibility
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 3;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int UNDERLYING_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type underlyingType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    public boolean hasUnderlyingType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUnderlyingType() {
      return underlyingType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder() {
      return underlyingType_;
    }

    public static final int UNDERLYING_TYPE_ID_FIELD_NUMBER = 5;
    private int underlyingTypeId_;
    /**
     * <code>optional int32 underlying_type_id = 5;</code>
     */
    public boolean hasUnderlyingTypeId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 underlying_type_id = 5;</code>
     */
    public int getUnderlyingTypeId() {
      return underlyingTypeId_;
    }

    public static final int EXPANDED_TYPE_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type expandedType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    public boolean hasExpandedType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getExpandedType() {
      return expandedType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder() {
      return expandedType_;
    }

    public static final int EXPANDED_TYPE_ID_FIELD_NUMBER = 7;
    private int expandedTypeId_;
    /**
     * <code>optional int32 expanded_type_id = 7;</code>
     */
    public boolean hasExpandedTypeId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 expanded_type_id = 7;</code>
     */
    public int getExpandedTypeId() {
      return expandedTypeId_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 8;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private int versionRequirement_;
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public boolean hasVersionRequirement() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 version_requirement = 31;</code>
     *
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     */
    public int getVersionRequirement() {
      return versionRequirement_;
    }

    private void initFields() {
      flags_ = 6;
      name_ = 0;
      typeParameter_ = java.util.Collections.emptyList();
      underlyingType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      underlyingTypeId_ = 0;
      expandedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      expandedTypeId_ = 0;
      annotation_ = java.util.Collections.emptyList();
      versionRequirement_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUnderlyingType()) {
        if (!getUnderlyingType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpandedType()) {
        if (!getExpandedType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, name_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(3, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, underlyingType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, underlyingTypeId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, expandedType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, expandedTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(8, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(31, versionRequirement_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, underlyingType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, underlyingTypeId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, expandedType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, expandedTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(31, versionRequirement_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeAlias)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAliasOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTypeParameterFieldBuilder();
          getUnderlyingTypeFieldBuilder();
          getExpandedTypeFieldBuilder();
          getAnnotationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 6;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          typeParameterBuilder_.clear();
        }
        if (underlyingTypeBuilder_ == null) {
          underlyingType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          underlyingTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        underlyingTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (expandedTypeBuilder_ == null) {
          expandedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          expandedTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        expandedTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          annotationBuilder_.clear();
        }
        versionRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (underlyingTypeBuilder_ == null) {
          result.underlyingType_ = underlyingType_;
        } else {
          result.underlyingType_ = underlyingTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.underlyingTypeId_ = underlyingTypeId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        if (expandedTypeBuilder_ == null) {
          result.expandedType_ = expandedType_;
        } else {
          result.expandedType_ = expandedTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.expandedTypeId_ = expandedTypeId_;
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.versionRequirement_ = versionRequirement_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000004);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasUnderlyingType()) {
          mergeUnderlyingType(other.getUnderlyingType());
        }
        if (other.hasUnderlyingTypeId()) {
          setUnderlyingTypeId(other.getUnderlyingTypeId());
        }
        if (other.hasExpandedType()) {
          mergeExpandedType(other.getExpandedType());
        }
        if (other.hasExpandedTypeId()) {
          setExpandedTypeId(other.getExpandedTypeId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000080);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (other.hasVersionRequirement()) {
          setVersionRequirement(other.getVersionRequirement());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasUnderlyingType()) {
          if (!getUnderlyingType().isInitialized()) {
            
            return false;
          }
        }
        if (hasExpandedType()) {
          if (!getExpandedType().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeAlias) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1 [default = 6];</code>
       *
       * <pre>
       *hasAnnotations
       *Visibility
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>required int32 name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type underlyingType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> underlyingTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public boolean hasUnderlyingType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getUnderlyingType() {
        if (underlyingTypeBuilder_ == null) {
          return underlyingType_;
        } else {
          return underlyingTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (underlyingTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          underlyingType_ = value;
          onChanged();
        } else {
          underlyingTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (underlyingTypeBuilder_ == null) {
          underlyingType_ = builderForValue.build();
          onChanged();
        } else {
          underlyingTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder mergeUnderlyingType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (underlyingTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              underlyingType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            underlyingType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(underlyingType_).mergeFrom(value).buildPartial();
          } else {
            underlyingType_ = value;
          }
          onChanged();
        } else {
          underlyingTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder clearUnderlyingType() {
        if (underlyingTypeBuilder_ == null) {
          underlyingType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          underlyingTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getUnderlyingTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getUnderlyingTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder() {
        if (underlyingTypeBuilder_ != null) {
          return underlyingTypeBuilder_.getMessageOrBuilder();
        } else {
          return underlyingType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getUnderlyingTypeFieldBuilder() {
        if (underlyingTypeBuilder_ == null) {
          underlyingTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getUnderlyingType(),
                  getParentForChildren(),
                  isClean());
          underlyingType_ = null;
        }
        return underlyingTypeBuilder_;
      }

      private int underlyingTypeId_ ;
      /**
       * <code>optional int32 underlying_type_id = 5;</code>
       */
      public boolean hasUnderlyingTypeId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 underlying_type_id = 5;</code>
       */
      public int getUnderlyingTypeId() {
        return underlyingTypeId_;
      }
      /**
       * <code>optional int32 underlying_type_id = 5;</code>
       */
      public Builder setUnderlyingTypeId(int value) {
        bitField0_ |= 0x00000010;
        underlyingTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 underlying_type_id = 5;</code>
       */
      public Builder clearUnderlyingTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        underlyingTypeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type expandedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> expandedTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public boolean hasExpandedType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getExpandedType() {
        if (expandedTypeBuilder_ == null) {
          return expandedType_;
        } else {
          return expandedTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (expandedTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expandedType_ = value;
          onChanged();
        } else {
          expandedTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (expandedTypeBuilder_ == null) {
          expandedType_ = builderForValue.build();
          onChanged();
        } else {
          expandedTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder mergeExpandedType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (expandedTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              expandedType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            expandedType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(expandedType_).mergeFrom(value).buildPartial();
          } else {
            expandedType_ = value;
          }
          onChanged();
        } else {
          expandedTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder clearExpandedType() {
        if (expandedTypeBuilder_ == null) {
          expandedType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          expandedTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getExpandedTypeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getExpandedTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder() {
        if (expandedTypeBuilder_ != null) {
          return expandedTypeBuilder_.getMessageOrBuilder();
        } else {
          return expandedType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getExpandedTypeFieldBuilder() {
        if (expandedTypeBuilder_ == null) {
          expandedTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getExpandedType(),
                  getParentForChildren(),
                  isClean());
          expandedType_ = null;
        }
        return expandedTypeBuilder_;
      }

      private int expandedTypeId_ ;
      /**
       * <code>optional int32 expanded_type_id = 7;</code>
       */
      public boolean hasExpandedTypeId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 expanded_type_id = 7;</code>
       */
      public int getExpandedTypeId() {
        return expandedTypeId_;
      }
      /**
       * <code>optional int32 expanded_type_id = 7;</code>
       */
      public Builder setExpandedTypeId(int value) {
        bitField0_ |= 0x00000040;
        expandedTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 expanded_type_id = 7;</code>
       */
      public Builder clearExpandedTypeId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        expandedTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private int versionRequirement_ ;
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public boolean hasVersionRequirement() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public int getVersionRequirement() {
        return versionRequirement_;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder setVersionRequirement(int value) {
        bitField0_ |= 0x00000100;
        versionRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_requirement = 31;</code>
       *
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       */
      public Builder clearVersionRequirement() {
        bitField0_ = (bitField0_ & ~0x00000100);
        versionRequirement_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeAlias)
    }

    static {
      defaultInstance = new TypeAlias(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeAlias)
  }

  public interface EnumEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.EnumEntry)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<EnumEntry> {

    /**
     * <code>optional int32 name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional int32 name = 1;</code>
     */
    int getName();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
   */
  public static final class EnumEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        EnumEntry> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.EnumEntry)
      EnumEntryOrBuilder {
    // Use EnumEntry.newBuilder() to construct.
    private EnumEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EnumEntry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EnumEntry defaultInstance;
    public static EnumEntry getDefaultInstance() {
      return defaultInstance;
    }

    public EnumEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EnumEntry(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              name_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<EnumEntry> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<EnumEntry>() {
      public EnumEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new EnumEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<EnumEntry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_;
    /**
     * <code>optional int32 name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 name = 1;</code>
     */
    public int getName() {
      return name_;
    }

    private void initFields() {
      name_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, name_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.EnumEntry)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>optional int32 name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.EnumEntry)
    }

    static {
      defaultInstance = new EnumEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.EnumEntry)
  }

  public interface VersionRequirementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 version = 1;</code>
     *
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional int32 version = 1;</code>
     *
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     */
    int getVersion();

    /**
     * <code>optional int32 version_full = 2;</code>
     *
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    boolean hasVersionFull();
    /**
     * <code>optional int32 version_full = 2;</code>
     *
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    int getVersionFull();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     *
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     */
    boolean hasLevel();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     *
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level getLevel();

    /**
     * <code>optional int32 error_code = 4;</code>
     *
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     */
    boolean hasErrorCode();
    /**
     * <code>optional int32 error_code = 4;</code>
     *
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     */
    int getErrorCode();

    /**
     * <code>optional int32 message = 5;</code>
     *
     * <pre>
     * Diagnostic message
     * </pre>
     */
    boolean hasMessage();
    /**
     * <code>optional int32 message = 5;</code>
     *
     * <pre>
     * Diagnostic message
     * </pre>
     */
    int getMessage();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     *
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     */
    boolean hasVersionKind();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     *
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind getVersionKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
   */
  public static final class VersionRequirement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
      VersionRequirementOrBuilder {
    // Use VersionRequirement.newBuilder() to construct.
    private VersionRequirement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VersionRequirement(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VersionRequirement defaultInstance;
    public static VersionRequirement getDefaultInstance() {
      return defaultInstance;
    }

    public VersionRequirement getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VersionRequirement(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              versionFull_ = input.readInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level value = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                level_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              errorCode_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              message_ = input.readInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind value = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                versionKind_ = value;
              }
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<VersionRequirement>() {
      public VersionRequirement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new VersionRequirement(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.Level}
     */
    public enum Level
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>WARNING = 0;</code>
       */
      WARNING(0, 0),
      /**
       * <code>ERROR = 1;</code>
       */
      ERROR(1, 1),
      /**
       * <code>HIDDEN = 2;</code>
       */
      HIDDEN(2, 2),
      ;

      /**
       * <code>WARNING = 0;</code>
       */
      public static final int WARNING_VALUE = 0;
      /**
       * <code>ERROR = 1;</code>
       */
      public static final int ERROR_VALUE = 1;
      /**
       * <code>HIDDEN = 2;</code>
       */
      public static final int HIDDEN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Level valueOf(int value) {
        switch (value) {
          case 0: return WARNING;
          case 1: return ERROR;
          case 2: return HIDDEN;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>() {
              public Level findValueByNumber(int number) {
                return Level.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDescriptor().getEnumTypes().get(0);
      }

      private static final Level[] VALUES = values();

      public static Level valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Level(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.Level)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind}
     */
    public enum VersionKind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      LANGUAGE_VERSION(0, 0),
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      COMPILER_VERSION(1, 1),
      /**
       * <code>API_VERSION = 2;</code>
       */
      API_VERSION(2, 2),
      ;

      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      public static final int LANGUAGE_VERSION_VALUE = 0;
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      public static final int COMPILER_VERSION_VALUE = 1;
      /**
       * <code>API_VERSION = 2;</code>
       */
      public static final int API_VERSION_VALUE = 2;


      public final int getNumber() { return value; }

      public static VersionKind valueOf(int value) {
        switch (value) {
          case 0: return LANGUAGE_VERSION;
          case 1: return COMPILER_VERSION;
          case 2: return API_VERSION;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>() {
              public VersionKind findValueByNumber(int number) {
                return VersionKind.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDescriptor().getEnumTypes().get(1);
      }

      private static final VersionKind[] VALUES = values();

      public static VersionKind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private VersionKind(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind)
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>optional int32 version = 1;</code>
     *
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 version = 1;</code>
     *
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    public static final int VERSION_FULL_FIELD_NUMBER = 2;
    private int versionFull_;
    /**
     * <code>optional int32 version_full = 2;</code>
     *
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public boolean hasVersionFull() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 version_full = 2;</code>
     *
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public int getVersionFull() {
      return versionFull_;
    }

    public static final int LEVEL_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level level_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     *
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     *
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level getLevel() {
      return level_;
    }

    public static final int ERROR_CODE_FIELD_NUMBER = 4;
    private int errorCode_;
    /**
     * <code>optional int32 error_code = 4;</code>
     *
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     */
    public boolean hasErrorCode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 error_code = 4;</code>
     *
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     */
    public int getErrorCode() {
      return errorCode_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 5;
    private int message_;
    /**
     * <code>optional int32 message = 5;</code>
     *
     * <pre>
     * Diagnostic message
     * </pre>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 message = 5;</code>
     *
     * <pre>
     * Diagnostic message
     * </pre>
     */
    public int getMessage() {
      return message_;
    }

    public static final int VERSION_KIND_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind versionKind_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     *
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     */
    public boolean hasVersionKind() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     *
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind getVersionKind() {
      return versionKind_;
    }

    private void initFields() {
      version_ = 0;
      versionFull_ = 0;
      level_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level.ERROR;
      errorCode_ = 0;
      message_ = 0;
      versionKind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, versionFull_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, level_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, errorCode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, message_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, versionKind_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, versionFull_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, level_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, errorCode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, message_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(6, versionKind_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        versionFull_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        level_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level.ERROR;
        bitField0_ = (bitField0_ & ~0x00000004);
        errorCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        message_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        versionKind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.versionFull_ = versionFull_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.level_ = level_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.errorCode_ = errorCode_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.versionKind_ = versionKind_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasVersionFull()) {
          setVersionFull(other.getVersionFull());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasVersionKind()) {
          setVersionKind(other.getVersionKind());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>optional int32 version = 1;</code>
       *
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 version = 1;</code>
       *
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional int32 version = 1;</code>
       *
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version = 1;</code>
       *
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private int versionFull_ ;
      /**
       * <code>optional int32 version_full = 2;</code>
       *
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public boolean hasVersionFull() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 version_full = 2;</code>
       *
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public int getVersionFull() {
        return versionFull_;
      }
      /**
       * <code>optional int32 version_full = 2;</code>
       *
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder setVersionFull(int value) {
        bitField0_ |= 0x00000002;
        versionFull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_full = 2;</code>
       *
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder clearVersionFull() {
        bitField0_ = (bitField0_ & ~0x00000002);
        versionFull_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level level_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level.ERROR;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       *
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       *
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level getLevel() {
        return level_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       *
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       */
      public Builder setLevel(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       *
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        level_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Level.ERROR;
        onChanged();
        return this;
      }

      private int errorCode_ ;
      /**
       * <code>optional int32 error_code = 4;</code>
       *
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 error_code = 4;</code>
       *
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       */
      public int getErrorCode() {
        return errorCode_;
      }
      /**
       * <code>optional int32 error_code = 4;</code>
       *
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       */
      public Builder setErrorCode(int value) {
        bitField0_ |= 0x00000008;
        errorCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 error_code = 4;</code>
       *
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       */
      public Builder clearErrorCode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        errorCode_ = 0;
        onChanged();
        return this;
      }

      private int message_ ;
      /**
       * <code>optional int32 message = 5;</code>
       *
       * <pre>
       * Diagnostic message
       * </pre>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 message = 5;</code>
       *
       * <pre>
       * Diagnostic message
       * </pre>
       */
      public int getMessage() {
        return message_;
      }
      /**
       * <code>optional int32 message = 5;</code>
       *
       * <pre>
       * Diagnostic message
       * </pre>
       */
      public Builder setMessage(int value) {
        bitField0_ |= 0x00000010;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 message = 5;</code>
       *
       * <pre>
       * Diagnostic message
       * </pre>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000010);
        message_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind versionKind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       *
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       */
      public boolean hasVersionKind() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       *
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind getVersionKind() {
        return versionKind_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       *
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       */
      public Builder setVersionKind(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        versionKind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       *
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       */
      public Builder clearVersionKind() {
        bitField0_ = (bitField0_ & ~0x00000020);
        versionKind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
    }

    static {
      defaultInstance = new VersionRequirement(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
  }

  public interface VersionRequirementTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> 
        getRequirementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement getRequirement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    int getRequirementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder> 
        getRequirementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
   */
  public static final class VersionRequirementTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      VersionRequirementTableOrBuilder {
    // Use VersionRequirementTable.newBuilder() to construct.
    private VersionRequirementTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VersionRequirementTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VersionRequirementTable defaultInstance;
    public static VersionRequirementTable getDefaultInstance() {
      return defaultInstance;
    }

    public VersionRequirementTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VersionRequirementTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                requirement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement>();
                mutable_bitField0_ |= 0x00000001;
              }
              requirement_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          requirement_ = java.util.Collections.unmodifiableList(requirement_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<VersionRequirementTable>() {
      public VersionRequirementTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new VersionRequirementTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> getParserForType() {
      return PARSER;
    }

    public static final int REQUIREMENT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> requirement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> getRequirementList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder> 
        getRequirementOrBuilderList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public int getRequirementCount() {
      return requirement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement getRequirement(int index) {
      return requirement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
        int index) {
      return requirement_.get(index);
    }

    private void initFields() {
      requirement_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < requirement_.size(); i++) {
        output.writeMessage(1, requirement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < requirement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, requirement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRequirementFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (requirementBuilder_ == null) {
          requirement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          requirementBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable(this);
        int from_bitField0_ = bitField0_;
        if (requirementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            requirement_ = java.util.Collections.unmodifiableList(requirement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.requirement_ = requirement_;
        } else {
          result.requirement_ = requirementBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable.getDefaultInstance()) return this;
        if (requirementBuilder_ == null) {
          if (!other.requirement_.isEmpty()) {
            if (requirement_.isEmpty()) {
              requirement_ = other.requirement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRequirementIsMutable();
              requirement_.addAll(other.requirement_);
            }
            onChanged();
          }
        } else {
          if (!other.requirement_.isEmpty()) {
            if (requirementBuilder_.isEmpty()) {
              requirementBuilder_.dispose();
              requirementBuilder_ = null;
              requirement_ = other.requirement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              requirementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRequirementFieldBuilder() : null;
            } else {
              requirementBuilder_.addAllMessages(other.requirement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> requirement_ =
        java.util.Collections.emptyList();
      private void ensureRequirementIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          requirement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement>(requirement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder> requirementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> getRequirementList() {
        if (requirementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(requirement_);
        } else {
          return requirementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public int getRequirementCount() {
        if (requirementBuilder_ == null) {
          return requirement_.size();
        } else {
          return requirementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement getRequirement(int index) {
        if (requirementBuilder_ == null) {
          return requirement_.get(index);
        } else {
          return requirementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.set(index, value);
          onChanged();
        } else {
          requirementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.set(index, builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.add(value);
          onChanged();
        } else {
          requirementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.add(index, value);
          onChanged();
        } else {
          requirementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.add(builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.add(index, builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addAllRequirement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement> values) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, requirement_);
          onChanged();
        } else {
          requirementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder clearRequirement() {
        if (requirementBuilder_ == null) {
          requirement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          requirementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder removeRequirement(int index) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.remove(index);
          onChanged();
        } else {
          requirementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder getRequirementBuilder(
          int index) {
        return getRequirementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
          int index) {
        if (requirementBuilder_ == null) {
          return requirement_.get(index);  } else {
          return requirementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder> 
           getRequirementOrBuilderList() {
        if (requirementBuilder_ != null) {
          return requirementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(requirement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder addRequirementBuilder() {
        return getRequirementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder addRequirementBuilder(
          int index) {
        return getRequirementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder> 
           getRequirementBuilderList() {
        return getRequirementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder> 
          getRequirementFieldBuilder() {
        if (requirementBuilder_ == null) {
          requirementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.VersionRequirementOrBuilder>(
                  requirement_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          requirement_ = null;
        }
        return requirementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
    }

    static {
      defaultInstance = new VersionRequirementTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
  }

  public interface PackageFragmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.PackageFragment)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<PackageFragment> {

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    boolean hasStrings();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    boolean hasQualifiedNames();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    boolean hasPackage();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Package getPackage();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> 
        getClass_List();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Class getClass_(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    int getClass_Count();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder> 
        getClass_OrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
   *
   * <pre>
   * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
   * Is not used in the JVM back-end
   * </pre>
   */
  public static final class PackageFragment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        PackageFragment> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.PackageFragment)
      PackageFragmentOrBuilder {
    // Use PackageFragment.newBuilder() to construct.
    private PackageFragment(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PackageFragment(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PackageFragment defaultInstance;
    public static PackageFragment getDefaultInstance() {
      return defaultInstance;
    }

    public PackageFragment getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PackageFragment(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = strings_.toBuilder();
              }
              strings_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(strings_);
                strings_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = qualifiedNames_.toBuilder();
              }
              qualifiedNames_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(qualifiedNames_);
                qualifiedNames_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = package_.toBuilder();
              }
              package_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(package_);
                package_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                class__ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class>();
                mutable_bitField0_ |= 0x00000008;
              }
              class__.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          class__ = java.util.Collections.unmodifiableList(class__);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<PackageFragment> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<PackageFragment>() {
      public PackageFragment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new PackageFragment(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<PackageFragment> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable strings_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    public boolean hasStrings() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings() {
      return strings_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
      return strings_;
    }

    public static final int QUALIFIED_NAMES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable qualifiedNames_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    public boolean hasQualifiedNames() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
      return qualifiedNames_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
      return qualifiedNames_;
    }

    public static final int PACKAGE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Package package_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    public boolean hasPackage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package getPackage() {
      return package_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder() {
      return package_;
    }

    public static final int CLASS_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> class__;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> getClass_List() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder> 
        getClass_OrBuilderList() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public int getClass_Count() {
      return class__.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class getClass_(int index) {
      return class__.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
        int index) {
      return class__.get(index);
    }

    private void initFields() {
      strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
      qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
      package_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance();
      class__ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasQualifiedNames()) {
        if (!getQualifiedNames().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPackage()) {
        if (!getPackage().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getClass_Count(); i++) {
        if (!getClass_(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, strings_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, qualifiedNames_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, package_);
      }
      for (int i = 0; i < class__.size(); i++) {
        output.writeMessage(4, class__.get(i));
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, strings_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, qualifiedNames_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, package_);
      }
      for (int i = 0; i < class__.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, class__.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
     *
     * <pre>
     * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
     * Is not used in the JVM back-end
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.PackageFragment)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStringsFieldBuilder();
          getQualifiedNamesFieldBuilder();
          getPackageFieldBuilder();
          getClass_FieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (stringsBuilder_ == null) {
          strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
        } else {
          stringsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
        } else {
          qualifiedNamesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (packageBuilder_ == null) {
          package_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance();
        } else {
          packageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (class_Builder_ == null) {
          class__ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          class_Builder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (stringsBuilder_ == null) {
          result.strings_ = strings_;
        } else {
          result.strings_ = stringsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (qualifiedNamesBuilder_ == null) {
          result.qualifiedNames_ = qualifiedNames_;
        } else {
          result.qualifiedNames_ = qualifiedNamesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (packageBuilder_ == null) {
          result.package_ = package_;
        } else {
          result.package_ = packageBuilder_.build();
        }
        if (class_Builder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            class__ = java.util.Collections.unmodifiableList(class__);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.class__ = class__;
        } else {
          result.class__ = class_Builder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.getDefaultInstance()) return this;
        if (other.hasStrings()) {
          mergeStrings(other.getStrings());
        }
        if (other.hasQualifiedNames()) {
          mergeQualifiedNames(other.getQualifiedNames());
        }
        if (other.hasPackage()) {
          mergePackage(other.getPackage());
        }
        if (class_Builder_ == null) {
          if (!other.class__.isEmpty()) {
            if (class__.isEmpty()) {
              class__ = other.class__;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureClass_IsMutable();
              class__.addAll(other.class__);
            }
            onChanged();
          }
        } else {
          if (!other.class__.isEmpty()) {
            if (class_Builder_.isEmpty()) {
              class_Builder_.dispose();
              class_Builder_ = null;
              class__ = other.class__;
              bitField0_ = (bitField0_ & ~0x00000008);
              class_Builder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getClass_FieldBuilder() : null;
            } else {
              class_Builder_.addAllMessages(other.class__);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasQualifiedNames()) {
          if (!getQualifiedNames().isInitialized()) {
            
            return false;
          }
        }
        if (hasPackage()) {
          if (!getPackage().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getClass_Count(); i++) {
          if (!getClass_(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder> stringsBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public boolean hasStrings() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings() {
        if (stringsBuilder_ == null) {
          return strings_;
        } else {
          return stringsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          strings_ = value;
          onChanged();
        } else {
          stringsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder builderForValue) {
        if (stringsBuilder_ == null) {
          strings_ = builderForValue.build();
          onChanged();
        } else {
          stringsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder mergeStrings(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              strings_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance()) {
            strings_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.newBuilder(strings_).mergeFrom(value).buildPartial();
          } else {
            strings_ = value;
          }
          onChanged();
        } else {
          stringsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder clearStrings() {
        if (stringsBuilder_ == null) {
          strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
          onChanged();
        } else {
          stringsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder getStringsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStringsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
        if (stringsBuilder_ != null) {
          return stringsBuilder_.getMessageOrBuilder();
        } else {
          return strings_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder> 
          getStringsFieldBuilder() {
        if (stringsBuilder_ == null) {
          stringsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder>(
                  getStrings(),
                  getParentForChildren(),
                  isClean());
          strings_ = null;
        }
        return stringsBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder> qualifiedNamesBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public boolean hasQualifiedNames() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
        if (qualifiedNamesBuilder_ == null) {
          return qualifiedNames_;
        } else {
          return qualifiedNamesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifiedNames_ = value;
          onChanged();
        } else {
          qualifiedNamesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder builderForValue) {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = builderForValue.build();
          onChanged();
        } else {
          qualifiedNamesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder mergeQualifiedNames(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              qualifiedNames_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance()) {
            qualifiedNames_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.newBuilder(qualifiedNames_).mergeFrom(value).buildPartial();
          } else {
            qualifiedNames_ = value;
          }
          onChanged();
        } else {
          qualifiedNamesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder clearQualifiedNames() {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
          onChanged();
        } else {
          qualifiedNamesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder getQualifiedNamesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getQualifiedNamesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
        if (qualifiedNamesBuilder_ != null) {
          return qualifiedNamesBuilder_.getMessageOrBuilder();
        } else {
          return qualifiedNames_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder> 
          getQualifiedNamesFieldBuilder() {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNamesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder>(
                  getQualifiedNames(),
                  getParentForChildren(),
                  isClean());
          qualifiedNames_ = null;
        }
        return qualifiedNamesBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Package package_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Package, org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder> packageBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public boolean hasPackage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package getPackage() {
        if (packageBuilder_ == null) {
          return package_;
        } else {
          return packageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Package value) {
        if (packageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          package_ = value;
          onChanged();
        } else {
          packageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder builderForValue) {
        if (packageBuilder_ == null) {
          package_ = builderForValue.build();
          onChanged();
        } else {
          packageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder mergePackage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Package value) {
        if (packageBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              package_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance()) {
            package_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.newBuilder(package_).mergeFrom(value).buildPartial();
          } else {
            package_ = value;
          }
          onChanged();
        } else {
          packageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder clearPackage() {
        if (packageBuilder_ == null) {
          package_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.getDefaultInstance();
          onChanged();
        } else {
          packageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder getPackageBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPackageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder() {
        if (packageBuilder_ != null) {
          return packageBuilder_.getMessageOrBuilder();
        } else {
          return package_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Package, org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder> 
          getPackageFieldBuilder() {
        if (packageBuilder_ == null) {
          packageBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Package, org.jetbrains.kotlin.metadata.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageOrBuilder>(
                  getPackage(),
                  getParentForChildren(),
                  isClean());
          package_ = null;
        }
        return packageBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> class__ =
        java.util.Collections.emptyList();
      private void ensureClass_IsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          class__ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class>(class__);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder> class_Builder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> getClass_List() {
        if (class_Builder_ == null) {
          return java.util.Collections.unmodifiableList(class__);
        } else {
          return class_Builder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public int getClass_Count() {
        if (class_Builder_ == null) {
          return class__.size();
        } else {
          return class_Builder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class getClass_(int index) {
        if (class_Builder_ == null) {
          return class__.get(index);
        } else {
          return class_Builder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.set(index, value);
          onChanged();
        } else {
          class_Builder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.set(index, builderForValue.build());
          onChanged();
        } else {
          class_Builder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(org.jetbrains.kotlin.metadata.DebugProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.add(value);
          onChanged();
        } else {
          class_Builder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.add(index, value);
          onChanged();
        } else {
          class_Builder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.add(builderForValue.build());
          onChanged();
        } else {
          class_Builder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.add(index, builderForValue.build());
          onChanged();
        } else {
          class_Builder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addAllClass_(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Class> values) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, class__);
          onChanged();
        } else {
          class_Builder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder clearClass_() {
        if (class_Builder_ == null) {
          class__ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          class_Builder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder removeClass_(int index) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.remove(index);
          onChanged();
        } else {
          class_Builder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder getClass_Builder(
          int index) {
        return getClass_FieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
          int index) {
        if (class_Builder_ == null) {
          return class__.get(index);  } else {
          return class_Builder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder> 
           getClass_OrBuilderList() {
        if (class_Builder_ != null) {
          return class_Builder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(class__);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder addClass_Builder() {
        return getClass_FieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder addClass_Builder(
          int index) {
        return getClass_FieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder> 
           getClass_BuilderList() {
        return getClass_FieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder> 
          getClass_FieldBuilder() {
        if (class_Builder_ == null) {
          class_Builder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ClassOrBuilder>(
                  class__,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          class__ = null;
        }
        return class_Builder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.PackageFragment)
    }

    static {
      defaultInstance = new PackageFragment(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.PackageFragment)
  }

  public interface ContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Contract)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> 
        getEffectList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect getEffect(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    int getEffectCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder> 
        getEffectOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder getEffectOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
   */
  public static final class Contract extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Contract)
      ContractOrBuilder {
    // Use Contract.newBuilder() to construct.
    private Contract(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Contract(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Contract defaultInstance;
    public static Contract getDefaultInstance() {
      return defaultInstance;
    }

    public Contract getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Contract(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                effect_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect>();
                mutable_bitField0_ |= 0x00000001;
              }
              effect_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          effect_ = java.util.Collections.unmodifiableList(effect_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Contract> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Contract>() {
      public Contract parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Contract(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Contract> getParserForType() {
      return PARSER;
    }

    public static final int EFFECT_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> effect_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> getEffectList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder> 
        getEffectOrBuilderList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public int getEffectCount() {
      return effect_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect getEffect(int index) {
      return effect_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder getEffectOrBuilder(
        int index) {
      return effect_.get(index);
    }

    private void initFields() {
      effect_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEffectCount(); i++) {
        if (!getEffect(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < effect_.size(); i++) {
        output.writeMessage(1, effect_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < effect_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, effect_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Contract)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ContractOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEffectFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (effectBuilder_ == null) {
          effect_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          effectBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract(this);
        int from_bitField0_ = bitField0_;
        if (effectBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            effect_ = java.util.Collections.unmodifiableList(effect_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.effect_ = effect_;
        } else {
          result.effect_ = effectBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract.getDefaultInstance()) return this;
        if (effectBuilder_ == null) {
          if (!other.effect_.isEmpty()) {
            if (effect_.isEmpty()) {
              effect_ = other.effect_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEffectIsMutable();
              effect_.addAll(other.effect_);
            }
            onChanged();
          }
        } else {
          if (!other.effect_.isEmpty()) {
            if (effectBuilder_.isEmpty()) {
              effectBuilder_.dispose();
              effectBuilder_ = null;
              effect_ = other.effect_;
              bitField0_ = (bitField0_ & ~0x00000001);
              effectBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEffectFieldBuilder() : null;
            } else {
              effectBuilder_.addAllMessages(other.effect_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getEffectCount(); i++) {
          if (!getEffect(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Contract) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> effect_ =
        java.util.Collections.emptyList();
      private void ensureEffectIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          effect_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect>(effect_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder> effectBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> getEffectList() {
        if (effectBuilder_ == null) {
          return java.util.Collections.unmodifiableList(effect_);
        } else {
          return effectBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public int getEffectCount() {
        if (effectBuilder_ == null) {
          return effect_.size();
        } else {
          return effectBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect getEffect(int index) {
        if (effectBuilder_ == null) {
          return effect_.get(index);
        } else {
          return effectBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.set(index, value);
          onChanged();
        } else {
          effectBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.set(index, builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.add(value);
          onChanged();
        } else {
          effectBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.add(index, value);
          onChanged();
        } else {
          effectBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.add(builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.add(index, builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addAllEffect(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect> values) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, effect_);
          onChanged();
        } else {
          effectBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder clearEffect() {
        if (effectBuilder_ == null) {
          effect_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          effectBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder removeEffect(int index) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.remove(index);
          onChanged();
        } else {
          effectBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder getEffectBuilder(
          int index) {
        return getEffectFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder getEffectOrBuilder(
          int index) {
        if (effectBuilder_ == null) {
          return effect_.get(index);  } else {
          return effectBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder> 
           getEffectOrBuilderList() {
        if (effectBuilder_ != null) {
          return effectBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(effect_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder addEffectBuilder() {
        return getEffectFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder addEffectBuilder(
          int index) {
        return getEffectFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder> 
           getEffectBuilderList() {
        return getEffectFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder> 
          getEffectFieldBuilder() {
        if (effectBuilder_ == null) {
          effectBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder>(
                  effect_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          effect_ = null;
        }
        return effectBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Contract)
    }

    static {
      defaultInstance = new Contract(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Contract)
  }

  public interface EffectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Effect)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     */
    boolean hasEffectType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType getEffectType();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> 
        getEffectConstructorArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getEffectConstructorArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    int getEffectConstructorArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getEffectConstructorArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
        int index);

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    boolean hasConclusionOfConditionalEffect();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getConclusionOfConditionalEffect();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     */
    boolean hasKind();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind getKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
   */
  public static final class Effect extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Effect)
      EffectOrBuilder {
    // Use Effect.newBuilder() to construct.
    private Effect(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Effect(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Effect defaultInstance;
    public static Effect getDefaultInstance() {
      return defaultInstance;
    }

    public Effect getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Effect(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType value = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                effectType_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                effectConstructorArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>();
                mutable_bitField0_ |= 0x00000002;
              }
              effectConstructorArgument_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = conclusionOfConditionalEffect_.toBuilder();
              }
              conclusionOfConditionalEffect_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(conclusionOfConditionalEffect_);
                conclusionOfConditionalEffect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind value = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                kind_ = value;
              }
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          effectConstructorArgument_ = java.util.Collections.unmodifiableList(effectConstructorArgument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Effect> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Effect>() {
      public Effect parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Effect(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Effect> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.EffectType}
     *
     * <pre>
     * This enum controls which effect this message contains and how 'effectConstructorArguments'
     * should be parsed.
     * Each enum value documented in the following syntax: "EffectName(arg1: T1, arg2: T2, ...)"
     * Those arguments are expected to be found in 'effectConstructorArguments' in exactly the same
     * order and amount as defined by signature, otherwise message should be dropped.
     * </pre>
     */
    public enum EffectType
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>RETURNS_CONSTANT = 0;</code>
       *
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       */
      RETURNS_CONSTANT(0, 0),
      /**
       * <code>CALLS = 1;</code>
       *
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       */
      CALLS(1, 1),
      /**
       * <code>RETURNS_NOT_NULL = 2;</code>
       *
       * <pre>
       * ReturnsNotNull()
       * </pre>
       */
      RETURNS_NOT_NULL(2, 2),
      ;

      /**
       * <code>RETURNS_CONSTANT = 0;</code>
       *
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       */
      public static final int RETURNS_CONSTANT_VALUE = 0;
      /**
       * <code>CALLS = 1;</code>
       *
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       */
      public static final int CALLS_VALUE = 1;
      /**
       * <code>RETURNS_NOT_NULL = 2;</code>
       *
       * <pre>
       * ReturnsNotNull()
       * </pre>
       */
      public static final int RETURNS_NOT_NULL_VALUE = 2;


      public final int getNumber() { return value; }

      public static EffectType valueOf(int value) {
        switch (value) {
          case 0: return RETURNS_CONSTANT;
          case 1: return CALLS;
          case 2: return RETURNS_NOT_NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>() {
              public EffectType findValueByNumber(int number) {
                return EffectType.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDescriptor().getEnumTypes().get(0);
      }

      private static final EffectType[] VALUES = values();

      public static EffectType valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private EffectType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.EffectType)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.InvocationKind}
     */
    public enum InvocationKind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      AT_MOST_ONCE(0, 0),
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      EXACTLY_ONCE(1, 1),
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      AT_LEAST_ONCE(2, 2),
      ;

      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      public static final int AT_MOST_ONCE_VALUE = 0;
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      public static final int EXACTLY_ONCE_VALUE = 1;
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      public static final int AT_LEAST_ONCE_VALUE = 2;


      public final int getNumber() { return value; }

      public static InvocationKind valueOf(int value) {
        switch (value) {
          case 0: return AT_MOST_ONCE;
          case 1: return EXACTLY_ONCE;
          case 2: return AT_LEAST_ONCE;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>() {
              public InvocationKind findValueByNumber(int number) {
                return InvocationKind.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDescriptor().getEnumTypes().get(1);
      }

      private static final InvocationKind[] VALUES = values();

      public static InvocationKind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private InvocationKind(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.InvocationKind)
    }

    private int bitField0_;
    public static final int EFFECT_TYPE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType effectType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     */
    public boolean hasEffectType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType getEffectType() {
      return effectType_;
    }

    public static final int EFFECT_CONSTRUCTOR_ARGUMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> effectConstructorArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getEffectConstructorArgumentList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getEffectConstructorArgumentOrBuilderList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public int getEffectConstructorArgumentCount() {
      return effectConstructorArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getEffectConstructorArgument(int index) {
      return effectConstructorArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
        int index) {
      return effectConstructorArgument_.get(index);
    }

    public static final int CONCLUSION_OF_CONDITIONAL_EFFECT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression conclusionOfConditionalEffect_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    public boolean hasConclusionOfConditionalEffect() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getConclusionOfConditionalEffect() {
      return conclusionOfConditionalEffect_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     *
     * <pre>
     * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder() {
      return conclusionOfConditionalEffect_;
    }

    public static final int KIND_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind kind_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind getKind() {
      return kind_;
    }

    private void initFields() {
      effectType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType.RETURNS_CONSTANT;
      effectConstructorArgument_ = java.util.Collections.emptyList();
      conclusionOfConditionalEffect_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance();
      kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind.AT_MOST_ONCE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEffectConstructorArgumentCount(); i++) {
        if (!getEffectConstructorArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConclusionOfConditionalEffect()) {
        if (!getConclusionOfConditionalEffect().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, effectType_.getNumber());
      }
      for (int i = 0; i < effectConstructorArgument_.size(); i++) {
        output.writeMessage(2, effectConstructorArgument_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, conclusionOfConditionalEffect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(4, kind_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, effectType_.getNumber());
      }
      for (int i = 0; i < effectConstructorArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, effectConstructorArgument_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, conclusionOfConditionalEffect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, kind_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Effect)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.EffectOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEffectConstructorArgumentFieldBuilder();
          getConclusionOfConditionalEffectFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        effectType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType.RETURNS_CONSTANT;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          effectConstructorArgumentBuilder_.clear();
        }
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffect_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance();
        } else {
          conclusionOfConditionalEffectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind.AT_MOST_ONCE;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.effectType_ = effectType_;
        if (effectConstructorArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            effectConstructorArgument_ = java.util.Collections.unmodifiableList(effectConstructorArgument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.effectConstructorArgument_ = effectConstructorArgument_;
        } else {
          result.effectConstructorArgument_ = effectConstructorArgumentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (conclusionOfConditionalEffectBuilder_ == null) {
          result.conclusionOfConditionalEffect_ = conclusionOfConditionalEffect_;
        } else {
          result.conclusionOfConditionalEffect_ = conclusionOfConditionalEffectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.kind_ = kind_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.getDefaultInstance()) return this;
        if (other.hasEffectType()) {
          setEffectType(other.getEffectType());
        }
        if (effectConstructorArgumentBuilder_ == null) {
          if (!other.effectConstructorArgument_.isEmpty()) {
            if (effectConstructorArgument_.isEmpty()) {
              effectConstructorArgument_ = other.effectConstructorArgument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEffectConstructorArgumentIsMutable();
              effectConstructorArgument_.addAll(other.effectConstructorArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.effectConstructorArgument_.isEmpty()) {
            if (effectConstructorArgumentBuilder_.isEmpty()) {
              effectConstructorArgumentBuilder_.dispose();
              effectConstructorArgumentBuilder_ = null;
              effectConstructorArgument_ = other.effectConstructorArgument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              effectConstructorArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEffectConstructorArgumentFieldBuilder() : null;
            } else {
              effectConstructorArgumentBuilder_.addAllMessages(other.effectConstructorArgument_);
            }
          }
        }
        if (other.hasConclusionOfConditionalEffect()) {
          mergeConclusionOfConditionalEffect(other.getConclusionOfConditionalEffect());
        }
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getEffectConstructorArgumentCount(); i++) {
          if (!getEffectConstructorArgument(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasConclusionOfConditionalEffect()) {
          if (!getConclusionOfConditionalEffect().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType effectType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType.RETURNS_CONSTANT;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       */
      public boolean hasEffectType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType getEffectType() {
        return effectType_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       */
      public Builder setEffectType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        effectType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       */
      public Builder clearEffectType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        effectType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.EffectType.RETURNS_CONSTANT;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> effectConstructorArgument_ =
        java.util.Collections.emptyList();
      private void ensureEffectConstructorArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          effectConstructorArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>(effectConstructorArgument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> effectConstructorArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getEffectConstructorArgumentList() {
        if (effectConstructorArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(effectConstructorArgument_);
        } else {
          return effectConstructorArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public int getEffectConstructorArgumentCount() {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.size();
        } else {
          return effectConstructorArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getEffectConstructorArgument(int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.get(index);
        } else {
          return effectConstructorArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.set(index, value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(index, value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addAllEffectConstructorArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> values) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, effectConstructorArgument_);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder clearEffectConstructorArgument() {
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder removeEffectConstructorArgument(int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.remove(index);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder getEffectConstructorArgumentBuilder(
          int index) {
        return getEffectConstructorArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
          int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.get(index);  } else {
          return effectConstructorArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
           getEffectConstructorArgumentOrBuilderList() {
        if (effectConstructorArgumentBuilder_ != null) {
          return effectConstructorArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(effectConstructorArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addEffectConstructorArgumentBuilder() {
        return getEffectConstructorArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addEffectConstructorArgumentBuilder(
          int index) {
        return getEffectConstructorArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder> 
           getEffectConstructorArgumentBuilderList() {
        return getEffectConstructorArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
          getEffectConstructorArgumentFieldBuilder() {
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder>(
                  effectConstructorArgument_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          effectConstructorArgument_ = null;
        }
        return effectConstructorArgumentBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression conclusionOfConditionalEffect_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> conclusionOfConditionalEffectBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public boolean hasConclusionOfConditionalEffect() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getConclusionOfConditionalEffect() {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          return conclusionOfConditionalEffect_;
        } else {
          return conclusionOfConditionalEffectBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public Builder setConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          conclusionOfConditionalEffect_ = value;
          onChanged();
        } else {
          conclusionOfConditionalEffectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public Builder setConclusionOfConditionalEffect(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffect_ = builderForValue.build();
          onChanged();
        } else {
          conclusionOfConditionalEffectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public Builder mergeConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              conclusionOfConditionalEffect_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance()) {
            conclusionOfConditionalEffect_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.newBuilder(conclusionOfConditionalEffect_).mergeFrom(value).buildPartial();
          } else {
            conclusionOfConditionalEffect_ = value;
          }
          onChanged();
        } else {
          conclusionOfConditionalEffectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public Builder clearConclusionOfConditionalEffect() {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffect_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance();
          onChanged();
        } else {
          conclusionOfConditionalEffectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder getConclusionOfConditionalEffectBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getConclusionOfConditionalEffectFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder() {
        if (conclusionOfConditionalEffectBuilder_ != null) {
          return conclusionOfConditionalEffectBuilder_.getMessageOrBuilder();
        } else {
          return conclusionOfConditionalEffect_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       *
       * <pre>
       * If present, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
          getConclusionOfConditionalEffectFieldBuilder() {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffectBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder>(
                  getConclusionOfConditionalEffect(),
                  getParentForChildren(),
                  isClean());
          conclusionOfConditionalEffect_ = null;
        }
        return conclusionOfConditionalEffectBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind.AT_MOST_ONCE;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind getKind() {
        return kind_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       */
      public Builder setKind(org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kind_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Effect.InvocationKind.AT_MOST_ONCE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Effect)
    }

    static {
      defaultInstance = new Effect(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Effect)
  }

  public interface ExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Expression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *isNegated =&gt; this expression should be negated
     *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *isNegated =&gt; this expression should be negated
     *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     */
    int getFlags();

    /**
     * <code>optional int32 value_parameter_reference = 2;</code>
     *
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     */
    boolean hasValueParameterReference();
    /**
     * <code>optional int32 value_parameter_reference = 2;</code>
     *
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     */
    int getValueParameterReference();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     */
    boolean hasConstantValue();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue getConstantValue();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    boolean hasIsInstanceType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getIsInstanceType();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder();

    /**
     * <code>optional int32 is_instance_type_id = 5;</code>
     */
    boolean hasIsInstanceTypeId();
    /**
     * <code>optional int32 is_instance_type_id = 5;</code>
     */
    int getIsInstanceTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> 
        getAndArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getAndArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    int getAndArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getAndArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> 
        getOrArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getOrArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    int getOrArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getOrArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
   *
   * <pre>
   * We use some trickery to optimize memory footprint of contract-expressions:
   * exact type of Expression is determined based on its contents.
   * </pre>
   */
  public static final class Expression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Expression)
      ExpressionOrBuilder {
    // Use Expression.newBuilder() to construct.
    private Expression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Expression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Expression defaultInstance;
    public static Expression getDefaultInstance() {
      return defaultInstance;
    }

    public Expression getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Expression(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              valueParameterReference_ = input.readInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue value = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                constantValue_ = value;
              }
              break;
            }
            case 34: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = isInstanceType_.toBuilder();
              }
              isInstanceType_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(isInstanceType_);
                isInstanceType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isInstanceTypeId_ = input.readInt32();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                andArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>();
                mutable_bitField0_ |= 0x00000020;
              }
              andArgument_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                orArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>();
                mutable_bitField0_ |= 0x00000040;
              }
              orArgument_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          andArgument_ = java.util.Collections.unmodifiableList(andArgument_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          orArgument_ = java.util.Collections.unmodifiableList(orArgument_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Expression> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Expression>() {
      public Expression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Expression(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Expression> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Expression.ConstantValue}
     */
    public enum ConstantValue
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRUE = 0;</code>
       */
      TRUE(0, 0),
      /**
       * <code>FALSE = 1;</code>
       */
      FALSE(1, 1),
      /**
       * <code>NULL = 2;</code>
       */
      NULL(2, 2),
      ;

      /**
       * <code>TRUE = 0;</code>
       */
      public static final int TRUE_VALUE = 0;
      /**
       * <code>FALSE = 1;</code>
       */
      public static final int FALSE_VALUE = 1;
      /**
       * <code>NULL = 2;</code>
       */
      public static final int NULL_VALUE = 2;


      public final int getNumber() { return value; }

      public static ConstantValue valueOf(int value) {
        switch (value) {
          case 0: return TRUE;
          case 1: return FALSE;
          case 2: return NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>() {
              public ConstantValue findValueByNumber(int number) {
                return ConstantValue.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDescriptor().getEnumTypes().get(0);
      }

      private static final ConstantValue[] VALUES = values();

      public static ConstantValue valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ConstantValue(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Expression.ConstantValue)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *isNegated =&gt; this expression should be negated
     *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1 [default = 0];</code>
     *
     * <pre>
     *isNegated =&gt; this expression should be negated
     *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int VALUE_PARAMETER_REFERENCE_FIELD_NUMBER = 2;
    private int valueParameterReference_;
    /**
     * <code>optional int32 value_parameter_reference = 2;</code>
     *
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     */
    public boolean hasValueParameterReference() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 value_parameter_reference = 2;</code>
     *
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     */
    public int getValueParameterReference() {
      return valueParameterReference_;
    }

    public static final int CONSTANT_VALUE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue constantValue_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     */
    public boolean hasConstantValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue getConstantValue() {
      return constantValue_;
    }

    public static final int IS_INSTANCE_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type isInstanceType_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    public boolean hasIsInstanceType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getIsInstanceType() {
      return isInstanceType_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     *
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder() {
      return isInstanceType_;
    }

    public static final int IS_INSTANCE_TYPE_ID_FIELD_NUMBER = 5;
    private int isInstanceTypeId_;
    /**
     * <code>optional int32 is_instance_type_id = 5;</code>
     */
    public boolean hasIsInstanceTypeId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 is_instance_type_id = 5;</code>
     */
    public int getIsInstanceTypeId() {
      return isInstanceTypeId_;
    }

    public static final int AND_ARGUMENT_FIELD_NUMBER = 6;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> andArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getAndArgumentList() {
      return andArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getAndArgumentOrBuilderList() {
      return andArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    public int getAndArgumentCount() {
      return andArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getAndArgument(int index) {
      return andArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
        int index) {
      return andArgument_.get(index);
    }

    public static final int OR_ARGUMENT_FIELD_NUMBER = 7;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> orArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getOrArgumentList() {
      return orArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
        getOrArgumentOrBuilderList() {
      return orArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    public int getOrArgumentCount() {
      return orArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getOrArgument(int index) {
      return orArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     *
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
        int index) {
      return orArgument_.get(index);
    }

    private void initFields() {
      flags_ = 0;
      valueParameterReference_ = 0;
      constantValue_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue.TRUE;
      isInstanceType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      isInstanceTypeId_ = 0;
      andArgument_ = java.util.Collections.emptyList();
      orArgument_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasIsInstanceType()) {
        if (!getIsInstanceType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAndArgumentCount(); i++) {
        if (!getAndArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getOrArgumentCount(); i++) {
        if (!getOrArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, valueParameterReference_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, constantValue_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, isInstanceType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, isInstanceTypeId_);
      }
      for (int i = 0; i < andArgument_.size(); i++) {
        output.writeMessage(6, andArgument_.get(i));
      }
      for (int i = 0; i < orArgument_.size(); i++) {
        output.writeMessage(7, orArgument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, valueParameterReference_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, constantValue_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, isInstanceType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, isInstanceTypeId_);
      }
      for (int i = 0; i < andArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, andArgument_.get(i));
      }
      for (int i = 0; i < orArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, orArgument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
     *
     * <pre>
     * We use some trickery to optimize memory footprint of contract-expressions:
     * exact type of Expression is determined based on its contents.
     * </pre>
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Expression)
        org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.class, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getIsInstanceTypeFieldBuilder();
          getAndArgumentFieldBuilder();
          getOrArgumentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        valueParameterReference_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        constantValue_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue.TRUE;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (isInstanceTypeBuilder_ == null) {
          isInstanceType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
        } else {
          isInstanceTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        isInstanceTypeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (andArgumentBuilder_ == null) {
          andArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          andArgumentBuilder_.clear();
        }
        if (orArgumentBuilder_ == null) {
          orArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          orArgumentBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression build() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression buildPartial() {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression result = new org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.valueParameterReference_ = valueParameterReference_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.constantValue_ = constantValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (isInstanceTypeBuilder_ == null) {
          result.isInstanceType_ = isInstanceType_;
        } else {
          result.isInstanceType_ = isInstanceTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isInstanceTypeId_ = isInstanceTypeId_;
        if (andArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            andArgument_ = java.util.Collections.unmodifiableList(andArgument_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.andArgument_ = andArgument_;
        } else {
          result.andArgument_ = andArgumentBuilder_.build();
        }
        if (orArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            orArgument_ = java.util.Collections.unmodifiableList(orArgument_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.orArgument_ = orArgument_;
        } else {
          result.orArgument_ = orArgumentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression) {
          return mergeFrom((org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression other) {
        if (other == org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasValueParameterReference()) {
          setValueParameterReference(other.getValueParameterReference());
        }
        if (other.hasConstantValue()) {
          setConstantValue(other.getConstantValue());
        }
        if (other.hasIsInstanceType()) {
          mergeIsInstanceType(other.getIsInstanceType());
        }
        if (other.hasIsInstanceTypeId()) {
          setIsInstanceTypeId(other.getIsInstanceTypeId());
        }
        if (andArgumentBuilder_ == null) {
          if (!other.andArgument_.isEmpty()) {
            if (andArgument_.isEmpty()) {
              andArgument_ = other.andArgument_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureAndArgumentIsMutable();
              andArgument_.addAll(other.andArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.andArgument_.isEmpty()) {
            if (andArgumentBuilder_.isEmpty()) {
              andArgumentBuilder_.dispose();
              andArgumentBuilder_ = null;
              andArgument_ = other.andArgument_;
              bitField0_ = (bitField0_ & ~0x00000020);
              andArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAndArgumentFieldBuilder() : null;
            } else {
              andArgumentBuilder_.addAllMessages(other.andArgument_);
            }
          }
        }
        if (orArgumentBuilder_ == null) {
          if (!other.orArgument_.isEmpty()) {
            if (orArgument_.isEmpty()) {
              orArgument_ = other.orArgument_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureOrArgumentIsMutable();
              orArgument_.addAll(other.orArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.orArgument_.isEmpty()) {
            if (orArgumentBuilder_.isEmpty()) {
              orArgumentBuilder_.dispose();
              orArgumentBuilder_ = null;
              orArgument_ = other.orArgument_;
              bitField0_ = (bitField0_ & ~0x00000040);
              orArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOrArgumentFieldBuilder() : null;
            } else {
              orArgumentBuilder_.addAllMessages(other.orArgument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasIsInstanceType()) {
          if (!getIsInstanceType().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAndArgumentCount(); i++) {
          if (!getAndArgument(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getOrArgumentCount(); i++) {
          if (!getOrArgument(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *isNegated =&gt; this expression should be negated
       *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *isNegated =&gt; this expression should be negated
       *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *isNegated =&gt; this expression should be negated
       *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1 [default = 0];</code>
       *
       * <pre>
       *isNegated =&gt; this expression should be negated
       *isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int valueParameterReference_ ;
      /**
       * <code>optional int32 value_parameter_reference = 2;</code>
       *
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       */
      public boolean hasValueParameterReference() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 value_parameter_reference = 2;</code>
       *
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       */
      public int getValueParameterReference() {
        return valueParameterReference_;
      }
      /**
       * <code>optional int32 value_parameter_reference = 2;</code>
       *
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       */
      public Builder setValueParameterReference(int value) {
        bitField0_ |= 0x00000002;
        valueParameterReference_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value_parameter_reference = 2;</code>
       *
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       */
      public Builder clearValueParameterReference() {
        bitField0_ = (bitField0_ & ~0x00000002);
        valueParameterReference_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue constantValue_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue.TRUE;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       */
      public boolean hasConstantValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue getConstantValue() {
        return constantValue_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       */
      public Builder setConstantValue(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        constantValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       */
      public Builder clearConstantValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        constantValue_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.ConstantValue.TRUE;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.Type isInstanceType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> isInstanceTypeBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public boolean hasIsInstanceType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type getIsInstanceType() {
        if (isInstanceTypeBuilder_ == null) {
          return isInstanceType_;
        } else {
          return isInstanceTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public Builder setIsInstanceType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (isInstanceTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          isInstanceType_ = value;
          onChanged();
        } else {
          isInstanceTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public Builder setIsInstanceType(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder builderForValue) {
        if (isInstanceTypeBuilder_ == null) {
          isInstanceType_ = builderForValue.build();
          onChanged();
        } else {
          isInstanceTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public Builder mergeIsInstanceType(org.jetbrains.kotlin.metadata.DebugProtoBuf.Type value) {
        if (isInstanceTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              isInstanceType_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance()) {
            isInstanceType_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.newBuilder(isInstanceType_).mergeFrom(value).buildPartial();
          } else {
            isInstanceType_ = value;
          }
          onChanged();
        } else {
          isInstanceTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public Builder clearIsInstanceType() {
        if (isInstanceTypeBuilder_ == null) {
          isInstanceType_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.getDefaultInstance();
          onChanged();
        } else {
          isInstanceTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder getIsInstanceTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getIsInstanceTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder() {
        if (isInstanceTypeBuilder_ != null) {
          return isInstanceTypeBuilder_.getMessageOrBuilder();
        } else {
          return isInstanceType_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       *
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder> 
          getIsInstanceTypeFieldBuilder() {
        if (isInstanceTypeBuilder_ == null) {
          isInstanceTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Type, org.jetbrains.kotlin.metadata.DebugProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeOrBuilder>(
                  getIsInstanceType(),
                  getParentForChildren(),
                  isClean());
          isInstanceType_ = null;
        }
        return isInstanceTypeBuilder_;
      }

      private int isInstanceTypeId_ ;
      /**
       * <code>optional int32 is_instance_type_id = 5;</code>
       */
      public boolean hasIsInstanceTypeId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 is_instance_type_id = 5;</code>
       */
      public int getIsInstanceTypeId() {
        return isInstanceTypeId_;
      }
      /**
       * <code>optional int32 is_instance_type_id = 5;</code>
       */
      public Builder setIsInstanceTypeId(int value) {
        bitField0_ |= 0x00000010;
        isInstanceTypeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_instance_type_id = 5;</code>
       */
      public Builder clearIsInstanceTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isInstanceTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> andArgument_ =
        java.util.Collections.emptyList();
      private void ensureAndArgumentIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          andArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>(andArgument_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> andArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getAndArgumentList() {
        if (andArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(andArgument_);
        } else {
          return andArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public int getAndArgumentCount() {
        if (andArgumentBuilder_ == null) {
          return andArgument_.size();
        } else {
          return andArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getAndArgument(int index) {
        if (andArgumentBuilder_ == null) {
          return andArgument_.get(index);
        } else {
          return andArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.set(index, value);
          onChanged();
        } else {
          andArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder addAndArgument(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.add(value);
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.add(index, value);
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder addAndArgument(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.add(builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder addAllAndArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> values) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, andArgument_);
          onChanged();
        } else {
          andArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder clearAndArgument() {
        if (andArgumentBuilder_ == null) {
          andArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          andArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public Builder removeAndArgument(int index) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.remove(index);
          onChanged();
        } else {
          andArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder getAndArgumentBuilder(
          int index) {
        return getAndArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
          int index) {
        if (andArgumentBuilder_ == null) {
          return andArgument_.get(index);  } else {
          return andArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
           getAndArgumentOrBuilderList() {
        if (andArgumentBuilder_ != null) {
          return andArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(andArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addAndArgumentBuilder() {
        return getAndArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addAndArgumentBuilder(
          int index) {
        return getAndArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder> 
           getAndArgumentBuilderList() {
        return getAndArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
          getAndArgumentFieldBuilder() {
        if (andArgumentBuilder_ == null) {
          andArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder>(
                  andArgument_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          andArgument_ = null;
        }
        return andArgumentBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> orArgument_ =
        java.util.Collections.emptyList();
      private void ensureOrArgumentIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          orArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression>(orArgument_);
          bitField0_ |= 0x00000040;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> orArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> getOrArgumentList() {
        if (orArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(orArgument_);
        } else {
          return orArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public int getOrArgumentCount() {
        if (orArgumentBuilder_ == null) {
          return orArgument_.size();
        } else {
          return orArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression getOrArgument(int index) {
        if (orArgumentBuilder_ == null) {
          return orArgument_.get(index);
        } else {
          return orArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.set(index, value);
          onChanged();
        } else {
          orArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder addOrArgument(org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.add(value);
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.add(index, value);
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder addOrArgument(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.add(builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder addAllOrArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression> values) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, orArgument_);
          onChanged();
        } else {
          orArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder clearOrArgument() {
        if (orArgumentBuilder_ == null) {
          orArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          orArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public Builder removeOrArgument(int index) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.remove(index);
          onChanged();
        } else {
          orArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder getOrArgumentBuilder(
          int index) {
        return getOrArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
          int index) {
        if (orArgumentBuilder_ == null) {
          return orArgument_.get(index);  } else {
          return orArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
           getOrArgumentOrBuilderList() {
        if (orArgumentBuilder_ != null) {
          return orArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(orArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addOrArgumentBuilder() {
        return getOrArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder addOrArgumentBuilder(
          int index) {
        return getOrArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       *
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder> 
           getOrArgumentBuilderList() {
        return getOrArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder> 
          getOrArgumentFieldBuilder() {
        if (orArgumentBuilder_ == null) {
          orArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression, org.jetbrains.kotlin.metadata.DebugProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.ExpressionOrBuilder>(
                  orArgument_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          orArgument_ = null;
        }
        return orArgumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Expression)
    }

    static {
      defaultInstance = new Expression(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Expression)
  }

  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&core/metadata/src/metadata.debug.proto" +
      "\022\035org.jetbrains.kotlin.metadata\032)core/me" +
      "tadata/src/ext_options.debug.proto\"\035\n\013St" +
      "ringTable\022\016\n\006string\030\001 \003(\t\"\276\002\n\022QualifiedN" +
      "ameTable\022W\n\016qualified_name\030\001 \003(\0132?.org.j" +
      "etbrains.kotlin.metadata.QualifiedNameTa" +
      "ble.QualifiedName\032\316\001\n\rQualifiedName\022!\n\025p" +
      "arent_qualified_name\030\001 \001(\005:\002-1\022\022\n\nshort_" +
      "name\030\002 \002(\005\022[\n\004kind\030\003 \001(\0162D.org.jetbrains" +
      ".kotlin.metadata.QualifiedNameTable.Qual",
      "ifiedName.Kind:\007PACKAGE\")\n\004Kind\022\t\n\005CLASS" +
      "\020\000\022\013\n\007PACKAGE\020\001\022\t\n\005LOCAL\020\002\"\342\005\n\nAnnotatio" +
      "n\022\020\n\002id\030\001 \002(\005B\004\220\265\030\001\022D\n\010argument\030\002 \003(\01322." +
      "org.jetbrains.kotlin.metadata.Annotation" +
      ".Argument\032\373\004\n\010Argument\022\025\n\007name_id\030\001 \002(\005B" +
      "\004\210\265\030\001\022G\n\005value\030\002 \002(\01328.org.jetbrains.kot" +
      "lin.metadata.Annotation.Argument.Value\032\216" +
      "\004\n\005Value\022K\n\004type\030\001 \001(\0162=.org.jetbrains.k" +
      "otlin.metadata.Annotation.Argument.Value" +
      ".Type\022\021\n\tint_value\030\002 \001(\022\022\023\n\013float_value\030",
      "\003 \001(\002\022\024\n\014double_value\030\004 \001(\001\022\032\n\014string_va" +
      "lue\030\005 \001(\005B\004\230\265\030\001\022\026\n\010class_id\030\006 \001(\005B\004\220\265\030\001\022" +
      "\033\n\renum_value_id\030\007 \001(\005B\004\210\265\030\001\022=\n\nannotati" +
      "on\030\010 \001(\0132).org.jetbrains.kotlin.metadata" +
      ".Annotation\022O\n\rarray_element\030\t \003(\01328.org" +
      ".jetbrains.kotlin.metadata.Annotation.Ar" +
      "gument.Value\"\230\001\n\004Type\022\010\n\004BYTE\020\000\022\010\n\004CHAR\020" +
      "\001\022\t\n\005SHORT\020\002\022\007\n\003INT\020\003\022\010\n\004LONG\020\004\022\t\n\005FLOAT" +
      "\020\005\022\n\n\006DOUBLE\020\006\022\013\n\007BOOLEAN\020\007\022\n\n\006STRING\020\010\022" +
      "\t\n\005CLASS\020\t\022\010\n\004ENUM\020\n\022\016\n\nANNOTATION\020\013\022\t\n\005",
      "ARRAY\020\014\"\373\005\n\004Type\022>\n\010argument\030\002 \003(\0132,.org" +
      ".jetbrains.kotlin.metadata.Type.Argument" +
      "\022\027\n\010nullable\030\003 \001(\010:\005false\022+\n\035flexible_ty" +
      "pe_capabilities_id\030\004 \001(\005B\004\230\265\030\001\022A\n\024flexib" +
      "le_upper_bound\030\005 \001(\0132#.org.jetbrains.kot" +
      "lin.metadata.Type\022\037\n\027flexible_upper_boun" +
      "d_id\030\010 \001(\005\022\030\n\nclass_name\030\006 \001(\005B\004\220\265\030\001\022\026\n\016" +
      "type_parameter\030\007 \001(\005\022!\n\023type_parameter_n" +
      "ame\030\t \001(\005B\004\210\265\030\001\022\035\n\017type_alias_name\030\014 \001(\005" +
      "B\004\220\265\030\001\0227\n\nouter_type\030\n \001(\0132#.org.jetbrai",
      "ns.kotlin.metadata.Type\022\025\n\router_type_id" +
      "\030\013 \001(\005\022=\n\020abbreviated_type\030\r \001(\0132#.org.j" +
      "etbrains.kotlin.metadata.Type\022\033\n\023abbrevi" +
      "ated_type_id\030\016 \001(\005\022\r\n\005flags\030\001 \001(\005\032\322\001\n\010Ar" +
      "gument\022P\n\nprojection\030\001 \001(\01627.org.jetbrai" +
      "ns.kotlin.metadata.Type.Argument.Project" +
      "ion:\003INV\0221\n\004type\030\002 \001(\0132#.org.jetbrains.k" +
      "otlin.metadata.Type\022\017\n\007type_id\030\003 \001(\005\"0\n\n" +
      "Projection\022\006\n\002IN\020\000\022\007\n\003OUT\020\001\022\007\n\003INV\020\002\022\010\n\004" +
      "STAR\020\003*\005\010d\020\310\001\"\230\002\n\rTypeParameter\022\n\n\002id\030\001 ",
      "\002(\005\022\022\n\004name\030\002 \002(\005B\004\210\265\030\001\022\026\n\007reified\030\003 \001(\010" +
      ":\005false\022L\n\010variance\030\004 \001(\01625.org.jetbrain" +
      "s.kotlin.metadata.TypeParameter.Variance" +
      ":\003INV\0228\n\013upper_bound\030\005 \003(\0132#.org.jetbrai" +
      "ns.kotlin.metadata.Type\022\032\n\016upper_bound_i" +
      "d\030\006 \003(\005B\002\020\001\"$\n\010Variance\022\006\n\002IN\020\000\022\007\n\003OUT\020\001" +
      "\022\007\n\003INV\020\002*\005\010d\020\350\007\"\244\007\n\005Class\022\020\n\005flags\030\001 \001(" +
      "\005:\0016\022\025\n\007fq_name\030\003 \002(\005B\004\220\265\030\001\022#\n\025companion" +
      "_object_name\030\004 \001(\005B\004\210\265\030\001\022D\n\016type_paramet" +
      "er\030\005 \003(\0132,.org.jetbrains.kotlin.metadata",
      ".TypeParameter\0226\n\tsupertype\030\006 \003(\0132#.org." +
      "jetbrains.kotlin.metadata.Type\022\030\n\014supert" +
      "ype_id\030\002 \003(\005B\002\020\001\022!\n\021nested_class_name\030\007 " +
      "\003(\005B\006\020\001\210\265\030\001\022?\n\013constructor\030\010 \003(\0132*.org.j" +
      "etbrains.kotlin.metadata.Constructor\0229\n\010" +
      "function\030\t \003(\0132\'.org.jetbrains.kotlin.me" +
      "tadata.Function\0229\n\010property\030\n \003(\0132\'.org." +
      "jetbrains.kotlin.metadata.Property\022<\n\nty" +
      "pe_alias\030\013 \003(\0132(.org.jetbrains.kotlin.me" +
      "tadata.TypeAlias\022<\n\nenum_entry\030\r \003(\0132(.o",
      "rg.jetbrains.kotlin.metadata.EnumEntry\022\'" +
      "\n\027sealed_subclass_fq_name\030\020 \003(\005B\006\020\001\220\265\030\001\022" +
      "<\n\ntype_table\030\036 \001(\0132(.org.jetbrains.kotl" +
      "in.metadata.TypeTable\022\033\n\023version_require" +
      "ment\030\037 \001(\005\022Y\n\031version_requirement_table\030" +
      "  \001(\01326.org.jetbrains.kotlin.metadata.Ve" +
      "rsionRequirementTable\"x\n\004Kind\022\t\n\005CLASS\020\000" +
      "\022\r\n\tINTERFACE\020\001\022\016\n\nENUM_CLASS\020\002\022\016\n\nENUM_" +
      "ENTRY\020\003\022\024\n\020ANNOTATION_CLASS\020\004\022\n\n\006OBJECT\020" +
      "\005\022\024\n\020COMPANION_OBJECT\020\006*\006\010d\020\270\224\001\"\335\002\n\007Pack",
      "age\0229\n\010function\030\003 \003(\0132\'.org.jetbrains.ko" +
      "tlin.metadata.Function\0229\n\010property\030\004 \003(\013" +
      "2\'.org.jetbrains.kotlin.metadata.Propert" +
      "y\022<\n\ntype_alias\030\005 \003(\0132(.org.jetbrains.ko" +
      "tlin.metadata.TypeAlias\022<\n\ntype_table\030\036 " +
      "\001(\0132(.org.jetbrains.kotlin.metadata.Type" +
      "Table\022Y\n\031version_requirement_table\030  \001(\013" +
      "26.org.jetbrains.kotlin.metadata.Version" +
      "RequirementTable*\005\010d\020\310\001\"Z\n\tTypeTable\0221\n\004" +
      "type\030\001 \003(\0132#.org.jetbrains.kotlin.metada",
      "ta.Type\022\032\n\016first_nullable\030\002 \001(\005:\002-1\"\214\001\n\013" +
      "Constructor\022\020\n\005flags\030\001 \001(\005:\0016\022F\n\017value_p" +
      "arameter\030\002 \003(\0132-.org.jetbrains.kotlin.me" +
      "tadata.ValueParameter\022\033\n\023version_require" +
      "ment\030\037 \001(\005*\006\010d\020\270\224\001\"\232\004\n\010Function\022\020\n\005flags" +
      "\030\t \001(\005:\0016\022\024\n\told_flags\030\001 \001(\005:\0016\022\022\n\004name\030" +
      "\002 \002(\005B\004\210\265\030\001\0228\n\013return_type\030\003 \001(\0132#.org.j" +
      "etbrains.kotlin.metadata.Type\022\026\n\016return_" +
      "type_id\030\007 \001(\005\022D\n\016type_parameter\030\004 \003(\0132,." +
      "org.jetbrains.kotlin.metadata.TypeParame",
      "ter\022:\n\rreceiver_type\030\005 \001(\0132#.org.jetbrai" +
      "ns.kotlin.metadata.Type\022\030\n\020receiver_type" +
      "_id\030\010 \001(\005\022F\n\017value_parameter\030\006 \003(\0132-.org" +
      ".jetbrains.kotlin.metadata.ValueParamete" +
      "r\022<\n\ntype_table\030\036 \001(\0132(.org.jetbrains.ko" +
      "tlin.metadata.TypeTable\022\033\n\023version_requi" +
      "rement\030\037 \001(\005\0229\n\010contract\030  \001(\0132\'.org.jet" +
      "brains.kotlin.metadata.Contract*\006\010d\020\270\224\001\"" +
      "\331\003\n\010Property\022\022\n\005flags\030\013 \001(\005:\003518\022\027\n\told_" +
      "flags\030\001 \001(\005:\0042054\022\022\n\004name\030\002 \002(\005B\004\210\265\030\001\0228\n",
      "\013return_type\030\003 \001(\0132#.org.jetbrains.kotli" +
      "n.metadata.Type\022\026\n\016return_type_id\030\t \001(\005\022" +
      "D\n\016type_parameter\030\004 \003(\0132,.org.jetbrains." +
      "kotlin.metadata.TypeParameter\022:\n\rreceive" +
      "r_type\030\005 \001(\0132#.org.jetbrains.kotlin.meta" +
      "data.Type\022\030\n\020receiver_type_id\030\n \001(\005\022M\n\026s" +
      "etter_value_parameter\030\006 \001(\0132-.org.jetbra" +
      "ins.kotlin.metadata.ValueParameter\022\024\n\014ge" +
      "tter_flags\030\007 \001(\005\022\024\n\014setter_flags\030\010 \001(\005\022\033" +
      "\n\023version_requirement\030\037 \001(\005*\006\010d\020\270\224\001\"\343\001\n\016",
      "ValueParameter\022\020\n\005flags\030\001 \001(\005:\0010\022\022\n\004name" +
      "\030\002 \002(\005B\004\210\265\030\001\0221\n\004type\030\003 \001(\0132#.org.jetbrai" +
      "ns.kotlin.metadata.Type\022\017\n\007type_id\030\005 \001(\005" +
      "\022@\n\023vararg_element_type\030\004 \001(\0132#.org.jetb" +
      "rains.kotlin.metadata.Type\022\036\n\026vararg_ele" +
      "ment_type_id\030\006 \001(\005*\005\010d\020\310\001\"\212\003\n\tTypeAlias\022" +
      "\020\n\005flags\030\001 \001(\005:\0016\022\022\n\004name\030\002 \002(\005B\004\210\265\030\001\022D\n" +
      "\016type_parameter\030\003 \003(\0132,.org.jetbrains.ko" +
      "tlin.metadata.TypeParameter\022<\n\017underlyin" +
      "g_type\030\004 \001(\0132#.org.jetbrains.kotlin.meta",
      "data.Type\022\032\n\022underlying_type_id\030\005 \001(\005\022:\n" +
      "\rexpanded_type\030\006 \001(\0132#.org.jetbrains.kot" +
      "lin.metadata.Type\022\030\n\020expanded_type_id\030\007 " +
      "\001(\005\022=\n\nannotation\030\010 \003(\0132).org.jetbrains." +
      "kotlin.metadata.Annotation\022\033\n\023version_re" +
      "quirement\030\037 \001(\005*\005\010d\020\310\001\"&\n\tEnumEntry\022\022\n\004n" +
      "ame\030\001 \001(\005B\004\210\265\030\001*\005\010d\020\310\001\"\225\003\n\022VersionRequir" +
      "ement\022\017\n\007version\030\001 \001(\005\022\024\n\014version_full\030\002" +
      " \001(\005\022M\n\005level\030\003 \001(\01627.org.jetbrains.kotl" +
      "in.metadata.VersionRequirement.Level:\005ER",
      "ROR\022\022\n\nerror_code\030\004 \001(\005\022\025\n\007message\030\005 \001(\005" +
      "B\004\230\265\030\001\022e\n\014version_kind\030\006 \001(\0162=.org.jetbr" +
      "ains.kotlin.metadata.VersionRequirement." +
      "VersionKind:\020LANGUAGE_VERSION\"+\n\005Level\022\013" +
      "\n\007WARNING\020\000\022\t\n\005ERROR\020\001\022\n\n\006HIDDEN\020\002\"J\n\013Ve" +
      "rsionKind\022\024\n\020LANGUAGE_VERSION\020\000\022\024\n\020COMPI" +
      "LER_VERSION\020\001\022\017\n\013API_VERSION\020\002\"a\n\027Versio" +
      "nRequirementTable\022F\n\013requirement\030\001 \003(\01321" +
      ".org.jetbrains.kotlin.metadata.VersionRe" +
      "quirement\"\217\002\n\017PackageFragment\022;\n\007strings",
      "\030\001 \001(\0132*.org.jetbrains.kotlin.metadata.S" +
      "tringTable\022J\n\017qualified_names\030\002 \001(\01321.or" +
      "g.jetbrains.kotlin.metadata.QualifiedNam" +
      "eTable\0227\n\007package\030\003 \001(\0132&.org.jetbrains." +
      "kotlin.metadata.Package\0223\n\005class\030\004 \003(\0132$" +
      ".org.jetbrains.kotlin.metadata.Class*\005\010d" +
      "\020\310\001\"A\n\010Contract\0225\n\006effect\030\001 \003(\0132%.org.je" +
      "tbrains.kotlin.metadata.Effect\"\306\003\n\006Effec" +
      "t\022E\n\013effect_type\030\001 \001(\01620.org.jetbrains.k" +
      "otlin.metadata.Effect.EffectType\022N\n\033effe",
      "ct_constructor_argument\030\002 \003(\0132).org.jetb" +
      "rains.kotlin.metadata.Expression\022S\n conc" +
      "lusion_of_conditional_effect\030\003 \001(\0132).org" +
      ".jetbrains.kotlin.metadata.Expression\022B\n" +
      "\004kind\030\004 \001(\01624.org.jetbrains.kotlin.metad" +
      "ata.Effect.InvocationKind\"C\n\nEffectType\022" +
      "\024\n\020RETURNS_CONSTANT\020\000\022\t\n\005CALLS\020\001\022\024\n\020RETU" +
      "RNS_NOT_NULL\020\002\"G\n\016InvocationKind\022\020\n\014AT_M" +
      "OST_ONCE\020\000\022\020\n\014EXACTLY_ONCE\020\001\022\021\n\rAT_LEAST" +
      "_ONCE\020\002\"\237\003\n\nExpression\022\020\n\005flags\030\001 \001(\005:\0010",
      "\022!\n\031value_parameter_reference\030\002 \001(\005\022O\n\016c" +
      "onstant_value\030\003 \001(\01627.org.jetbrains.kotl" +
      "in.metadata.Expression.ConstantValue\022=\n\020" +
      "is_instance_type\030\004 \001(\0132#.org.jetbrains.k" +
      "otlin.metadata.Type\022\033\n\023is_instance_type_" +
      "id\030\005 \001(\005\022?\n\014and_argument\030\006 \003(\0132).org.jet" +
      "brains.kotlin.metadata.Expression\022>\n\013or_" +
      "argument\030\007 \003(\0132).org.jetbrains.kotlin.me" +
      "tadata.Expression\".\n\rConstantValue\022\010\n\004TR" +
      "UE\020\000\022\t\n\005FALSE\020\001\022\010\n\004NULL\020\002*9\n\010Modality\022\t\n",
      "\005FINAL\020\000\022\010\n\004OPEN\020\001\022\014\n\010ABSTRACT\020\002\022\n\n\006SEAL" +
      "ED\020\003*b\n\nVisibility\022\014\n\010INTERNAL\020\000\022\013\n\007PRIV" +
      "ATE\020\001\022\r\n\tPROTECTED\020\002\022\n\n\006PUBLIC\020\003\022\023\n\017PRIV" +
      "ATE_TO_THIS\020\004\022\t\n\005LOCAL\020\005*Q\n\nMemberKind\022\017" +
      "\n\013DECLARATION\020\000\022\021\n\rFAKE_OVERRIDE\020\001\022\016\n\nDE" +
      "LEGATION\020\002\022\017\n\013SYNTHESIZED\020\003B\017B\rDebugProt" +
      "oBuf"
    };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public org.jetbrains.kotlin.protobuf.ExtensionRegistry assignDescriptors(
              org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.getDescriptor(),
        }, assigner);
    internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor,
        new java.lang.String[] { "String", });
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor,
        new java.lang.String[] { "QualifiedName", });
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor,
        new java.lang.String[] { "ParentQualifiedName", "ShortName", "Kind", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor,
        new java.lang.String[] { "Id", "Argument", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor,
        new java.lang.String[] { "NameId", "Value", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor,
        new java.lang.String[] { "Type", "IntValue", "FloatValue", "DoubleValue", "StringValue", "ClassId", "EnumValueId", "Annotation", "ArrayElement", });
    internal_static_org_jetbrains_kotlin_metadata_Type_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Type_descriptor,
        new java.lang.String[] { "Argument", "Nullable", "FlexibleTypeCapabilitiesId", "FlexibleUpperBound", "FlexibleUpperBoundId", "ClassName", "TypeParameter", "TypeParameterName", "TypeAliasName", "OuterType", "OuterTypeId", "AbbreviatedType", "AbbreviatedTypeId", "Flags", });
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Type_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor,
        new java.lang.String[] { "Projection", "Type", "TypeId", });
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor,
        new java.lang.String[] { "Id", "Name", "Reified", "Variance", "UpperBound", "UpperBoundId", });
    internal_static_org_jetbrains_kotlin_metadata_Class_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Class_descriptor,
        new java.lang.String[] { "Flags", "FqName", "CompanionObjectName", "TypeParameter", "Supertype", "SupertypeId", "NestedClassName", "Constructor", "Function", "Property", "TypeAlias", "EnumEntry", "SealedSubclassFqName", "TypeTable", "VersionRequirement", "VersionRequirementTable", });
    internal_static_org_jetbrains_kotlin_metadata_Package_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Package_descriptor,
        new java.lang.String[] { "Function", "Property", "TypeAlias", "TypeTable", "VersionRequirementTable", });
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor,
        new java.lang.String[] { "Type", "FirstNullable", });
    internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor,
        new java.lang.String[] { "Flags", "ValueParameter", "VersionRequirement", });
    internal_static_org_jetbrains_kotlin_metadata_Function_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Function_descriptor,
        new java.lang.String[] { "Flags", "OldFlags", "Name", "ReturnType", "ReturnTypeId", "TypeParameter", "ReceiverType", "ReceiverTypeId", "ValueParameter", "TypeTable", "VersionRequirement", "Contract", });
    internal_static_org_jetbrains_kotlin_metadata_Property_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Property_descriptor,
        new java.lang.String[] { "Flags", "OldFlags", "Name", "ReturnType", "ReturnTypeId", "TypeParameter", "ReceiverType", "ReceiverTypeId", "SetterValueParameter", "GetterFlags", "SetterFlags", "VersionRequirement", });
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor,
        new java.lang.String[] { "Flags", "Name", "Type", "TypeId", "VarargElementType", "VarargElementTypeId", });
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor,
        new java.lang.String[] { "Flags", "Name", "TypeParameter", "UnderlyingType", "UnderlyingTypeId", "ExpandedType", "ExpandedTypeId", "Annotation", "VersionRequirement", });
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor,
        new java.lang.String[] { "Name", });
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor,
        new java.lang.String[] { "Version", "VersionFull", "Level", "ErrorCode", "Message", "VersionKind", });
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor,
        new java.lang.String[] { "Requirement", });
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor,
        new java.lang.String[] { "Strings", "QualifiedNames", "Package", "Class_", });
    internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor,
        new java.lang.String[] { "Effect", });
    internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor,
        new java.lang.String[] { "EffectType", "EffectConstructorArgument", "ConclusionOfConditionalEffect", "Kind", });
    internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor,
        new java.lang.String[] { "Flags", "ValueParameterReference", "ConstantValue", "IsInstanceType", "IsInstanceTypeId", "AndArgument", "OrArgument", });
    org.jetbrains.kotlin.protobuf.ExtensionRegistry registry =
        org.jetbrains.kotlin.protobuf.ExtensionRegistry.newInstance();
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.stringIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.stringIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.stringIdInTable);
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    org.jetbrains.kotlin.metadata.DebugExtOptionsProtoBuf.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}