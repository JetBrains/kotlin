KtFile: 'ClassNameBeforeOneUnsresolvedClassWithTwoResolved.kt'
  null

KtPackageDirective(0,0): ''
  null

KtImportList(0,0): ''
  null

KtClass(1,28): 'class Foo {'
  null

KtClassBody(11,28): '{'
  null

KtClass(17,26): 'class Bar'
  null

KtClass(30,67): 'class C {'
  null

KtClassBody(38,67): '{'
  null

KtProperty(44,65): 'val prop: Foo.Bar.Baz'
  null

KtTypeReference(54,65): 'Foo.Bar.Baz'
  null

KtUserType(54,65): 'Foo.Bar.Baz'
  null

KtUserType(54,61): 'Foo.Bar'
  null

KtUserType(54,57): 'Foo'
  null

KtNameReferenceExpression(54,57): 'Foo'
  null

KtNameReferenceExpression(58,61): 'Bar'
  null

KtNameReferenceExpression(62,65): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference: Baz>

KtNamedFunction(69,117): 'fun testFun() {'
  null

KtParameterList(80,82): '()'
  null

KtBlockExpression(83,117): '{'
  null

KtProperty(89,115): 'val localProp: Foo.Bar.Baz'
  null

KtTypeReference(104,115): 'Foo.Bar.Baz'
  null

KtUserType(104,115): 'Foo.Bar.Baz'
  null

KtUserType(104,111): 'Foo.Bar'
  null

KtUserType(104,107): 'Foo'
  null

KtNameReferenceExpression(104,107): 'Foo'
  null

KtNameReferenceExpression(108,111): 'Bar'
  null

KtNameReferenceExpression(112,115): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference: Baz>

KtNamedFunction(119,155): 'fun <T> take(action: (T) -> Unit) {}'
  null

KtTypeParameterList(123,126): '<T>'
  null

KtTypeParameter(124,125): 'T'
  null

KtParameterList(131,152): '(action: (T) -> Unit)'
  null

KtParameter(132,151): 'action: (T) -> Unit'
  null

KtTypeReference(140,151): '(T) -> Unit'
  null

KtFunctionType(140,151): '(T) -> Unit'
  null

KtParameterList(140,143): '(T)'
  null

KtParameter(141,142): 'T'
  null

KtTypeReference(141,142): 'T'
  null

KtUserType(141,142): 'T'
  null

KtNameReferenceExpression(141,142): 'T'
  null

KtTypeReference(147,151): 'Unit'
  null

KtUserType(147,151): 'Unit'
  null

KtNameReferenceExpression(147,151): 'Unit'
  null

KtBlockExpression(153,155): '{}'
  null

KtProperty(157,208): 'val prop = take {'
  null

KtCallExpression(168,208): 'take {'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = kotlin.Function1<ERROR_TYPE, kotlin.Unit>
            symbol = action: kotlin.Function1<T, kotlin.Unit>
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = kotlin.Function1<ERROR_TYPE, kotlin.Unit>
                symbol = action: kotlin.Function1<T, kotlin.Unit>
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR_TYPE)
        }
    ]
    diagnostic = ERROR<UNRESOLVED_REFERENCE: OTHER_ERROR with take>

KtNameReferenceExpression(168,172): 'take'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = kotlin.Function1<ERROR_TYPE, kotlin.Unit>
            symbol = action: kotlin.Function1<T, kotlin.Unit>
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = kotlin.Function1<ERROR_TYPE, kotlin.Unit>
                symbol = action: kotlin.Function1<T, kotlin.Unit>
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR_TYPE)
        }
    ]
    diagnostic = ERROR<UNRESOLVED_REFERENCE: OTHER_ERROR with take>

KtLambdaArgument(173,208): '{'
  null

KtLambdaExpression(173,208): '{'
  null

KtFunctionLiteral(173,208): '{'
  null

KtParameterList(179,203): 'lambdaParam: Foo.Bar.Baz'
  null

KtParameter(179,203): 'lambdaParam: Foo.Bar.Baz'
  null

KtTypeReference(192,203): 'Foo.Bar.Baz'
  null

KtUserType(192,203): 'Foo.Bar.Baz'
  null

KtUserType(192,199): 'Foo.Bar'
  null

KtUserType(192,195): 'Foo'
  null

KtNameReferenceExpression(192,195): 'Foo'
  null

KtNameReferenceExpression(196,199): 'Bar'
  null

KtNameReferenceExpression(200,203): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference: Baz>

KtBlockExpression(207,207): ''
  null