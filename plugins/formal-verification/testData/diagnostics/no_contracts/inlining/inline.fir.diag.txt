/inline.kt:(230,239): info: Generated Viper text for quadruple:
method global$fun_quadruple$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  var ret$1: Ref
  var local1$y: Ref
  var anonymous$1: Ref
  var ret$2: Ref
  var local2$y: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  local1$y := special$plusInts(local$x, local$x)
  ret$1 := local1$y
  goto label$ret$1
  label label$ret$1
  anonymous$0 := ret$1
  local2$y := special$plusInts(local$x, local$x)
  ret$2 := local2$y
  goto label$ret$2
  label label$ret$2
  anonymous$1 := ret$2
  ret$0 := special$plusInts(anonymous$0, anonymous$1)
  goto label$ret$0
  label label$ret$0
}

/inline.kt:(469,481): info: Generated Viper text for useBranching:
method global$fun_useBranching$fun_take$$return$T_Int()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$2: Ref
  var ret$1: Ref
  var anonymous$0: Ref
  var anonymous$3: Ref
  var ret$2: Ref
  var anonymous$1: Ref
  anonymous$0 := dom$RuntimeType$boolToRef(false)
  if (dom$RuntimeType$boolFromRef(anonymous$0)) {
    ret$1 := dom$RuntimeType$intToRef(1)
    goto label$ret$1
  } else {
    ret$1 := dom$RuntimeType$intToRef(0)
    goto label$ret$1
  }
  label label$ret$1
  anonymous$2 := ret$1
  anonymous$1 := dom$RuntimeType$boolToRef(true)
  if (dom$RuntimeType$boolFromRef(anonymous$1)) {
    ret$2 := dom$RuntimeType$intToRef(1)
    goto label$ret$2
  } else {
    ret$2 := dom$RuntimeType$intToRef(0)
    goto label$ret$2
  }
  label label$ret$2
  anonymous$3 := ret$2
  ret$0 := special$plusInts(anonymous$2, anonymous$3)
  goto label$ret$0
  label label$ret$0
}
