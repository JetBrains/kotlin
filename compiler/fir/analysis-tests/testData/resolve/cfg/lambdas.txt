FILE: lambdas.kt
    public final inline fun run(block: R|() -> kotlin/Unit|): R|kotlin/Unit| {
        R|<local>/block|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun test_1(x: R|kotlin/Any?|): R|kotlin/Unit| {
        when () {
            (R|<local>/x| is R|kotlin/Int|) ->  {
                R|/run|(<L> = run@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
                    ^ R|<local>/x|.R|kotlin/Int.inc|()
                }
                )
            }
        }

    }
    public final fun test_2(x: R|kotlin/Any?|): R|kotlin/Unit| {
        when () {
            (R|<local>/x| is R|kotlin/Int|) ->  {
                lval lambda: R|() -> kotlin/Int| = fun <anonymous>(): R|kotlin/Int| {
                    ^ R|<local>/x|.R|kotlin/Int.inc|()
                }

            }
        }

    }
    public final inline fun getInt(block: R|() -> kotlin/Unit|): R|kotlin/Int| {
        R|<local>/block|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
        ^getInt Int(1)
    }
    public final fun test_3(): R|kotlin/Int| {
        ^test_3 R|/getInt|(<L> = getInt@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^test_3 Int(1)
        }
        )
    }
    public final fun test_4(): R|kotlin/Int| {
        ^test_4 R|/getInt|(block = getInt@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^test_4 Int(1)
        }
        )
    }
