/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.wasm.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateWasmTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxWasmJsInterop")
@TestDataPath("$PROJECT_ROOT")
public class K1WasmCodegenWasmJsInteropTestGenerated extends AbstractK1WasmCodegenWasmJsInteropTest {
  @Test
  public void testAllFilesPresentInBoxWasmJsInterop() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/boxWasmJsInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.WASM, true);
  }

  @Test
  @TestMetadata("associatedExternalObject.kt")
  public void testAssociatedExternalObject() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/associatedExternalObject.kt");
  }

  @Test
  @TestMetadata("callingWasmDirectly.kt")
  public void testCallingWasmDirectly() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/callingWasmDirectly.kt");
  }

  @Test
  @TestMetadata("closureAdapterCaching.kt")
  public void testClosureAdapterCaching() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/closureAdapterCaching.kt");
  }

  @Test
  @TestMetadata("defaultValues.kt")
  public void testDefaultValues() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/defaultValues.kt");
  }

  @Test
  @TestMetadata("exceptionFromGlobalInitializer.kt")
  public void testExceptionFromGlobalInitializer() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromGlobalInitializer.kt");
  }

  @Test
  @TestMetadata("exceptionFromGlobalInitializerNewProposal.kt")
  public void testExceptionFromGlobalInitializerNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromGlobalInitializerNewProposal.kt");
  }

  @Test
  @TestMetadata("exceptionFromGlobalInitializerNoJsTag.kt")
  public void testExceptionFromGlobalInitializerNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromGlobalInitializerNoJsTag.kt");
  }

  @Test
  @TestMetadata("exceptionFromMain.kt")
  public void testExceptionFromMain() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromMain.kt");
  }

  @Test
  @TestMetadata("exceptionFromMainNewProposal.kt")
  public void testExceptionFromMainNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromMainNewProposal.kt");
  }

  @Test
  @TestMetadata("exceptionFromMainNoJsTag.kt")
  public void testExceptionFromMainNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/exceptionFromMainNoJsTag.kt");
  }

  @Test
  @TestMetadata("externalTypeOperators.kt")
  public void testExternalTypeOperators() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/externalTypeOperators.kt");
  }

  @Test
  @TestMetadata("externals.kt")
  public void testExternals() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/externals.kt");
  }

  @Test
  @TestMetadata("externalsWithUnsigned.kt")
  public void testExternalsWithUnsigned() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/externalsWithUnsigned.kt");
  }

  @Test
  @TestMetadata("functionTypes.kt")
  public void testFunctionTypes() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/functionTypes.kt");
  }

  @Test
  @TestMetadata("genericReturnsExternal.kt")
  public void testGenericReturnsExternal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/genericReturnsExternal.kt");
  }

  @Test
  @TestMetadata("imperativeWrapperInitialised.kt")
  public void testImperativeWrapperInitialised() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/imperativeWrapperInitialised.kt");
  }

  @Test
  @TestMetadata("imperativeWrapperUninitialised.kt")
  public void testImperativeWrapperUninitialised() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/imperativeWrapperUninitialised.kt");
  }

  @Test
  @TestMetadata("invariantLambdaAdapters.kt")
  public void testInvariantLambdaAdapters() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/invariantLambdaAdapters.kt");
  }

  @Test
  @TestMetadata("jsCode.kt")
  public void testJsCode() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsCode.kt");
  }

  @Test
  @TestMetadata("jsDelayedRuntimeQualifier.kt")
  public void testJsDelayedRuntimeQualifier() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsDelayedRuntimeQualifier.kt");
  }

  @Test
  @TestMetadata("jsException.kt")
  public void testJsException() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsException.kt");
  }

  @Test
  @TestMetadata("jsExceptionInSuspendFunction.kt")
  public void testJsExceptionInSuspendFunction() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionInSuspendFunction.kt");
  }

  @Test
  @TestMetadata("jsExceptionInSuspendFunctionNewProposal.kt")
  public void testJsExceptionInSuspendFunctionNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionInSuspendFunctionNewProposal.kt");
  }

  @Test
  @TestMetadata("jsExceptionInSuspendFunctionNoJsTag.kt")
  public void testJsExceptionInSuspendFunctionNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionInSuspendFunctionNoJsTag.kt");
  }

  @Test
  @TestMetadata("jsExceptionNewProposal.kt")
  public void testJsExceptionNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionNewProposal.kt");
  }

  @Test
  @TestMetadata("jsExceptionNewProposalNoJsTag.kt")
  public void testJsExceptionNewProposalNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionNewProposalNoJsTag.kt");
  }

  @Test
  @TestMetadata("jsExceptionNoJsTag.kt")
  public void testJsExceptionNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionNoJsTag.kt");
  }

  @Test
  @TestMetadata("jsExceptionThroughKotlin.kt")
  public void testJsExceptionThroughKotlin() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionThroughKotlin.kt");
  }

  @Test
  @TestMetadata("jsExceptionThroughKotlinNewProposal.kt")
  public void testJsExceptionThroughKotlinNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionThroughKotlinNewProposal.kt");
  }

  @Test
  @TestMetadata("jsExceptionThroughKotlinNoJsTag.kt")
  public void testJsExceptionThroughKotlinNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionThroughKotlinNoJsTag.kt");
  }

  @Test
  @TestMetadata("jsExceptionWithRunCatching.kt")
  public void testJsExceptionWithRunCatching() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionWithRunCatching.kt");
  }

  @Test
  @TestMetadata("jsExceptionWithRunCatchingNewProposal.kt")
  public void testJsExceptionWithRunCatchingNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionWithRunCatchingNewProposal.kt");
  }

  @Test
  @TestMetadata("jsExceptionWithRunCatchingNoJsTag.kt")
  public void testJsExceptionWithRunCatchingNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExceptionWithRunCatchingNoJsTag.kt");
  }

  @Test
  @TestMetadata("jsExport.kt")
  public void testJsExport() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExport.kt");
  }

  @Test
  @TestMetadata("jsExportParameterWithDefaultValue.kt")
  public void testJsExportParameterWithDefaultValue() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExportParameterWithDefaultValue.kt");
  }

  @Test
  @TestMetadata("jsExternalLibrariesImport.kt")
  public void testJsExternalLibrariesImport() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsExternalLibrariesImport.kt");
  }

  @Test
  @TestMetadata("jsModule.kt")
  public void testJsModule() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsModule.kt");
  }

  @Test
  @TestMetadata("jsModuleWithQualifier.kt")
  public void testJsModuleWithQualifier() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsModuleWithQualifier.kt");
  }

  @Test
  @TestMetadata("jsQualifier.kt")
  public void testJsQualifier() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsQualifier.kt");
  }

  @Test
  @TestMetadata("jsToKotlinAdapters.kt")
  public void testJsToKotlinAdapters() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsToKotlinAdapters.kt");
  }

  @Test
  @TestMetadata("jsTypes.kt")
  public void testJsTypes() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/jsTypes.kt");
  }

  @Test
  @TestMetadata("kotlinToJsAdapters.kt")
  public void testKotlinToJsAdapters() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/kotlinToJsAdapters.kt");
  }

  @Test
  @TestMetadata("kt59082.kt")
  public void testKt59082() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/kt59082.kt");
  }

  @Test
  @TestMetadata("kt59084.kt")
  public void testKt59084() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/kt59084.kt");
  }

  @Test
  @TestMetadata("lambdaAdapterNameClash.kt")
  public void testLambdaAdapterNameClash() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/lambdaAdapterNameClash.kt");
  }

  @Test
  @TestMetadata("longStrings.kt")
  public void testLongStrings() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/longStrings.kt");
  }

  @Test
  @TestMetadata("nameClash.kt")
  public void testNameClash() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/nameClash.kt");
  }

  @Test
  @TestMetadata("noExceptions.kt")
  public void testNoExceptions() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/noExceptions.kt");
  }

  @Test
  @TestMetadata("noKotlinCastForUnsafeCast.kt")
  public void testNoKotlinCastForUnsafeCast() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/noKotlinCastForUnsafeCast.kt");
  }

  @Test
  @TestMetadata("nullableExternRefs.kt")
  public void testNullableExternRefs() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/nullableExternRefs.kt");
  }

  @Test
  @TestMetadata("reflectionOnExternals.kt")
  public void testReflectionOnExternals() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/reflectionOnExternals.kt");
  }

  @Test
  @TestMetadata("types.kt")
  public void testTypes() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/types.kt");
  }

  @Test
  @TestMetadata("vararg.kt")
  public void testVararg() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/vararg.kt");
  }

  @Test
  @TestMetadata("wasmExport.kt")
  public void testWasmExport() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/wasmExport.kt");
  }

  @Test
  @TestMetadata("wasmExportWithExceptions.kt")
  public void testWasmExportWithExceptions() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/wasmExportWithExceptions.kt");
  }

  @Test
  @TestMetadata("wasmExportWithExceptionsNewProposal.kt")
  public void testWasmExportWithExceptionsNewProposal() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/wasmExportWithExceptionsNewProposal.kt");
  }

  @Test
  @TestMetadata("wasmExportWithExceptionsNoJsTag.kt")
  public void testWasmExportWithExceptionsNoJsTag() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/wasmExportWithExceptionsNoJsTag.kt");
  }

  @Test
  @TestMetadata("wasmImport.kt")
  public void testWasmImport() {
    runTest("compiler/testData/codegen/boxWasmJsInterop/wasmImport.kt");
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers")
  @TestDataPath("$PROJECT_ROOT")
  public class EscapedIdentifiers {
    @Test
    public void testAllFilesPresentInEscapedIdentifiers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("externalEscapedClassFields.kt")
    public void testExternalEscapedClassFields() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/externalEscapedClassFields.kt");
    }

    @Test
    @TestMetadata("externalEscapedTopLevel.kt")
    public void testExternalEscapedTopLevel() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/externalEscapedTopLevel.kt");
    }

    @Test
    @TestMetadata("topLevelExportedFunction.kt")
    public void testTopLevelExportedFunction() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/topLevelExportedFunction.kt");
    }

    @Test
    @TestMetadata("topLevelLocalClassMangling.kt")
    public void testTopLevelLocalClassMangling() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/topLevelLocalClassMangling.kt");
    }

    @Test
    @TestMetadata("topLevelLocalCompanionMangling.kt")
    public void testTopLevelLocalCompanionMangling() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/topLevelLocalCompanionMangling.kt");
    }

    @Test
    @TestMetadata("topLevelLocalFunctionMangling.kt")
    public void testTopLevelLocalFunctionMangling() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/topLevelLocalFunctionMangling.kt");
    }

    @Test
    @TestMetadata("topLevelLocalVariableMangling.kt")
    public void testTopLevelLocalVariableMangling() {
      runTest("compiler/testData/codegen/boxWasmJsInterop/escapedIdentifiers/topLevelLocalVariableMangling.kt");
    }
  }
}
