/private_properties.kt:(195,210): info: Generated Viper text for getBooleanField:
method class_A$fun_getBooleanField$fun_take$T_class_global$class_A$return$T_Boolean(this: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_A())
  inhale acc(T_class_global$class_A(this), wildcard)
  anonymous$0 := class_A$private$property_getter_field(this)
  ret$0 := anonymous$0
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  goto label$ret$0
  label label$ret$0
}

method class_A$private$property_getter_field(this: Ref) returns (ret: Ref)


method class_A$private$property_setter_field(this: Ref, value: Ref)
  returns (ret: Ref)


/private_properties.kt:(289,303): info: Generated Viper text for getStringField:
field class_B$private$backing_field_field: Ref

field public$backing_field_length: Ref

method class_A$private$property_getter_field(this: Ref) returns (ret: Ref)


method class_A$private$property_setter_field(this: Ref, value: Ref)
  returns (ret: Ref)


method class_B$fun_getStringField$fun_take$T_class_global$class_B$return$T_class_pkg$kotlin$global$class_String(this: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$T_class_pkg$kotlin$global$class_String())
  ensures acc(T_class_pkg$kotlin$global$class_String(ret$0), wildcard)
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_B())
  inhale acc(T_class_global$class_B(this), wildcard)
  unfold acc(T_class_global$class_B(this), wildcard)
  ret$0 := this.class_B$private$backing_field_field
  goto label$ret$0
  label label$ret$0
}

method public$property_getter_length(this: Ref) returns (ret: Ref)


/private_properties.kt:(471,484): info: Generated Viper text for extractPublic:
field class_B$private$backing_field_field: Ref

field public$backing_field_field: Ref

field public$backing_field_length: Ref

method class_A$private$property_getter_field(this: Ref) returns (ret: Ref)


method class_A$private$property_setter_field(this: Ref, value: Ref)
  returns (ret: Ref)


method class_C$constructor$fun_take$$return$T_class_global$class_C()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_C())
  ensures acc(T_class_global$class_C(ret), wildcard)
  ensures acc(Unique$T_class_global$class_C(ret), write)


method class_D$constructor$fun_take$$return$T_class_global$class_D()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_D())
  ensures acc(T_class_global$class_D(ret), wildcard)
  ensures acc(Unique$T_class_global$class_D(ret), write)


method global$fun_extractPublic$fun_take$$return$T_Boolean()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(ret$0) == false ==> false
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  anonymous$1 := class_C$constructor$fun_take$$return$T_class_global$class_C()
  inhale acc(anonymous$1.public$backing_field_field, write)
  anonymous$0 := anonymous$1.public$backing_field_field
  exhale acc(anonymous$1.public$backing_field_field, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())
  if (dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())) {
    var anonymous$2: Ref
    var anonymous$3: Ref
    anonymous$3 := class_D$constructor$fun_take$$return$T_class_global$class_D()
    unfold acc(T_class_global$class_D(anonymous$3), wildcard)
    anonymous$2 := anonymous$3.public$backing_field_field
    ret$0 := dom$RuntimeType$boolToRef(dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2),
      dom$RuntimeType$intType()))
  } else {
    ret$0 := dom$RuntimeType$boolToRef(false)}
  goto label$ret$0
  label label$ret$0
}

method public$property_getter_length(this: Ref) returns (ret: Ref)
