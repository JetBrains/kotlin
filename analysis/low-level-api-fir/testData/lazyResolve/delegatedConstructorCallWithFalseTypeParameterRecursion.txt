RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] Bar.kt
    public final? [ResolvedTo(RAW_FIR)] class Bar : Foo<BarT> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<BarT>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class BarT : Foo.T {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final? [ResolvedTo(RAW_FIR)] class Bar : Foo<BarT> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<BarT>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class BarT : Foo.T {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class Bar : Foo<BarT> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<BarT>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class BarT : Foo.T {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final? [ResolvedTo(COMPANION_GENERATION)] class Bar : Foo<BarT> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<BarT>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class BarT : Foo.T {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final? [ResolvedTo(SUPER_TYPES)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final? [ResolvedTo(TYPES)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(STATUS)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(CONTRACTS)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class Bar : R|Foo<BarT>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            LAZY_super<Foo<R|BarT|>>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] Bar.kt
    public final [ResolvedTo(BODY_RESOLVE)] class Bar : R|Foo<BarT>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            super<R|Foo<BarT>|>()
        }

    }
    public final? [ResolvedTo(TYPES)] class BarT : R|Foo.T| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            LAZY_super<<implicit>>
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] Bar.kt
    public final [ResolvedTo(BODY_RESOLVE)] class Bar : R|Foo<BarT>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Bar] constructor(): R|Bar| {
            super<R|Foo<BarT>|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class BarT : R|Foo.T| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BarT] constructor(): R|BarT| {
            super<R|kotlin/Any|>()
        }

    }
