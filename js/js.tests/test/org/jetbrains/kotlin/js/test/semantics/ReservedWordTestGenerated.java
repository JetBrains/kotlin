/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/reservedWords/cases")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ReservedWordTestGenerated extends AbstractReservedWordTest {
    public void testAllFilesPresentInCases() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/reservedWords/cases"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("dataClassValInfinity.kt")
    public void testDataClassValInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValKotlin.kt")
    public void testDataClassValKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValTrue.kt")
    public void testDataClassValTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValTry.kt")
    public void testDataClassValTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValTry.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarArguments.kt")
    public void testDataClassVarArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarNaN.kt")
    public void testDataClassVarNaN() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarNaN.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarTypeof.kt")
    public void testDataClassVarTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarVar.kt")
    public void testDataClassVarVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarVar.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunDelete.kt")
    public void testDelegatedFunDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunElse.kt")
    public void testDelegatedFunElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunElse.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunEnum.kt")
    public void testDelegatedFunEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunFalse.kt")
    public void testDelegatedFunFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamEval.kt")
    public void testDelegatedFunParamEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamEval.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamExport.kt")
    public void testDelegatedFunParamExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamExport.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamFor.kt")
    public void testDelegatedFunParamFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamFor.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamIf.kt")
    public void testDelegatedFunParamIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamIf.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelExtends.kt")
    public void testDelegatedLabelExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelFinally.kt")
    public void testDelegatedLabelFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelIn.kt")
    public void testDelegatedLabelIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelIn.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelInterface.kt")
    public void testDelegatedLabelInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValBreak.kt")
    public void testDelegatedValBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValCatch.kt")
    public void testDelegatedValCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValClass.kt")
    public void testDelegatedValClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValClass.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValConst.kt")
    public void testDelegatedValConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValConst.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarContinue.kt")
    public void testDelegatedVarContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarDebugger.kt")
    public void testDelegatedVarDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarDefault.kt")
    public void testDelegatedVarDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarDo.kt")
    public void testDelegatedVarDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarDo.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntrySwitch.kt")
    public void testEnumEntrySwitch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntrySwitch.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryUndefined.kt")
    public void testEnumEntryUndefined() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryUndefined.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryWhile.kt")
    public void testEnumEntryWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryYield.kt")
    public void testEnumEntryYield() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryYield.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunLet.kt")
    public void testEnumFunLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunLet.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunNew.kt")
    public void testEnumFunNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunNew.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamPrivate.kt")
    public void testEnumFunParamPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamProtected.kt")
    public void testEnumFunParamProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamTrue.kt")
    public void testEnumFunParamTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamTry.kt")
    public void testEnumFunParamTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamTry.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunThis.kt")
    public void testEnumFunThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunThis.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunThrow.kt")
    public void testEnumFunThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelPublic.kt")
    public void testEnumLabelPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelStatic.kt")
    public void testEnumLabelStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelTypeof.kt")
    public void testEnumLabelTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelVar.kt")
    public void testEnumLabelVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelVar.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValFunction.kt")
    public void testEnumValFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValImplements.kt")
    public void testEnumValImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValNull.kt")
    public void testEnumValNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValNull.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValPackage.kt")
    public void testEnumValPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarImport.kt")
    public void testEnumVarImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarImport.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarInstanceof.kt")
    public void testEnumVarInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarReturn.kt")
    public void testEnumVarReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarSuper.kt")
    public void testEnumVarSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunAwait.kt")
    public void testInsideClassFunAwait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunAwait.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunCase.kt")
    public void testInsideClassFunCase() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunCase.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamCatch.kt")
    public void testInsideClassFunParamCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamConst.kt")
    public void testInsideClassFunParamConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamConst.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamThis.kt")
    public void testInsideClassFunParamThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamThis.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamThrow.kt")
    public void testInsideClassFunParamThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunReturn.kt")
    public void testInsideClassFunReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunSuper.kt")
    public void testInsideClassFunSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelDebugger.kt")
    public void testInsideClassLabelDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelDefault.kt")
    public void testInsideClassLabelDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelTrue.kt")
    public void testInsideClassLabelTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelTry.kt")
    public void testInsideClassLabelTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelTry.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunBreak.kt")
    public void testInsideClassObjectFunBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunClass.kt")
    public void testInsideClassObjectFunClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunClass.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunExtends.kt")
    public void testInsideClassObjectFunExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunFinally.kt")
    public void testInsideClassObjectFunFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamContinue.kt")
    public void testInsideClassObjectFunParamContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamDo.kt")
    public void testInsideClassObjectFunParamDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamDo.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamFunction.kt")
    public void testInsideClassObjectFunParamFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamImplements.kt")
    public void testInsideClassObjectFunParamImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelElse.kt")
    public void testInsideClassObjectLabelElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelElse.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelFalse.kt")
    public void testInsideClassObjectLabelFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelImport.kt")
    public void testInsideClassObjectLabelImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelImport.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelInstanceof.kt")
    public void testInsideClassObjectLabelInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValDelete.kt")
    public void testInsideClassObjectValDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValEnum.kt")
    public void testInsideClassObjectValEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValTypeof.kt")
    public void testInsideClassObjectValTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValVar.kt")
    public void testInsideClassObjectValVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValVar.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarEval.kt")
    public void testInsideClassObjectVarEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarEval.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarExport.kt")
    public void testInsideClassObjectVarExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarExport.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarWhile.kt")
    public void testInsideClassObjectVarWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarYield.kt")
    public void testInsideClassObjectVarYield() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarYield.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValIn.kt")
    public void testInsideClassValIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValIn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValInfinity.kt")
    public void testInsideClassValInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValInterface.kt")
    public void testInsideClassValInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValKotlin.kt")
    public void testInsideClassValKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarArguments.kt")
    public void testInsideClassVarArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarNaN.kt")
    public void testInsideClassVarNaN() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarNaN.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarNull.kt")
    public void testInsideClassVarNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarNull.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarPackage.kt")
    public void testInsideClassVarPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunNull.kt")
    public void testInsideObjectFunNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunNull.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunPackage.kt")
    public void testInsideObjectFunPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamReturn.kt")
    public void testInsideObjectFunParamReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamSuper.kt")
    public void testInsideObjectFunParamSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamSwitch.kt")
    public void testInsideObjectFunParamSwitch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamSwitch.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamUndefined.kt")
    public void testInsideObjectFunParamUndefined() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamUndefined.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunPublic.kt")
    public void testInsideObjectFunPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunStatic.kt")
    public void testInsideObjectFunStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelThis.kt")
    public void testInsideObjectLabelThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelThis.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelThrow.kt")
    public void testInsideObjectLabelThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelVoid.kt")
    public void testInsideObjectLabelVoid() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelVoid.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelWith.kt")
    public void testInsideObjectLabelWith() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelWith.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValFor.kt")
    public void testInsideObjectValFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValFor.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValIf.kt")
    public void testInsideObjectValIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValIf.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValLet.kt")
    public void testInsideObjectValLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValLet.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValNew.kt")
    public void testInsideObjectValNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValNew.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarIn.kt")
    public void testInsideObjectVarIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarIn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarInterface.kt")
    public void testInsideObjectVarInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarPrivate.kt")
    public void testInsideObjectVarPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarProtected.kt")
    public void testInsideObjectVarProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchFor.kt")
    public void testLocalCatchFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchFor.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchIf.kt")
    public void testLocalCatchIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchIf.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchVoid.kt")
    public void testLocalCatchVoid() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchVoid.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchWith.kt")
    public void testLocalCatchWith() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchWith.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunBreak.kt")
    public void testLocalFunBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunClass.kt")
    public void testLocalFunClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunClass.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamContinue.kt")
    public void testLocalFunParamContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamDo.kt")
    public void testLocalFunParamDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamDo.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamPublic.kt")
    public void testLocalFunParamPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamStatic.kt")
    public void testLocalFunParamStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunPrivate.kt")
    public void testLocalFunPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunProtected.kt")
    public void testLocalFunProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelElse.kt")
    public void testLocalLabelElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelElse.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelFalse.kt")
    public void testLocalLabelFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelSwitch.kt")
    public void testLocalLabelSwitch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelSwitch.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelUndefined.kt")
    public void testLocalLabelUndefined() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelUndefined.kt");
        doTest(fileName);
    }

    @TestMetadata("localValImport.kt")
    public void testLocalValImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValImport.kt");
        doTest(fileName);
    }

    @TestMetadata("localValInstanceof.kt")
    public void testLocalValInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("localValTypeof.kt")
    public void testLocalValTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("localValVar.kt")
    public void testLocalValVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValVar.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarLet.kt")
    public void testLocalVarLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarLet.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarNew.kt")
    public void testLocalVarNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarNew.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarWhile.kt")
    public void testLocalVarWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarYield.kt")
    public void testLocalVarYield() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarYield.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassDelete.kt")
    public void testToplevelClassDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassEnum.kt")
    public void testToplevelClassEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassNull.kt")
    public void testToplevelClassNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassNull.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassPackage.kt")
    public void testToplevelClassPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumExtends.kt")
    public void testToplevelEnumExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumFinally.kt")
    public void testToplevelEnumFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumThis.kt")
    public void testToplevelEnumThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumThis.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumThrow.kt")
    public void testToplevelEnumThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunAwait.kt")
    public void testToplevelFunAwait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunAwait.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunCase.kt")
    public void testToplevelFunCase() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunCase.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunElse.kt")
    public void testToplevelFunElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunElse.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunFalse.kt")
    public void testToplevelFunFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamCatch.kt")
    public void testToplevelFunParamCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamConst.kt")
    public void testToplevelFunParamConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamConst.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamFor.kt")
    public void testToplevelFunParamFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamFor.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamIf.kt")
    public void testToplevelFunParamIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamIf.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceEval.kt")
    public void testToplevelInterfaceEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceEval.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceExport.kt")
    public void testToplevelInterfaceExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceExport.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceReturn.kt")
    public void testToplevelInterfaceReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceSuper.kt")
    public void testToplevelInterfaceSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelDebugger.kt")
    public void testToplevelLabelDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelDefault.kt")
    public void testToplevelLabelDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelIn.kt")
    public void testToplevelLabelIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelIn.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelInterface.kt")
    public void testToplevelLabelInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectFunction.kt")
    public void testToplevelObjectFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectImplements.kt")
    public void testToplevelObjectImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectTrue.kt")
    public void testToplevelObjectTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectTry.kt")
    public void testToplevelObjectTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectTry.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValBreak.kt")
    public void testToplevelValBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValClass.kt")
    public void testToplevelValClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValClass.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValInfinity.kt")
    public void testToplevelValInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValKotlin.kt")
    public void testToplevelValKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarArguments.kt")
    public void testToplevelVarArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarContinue.kt")
    public void testToplevelVarContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarDo.kt")
    public void testToplevelVarDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarDo.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarNaN.kt")
    public void testToplevelVarNaN() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarNaN.kt");
        doTest(fileName);
    }
}
