{
  "6": {
    "neg": {
      "12": [
        {
          "specVersion": "0.1-201",
          "casesNumber": 3,
          "description": "\u0027When\u0027 without bound value and with \u0027else\u0027 branch not in the last position.",
          "unexpectedBehaviour": false
        }
      ],
      "1": [
        {
          "specVersion": "0.1-296",
          "casesNumber": 1,
          "description": "\u0027When\u0027 with bound value and type test condition on the non-type operand of the type checking operator.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 3,
          "description": "\u0027When\u0027 with bound value and type test condition (without companion object in classes), but without type checking operator.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When type disjunctions",
          "path": "compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass val",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVal.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass var",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVar.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive enum mixed",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive enum is",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Top level sealed",
          "path": "compiler/testData/diagnostics/tests/when/TopLevelSealed.kt",
          "unexpectedBehaviour": false
        }
      ],
      "3": [
        {
          "specVersion": "0.1-296",
          "casesNumber": 1,
          "description": "\u0027When\u0027 with bound value and \u0027when condition\u0027 with range expression, but without containment checking operator.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and \u0027when condition\u0027 with contains operator and type without defined contains operator.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        }
      ],
      "7": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 3,
          "description": "\u0027When\u0027 with bound value and with else branch not in the last position.",
          "unexpectedBehaviour": false
        }
      ],
      "11": [
        {
          "specVersion": "0.1-201",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and non-expressions in \u0027when condition\u0027.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Redundant else",
          "path": "compiler/testData/diagnostics/tests/when/RedundantElse.kt",
          "unexpectedBehaviour": false
        }
      ],
      "5": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression enum",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive enum mixed",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt",
          "unexpectedBehaviour": false
        }
      ],
      "9": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        }
      ],
      "10": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Redundant else",
          "path": "compiler/testData/diagnostics/tests/when/RedundantElse.kt",
          "unexpectedBehaviour": false
        }
      ]
    },
    "pos": {
      "12": [
        {
          "specVersion": "0.1-201",
          "casesNumber": 2,
          "description": "\u0027When\u0027 without bound value and with else branch in the last position.",
          "unexpectedBehaviour": false
        }
      ],
      "1": [
        {
          "specVersion": "0.1-296",
          "casesNumber": 5,
          "description": "\u0027When\u0027 with bound value and type test condition (invert type checking operator).",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 6,
          "description": "\u0027When\u0027 with bound value and enumaration of type test conditions.",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 7,
          "description": "\u0027When\u0027 with bound value and enumaration of type test conditions (with invert type checking operator).",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 6,
          "description": "\u0027When\u0027 with bound value and type test condition.",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass else",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10809",
          "path": "compiler/testData/diagnostics/tests/when/kt10809.kt",
          "unexpectedBehaviour": false
        }
      ],
      "10": [
        {
          "specVersion": "0.1-201",
          "casesNumber": 26,
          "description": "\u0027When\u0027 with different variants of the arithmetic expressions (additive expression and multiplicative expression) in \u0027when condition\u0027.",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-201",
          "casesNumber": 23,
          "description": "\u0027When\u0027 with enumeration of the different variants of expressions in \u0027when condition\u0027.",
          "unexpectedBehaviour": false
        }
      ],
      "3": [
        {
          "specVersion": "0.1-296",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and containment operator.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-296",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and enumeration of the containment operators.",
          "unexpectedBehaviour": false
        }
      ],
      "7": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 3,
          "description": "\u0027When\u0027 with bound value and else branch.",
          "unexpectedBehaviour": false
        }
      ],
      "11": [
        {
          "specVersion": "0.1-201",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and not allowed break and continue expression (without labels) in \u0027when condition\u0027.",
          "unexpectedBehaviour": false
        }
      ],
      "5": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Annotated when statement",
          "path": "compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt4434",
          "path": "compiler/testData/diagnostics/tests/when/kt4434.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive initialization",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "1": {
    "pos": {
      "3": [
        {
          "specVersion": "0.1-100",
          "casesNumber": 1,
          "description": "Empty when with bound value.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-100",
          "casesNumber": 1,
          "description": "Empty when without bound value.",
          "unexpectedBehaviour": false
        }
      ]
    },
    "neg": {
      "1": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression enum",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt",
          "unexpectedBehaviour": false
        }
      ],
      "2": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression enum",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "4": {
    "neg": {
      "1": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 4,
          "description": " it is possible to  replace the else condition with an always-true condition",
          "unexpectedBehaviour": false
        }
      ]
    },
    "pos": {
      "1": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 4,
          "description": " it is possible to  replace the else condition with an always-true condition",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "3": {
    "neg": {
      "2": [
        {
          "specVersion": "0.1-218",
          "casesNumber": 3,
          "description": "The else condition must also be in the last when entry of when expression, otherwise it is a compile-time error",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "2": {
    "neg": {
      "2": [
        {
          "specVersion": "0.1-100",
          "casesNumber": 1,
          "description": "When with non-boolean value in the when condition.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-100",
          "casesNumber": 1,
          "description": "When without bound value, forbidden comma in the when condition.",
          "unexpectedBehaviour": false
        }
      ],
      "1": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When and lambda with expected type",
          "path": "compiler/testData/diagnostics/tests/when/whenAndLambdaWithExpectedType.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Reserved exhaustive when",
          "path": "compiler/testData/diagnostics/tests/when/ReservedExhaustiveWhen.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When with nothing and lambdas",
          "path": "compiler/testData/diagnostics/tests/when/whenWithNothingAndLambdas.kt",
          "unexpectedBehaviour": false
        }
      ],
      "5": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        }
      ]
    },
    "pos": {
      "2": [
        {
          "specVersion": "0.1-100",
          "casesNumber": 9,
          "description": "When without bound value, various boolean values in the when condition.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-100",
          "casesNumber": 6,
          "description": "\u0027When\u0027 without bound value and with Nothing in condition (subtype of Boolean).",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-100",
          "casesNumber": 2,
          "description": "\u0027When\u0027 without bound value and only one \u0027else\u0027 branch.",
          "unexpectedBehaviour": false
        }
      ],
      "1": [
        {
          "specVersion": "0.1-100",
          "casesNumber": 2,
          "description": "Allowed break and continue in the control structure body of when.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-100",
          "casesNumber": 25,
          "description": "When without bound value, various expressions in the control structure body.",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10811",
          "path": "compiler/testData/diagnostics/tests/when/kt10811.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt9972",
          "path": "compiler/testData/diagnostics/tests/when/kt9972.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Comma in when condition without argument",
          "path": "compiler/testData/diagnostics/tests/when/CommaInWhenConditionWithoutArgument.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10809",
          "path": "compiler/testData/diagnostics/tests/when/kt10809.kt",
          "unexpectedBehaviour": false
        }
      ],
      "4": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Duplicated labels",
          "path": "compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt",
          "unexpectedBehaviour": false
        }
      ],
      "5": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Duplicated labels",
          "path": "compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "5": {
    "pos": {
      "1": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 2,
          "description": "\u0027When\u0027 with bound value and allowed break and continue expression (without labels) in the control structure body.",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 25,
          "description": "\u0027When\u0027 with bound value and with different variants of expressions in the control structure body.",
          "unexpectedBehaviour": true
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Annotated when statement",
          "path": "compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive platform enum else",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check before",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check else",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt4434",
          "path": "compiler/testData/diagnostics/tests/when/kt4434.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Duplicated labels",
          "path": "compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10811",
          "path": "compiler/testData/diagnostics/tests/when/kt10811.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive platform enum statement",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumStatement.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive platform enum",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Comma in when condition without argument",
          "path": "compiler/testData/diagnostics/tests/when/CommaInWhenConditionWithoutArgument.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive nullable",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveNullable.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass else",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive initialization",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check boolean",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive platform enum annotated",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumAnnotated.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else when statement",
          "path": "compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10809",
          "path": "compiler/testData/diagnostics/tests/when/kt10809.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10439",
          "path": "compiler/testData/diagnostics/tests/when/kt10439.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive boolean nullable",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveBooleanNullable.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive no initialization",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveNoInitialization.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive return throw",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveReturnThrow.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive return",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveReturn.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive platform enum null",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumNull.kt",
          "unexpectedBehaviour": false
        }
      ]
    },
    "neg": {
      "1": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When type disjunctions",
          "path": "compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive boolean nullable",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveBooleanNullable.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning null",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else expected unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass val",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVal.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive val over conditional init",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveValOverConditionalInit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive boolean brackets",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveBooleanBrackets.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When",
          "path": "compiler/testData/diagnostics/tests/when/When.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive boolean complex",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveBooleanComplex.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned coercion to unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning false",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningFalse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning for sealed class",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Reserved exhaustive when",
          "path": "compiler/testData/diagnostics/tests/when/ReservedExhaustiveWhen.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive boolean",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveBoolean.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass var",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVar.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive platform enum",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustivePlatformEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned from lambda expected int",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive var over conditional init",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveVarOverConditionalInit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression enum",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive enum mixed",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Empty condition with expression",
          "path": "compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Property not initialized",
          "path": "compiler/testData/diagnostics/tests/when/PropertyNotInitialized.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning else",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Redundant else",
          "path": "compiler/testData/diagnostics/tests/when/RedundantElse.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive with nullability check",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else no expected type",
          "path": "compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive enum is",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned non unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Exhaustive break continue",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveBreakContinue.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Top level sealed",
          "path": "compiler/testData/diagnostics/tests/when/TopLevelSealed.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Else on nullable enum",
          "path": "compiler/testData/diagnostics/tests/when/ElseOnNullableEnum.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Else on nullable enum with smart cast",
          "path": "compiler/testData/diagnostics/tests/when/ElseOnNullableEnumWithSmartCast.kt",
          "unexpectedBehaviour": false
        }
      ]
    }
  },
  "9": {
    "pos": {
      "2": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Annotated when statement",
          "path": "compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else when statement",
          "path": "compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt",
          "unexpectedBehaviour": false
        }
      ],
      "1": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Duplicated labels",
          "path": "compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt9972",
          "path": "compiler/testData/diagnostics/tests/when/kt9972.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10809",
          "path": "compiler/testData/diagnostics/tests/when/kt10809.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10439",
          "path": "compiler/testData/diagnostics/tests/when/kt10439.kt",
          "unexpectedBehaviour": false
        }
      ]
    },
    "neg": {
      "2": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning null",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else expected unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned coercion to unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning for sealed class",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned from lambda expected int",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive with nullability check",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else no expected type",
          "path": "compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt",
          "unexpectedBehaviour": false
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "No else returned non unit",
          "path": "compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt",
          "unexpectedBehaviour": false
        }
      ]
    }
  }
}