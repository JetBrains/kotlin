KtFile: shortPositionBasedDestructuringErrors.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  PsiComment(EOL_COMMENT)('// COMPILATION_ERRORS')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('declaration')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(LBRACKET)('[')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('first')
              PsiElement(COMMA)(',')
              PsiWhiteSpace(' ')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('b')
              PsiErrorElement:Expecting ']'
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('second')
            PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
              PsiElement(RBRACKET)(']')
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('2')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION
              PsiElement(var)('var')
              PsiWhiteSpace(' ')
              PsiElement(LBRACKET)('[')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('a')
              PsiErrorElement:Expecting ']'
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('first')
            PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
              PsiElement(RBRACKET)(']')
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('3')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(LBRACKET)('[')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('a')
                PsiElement(COLON)(':')
                PsiWhiteSpace(' ')
                TYPE_REFERENCE
                  USER_TYPE
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('String')
              PsiErrorElement:Expecting ']'
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('first')
            PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
              PsiElement(RBRACKET)(']')
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('4')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(LBRACKET)('[')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('first')
              PsiErrorElement:Expecting ']'
                PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('5')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(LPAR)('(')
              DESTRUCTURING_DECLARATION_ENTRY
                PsiElement(IDENTIFIER)('first')
              PsiErrorElement:Expecting ')'
                PsiElement(RBRACKET)(']')
              PsiWhiteSpace(' ')
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('loop')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          DESTRUCTURING_DECLARATION
            PsiElement(LBRACKET)('[')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('first')
            PsiElement(COMMA)(',')
            PsiWhiteSpace(' ')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('b')
            PsiWhiteSpace(' ')
            PsiErrorElement:Expecting ']'
              PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        PsiErrorElement:Expecting 'in'
          PsiElement(IDENTIFIER)('second')
        PsiErrorElement:Expecting ')'
          <empty list>
        BODY
          <empty list>
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(COMMA)(',')
        PsiElement(RBRACKET)(']')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          DESTRUCTURING_DECLARATION
            PsiElement(LBRACKET)('[')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('a')
            PsiWhiteSpace(' ')
            PsiErrorElement:Expecting ']'
              PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        PsiErrorElement:Expecting 'in'
          PsiElement(IDENTIFIER)('first')
        PsiErrorElement:Expecting ')'
          <empty list>
        BODY
          <empty list>
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RBRACKET)(']')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          DESTRUCTURING_DECLARATION
            PsiElement(LBRACKET)('[')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('a')
              PsiElement(COLON)(':')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('String')
            PsiWhiteSpace(' ')
            PsiErrorElement:Expecting ']'
              PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        PsiErrorElement:Expecting 'in'
          PsiElement(IDENTIFIER)('first')
        PsiErrorElement:Expecting ')'
          <empty list>
        BODY
          <empty list>
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RBRACKET)(']')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          DESTRUCTURING_DECLARATION
            PsiElement(LBRACKET)('[')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('first')
            PsiErrorElement:Expecting ']'
              PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        LOOP_RANGE
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('x')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BODY
          BLOCK
            PsiElement(LBRACE)('{')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          DESTRUCTURING_DECLARATION
            PsiElement(LPAR)('(')
            DESTRUCTURING_DECLARATION_ENTRY
              PsiElement(IDENTIFIER)('first')
            PsiErrorElement:Expecting ')'
              PsiElement(RBRACKET)(']')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        LOOP_RANGE
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('x')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BODY
          BLOCK
            PsiElement(LBRACE)('{')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('lambda')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              BLOCK
                COLLECTION_LITERAL_EXPRESSION
                  PsiElement(LBRACKET)('[')
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('first')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  BINARY_EXPRESSION
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('b')
                    PsiWhiteSpace(' ')
                    OPERATION_REFERENCE
                      PsiElement(EQ)('=')
                    PsiWhiteSpace(' ')
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('second')
                  PsiElement(COMMA)(',')
                  PsiElement(RBRACKET)(']')
                PsiWhiteSpace(' ')
                PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                  PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              BLOCK
                COLLECTION_LITERAL_EXPRESSION
                  PsiElement(LBRACKET)('[')
                  BINARY_EXPRESSION
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('a')
                    PsiWhiteSpace(' ')
                    OPERATION_REFERENCE
                      PsiElement(EQ)('=')
                    PsiWhiteSpace(' ')
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('first')
                  PsiElement(RBRACKET)(']')
                PsiWhiteSpace(' ')
                PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                  PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              BLOCK
                COLLECTION_LITERAL_EXPRESSION
                  PsiElement(LBRACKET)('[')
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('a')
                  PsiErrorElement:Expecting ']'
                    <empty list>
                PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  PsiElement(IDENTIFIER)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  PsiElement(IDENTIFIER)('first')
                  PsiElement(RBRACKET)(']')
                  PsiWhiteSpace(' ')
                  PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              VALUE_PARAMETER_LIST
                VALUE_PARAMETER
                  DESTRUCTURING_DECLARATION
                    PsiElement(LBRACKET)('[')
                    DESTRUCTURING_DECLARATION_ENTRY
                      PsiElement(IDENTIFIER)('first')
                    PsiErrorElement:Expecting ']'
                      PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              BLOCK
                <empty list>
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              VALUE_PARAMETER_LIST
                VALUE_PARAMETER
                  DESTRUCTURING_DECLARATION
                    PsiElement(LPAR)('(')
                    DESTRUCTURING_DECLARATION_ENTRY
                      PsiElement(IDENTIFIER)('first')
                    PsiErrorElement:Expecting ')'
                      PsiElement(RBRACKET)(']')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              BLOCK
                <empty list>
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')