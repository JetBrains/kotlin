RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] jvmRecordTypealias.kt
    @JvmRecord[Unresolved]() public final? data [ResolvedTo(RAW_FIR)] class Some : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(RAW_FIR)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(RAW_FIR)] typealias JvmRecord = Ann

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @JvmRecord[Unresolved]() public final? data [ResolvedTo(RAW_FIR)] class Some : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(RAW_FIR)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(RAW_FIR)] typealias JvmRecord = Ann

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @R|kotlin/jvm/JvmRecord|[CompilerRequiredAnnotations]() public final? data [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class Some : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(RAW_FIR)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(RAW_FIR)] typealias JvmRecord = Ann

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @R|kotlin/jvm/JvmRecord|[CompilerRequiredAnnotations]() public final? data [ResolvedTo(COMPANION_GENERATION)] class Some : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(RAW_FIR)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(RAW_FIR)] typealias JvmRecord = Ann

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @R|kotlin/jvm/JvmRecord|[CompilerRequiredAnnotations]() public final? data [ResolvedTo(SUPER_TYPES)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(RAW_FIR)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(RAW_FIR)] typealias JvmRecord = Ann

TYPES:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final? data [ResolvedTo(TYPES)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

STATUS:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(STATUS)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(CONTRACTS)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(CONSTANT_EVALUATION)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final? [ResolvedTo(SUPER_TYPES)] annotation class Ann : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(ANNOTATION_ARGUMENTS)] class Some : R|java/lang/Record| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final [ResolvedTo(RAW_FIR)] fun copy(): R|kotlin/jvm/Some|

    }
    public final [ResolvedTo(STATUS)] annotation class Ann : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(BODY_RESOLVE)] class Some : R|java/lang/Record| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] fun copy(): R|kotlin/jvm/Some|

    }
    public final [ResolvedTo(STATUS)] annotation class Ann : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(SUPER_TYPES)] typealias JvmRecord = R|kotlin/jvm/Ann|

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] jvmRecordTypealias.kt
    @<ERROR TYPE REF:
            Annotation type resolved differently on compiler annotation and types stages:
              - compiler annotations: kotlin/jvm/JvmRecord
              - types stage: {kotlin/jvm/JvmRecord=} kotlin/jvm/Ann
        >[Types]() public final data [ResolvedTo(BODY_RESOLVE)] class Some : R|java/lang/Record| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] constructor(): R|kotlin/jvm/Some| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun copy(): R|kotlin/jvm/Some|

    }
    public final [ResolvedTo(BODY_RESOLVE)] annotation class Ann : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Ann] constructor(): R|kotlin/jvm/Ann| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] typealias JvmRecord = R|kotlin/jvm/Ann|
