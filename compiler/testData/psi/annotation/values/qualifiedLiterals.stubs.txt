Negative.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=test.Simple, isAllUnder=false, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=test]
          REFERENCE_EXPRESSION[referencedName=Simple]
    CLASS[classId=/Negative, fqName=Negative, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Negative, superNames=[]]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Simple]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Simple]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]


Negative2.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=test.Simple, isAllUnder=false, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=test]
          REFERENCE_EXPRESSION[referencedName=Simple]
    CLASS[classId=/Negative2, fqName=Negative2, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Negative2, superNames=[]]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Simple]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Simple]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]


Positive.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=test.Simple, isAllUnder=false, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=test]
          REFERENCE_EXPRESSION[referencedName=Simple]
    CLASS[classId=/Positive, fqName=Positive, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Positive, superNames=[]]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Simple]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Simple]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]


Qualified.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=test.Simple, isAllUnder=false, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=test]
          REFERENCE_EXPRESSION[referencedName=Simple]
    CLASS[classId=/Qualified, fqName=Qualified, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Qualified, superNames=[]]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Simple]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Simple]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]
              DOT_QUALIFIED_EXPRESSION
                DOT_QUALIFIED_EXPRESSION
                  DOT_QUALIFIED_EXPRESSION
                    REFERENCE_EXPRESSION[referencedName=test]
                    REFERENCE_EXPRESSION[referencedName=Simple]
                  REFERENCE_EXPRESSION[referencedName=Companion]
                REFERENCE_EXPRESSION[referencedName=CONST1]


Simple.kt:
  FILE[kind=File[packageFqName=test]]
    PACKAGE_DIRECTIVE
      REFERENCE_EXPRESSION[referencedName=test]
    IMPORT_LIST
    CLASS[classId=test/Simple, fqName=test.Simple, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Simple, superNames=[]]
      MODIFIER_LIST[annotation]
      PRIMARY_CONSTRUCTOR[fqName=null, hasBody=false, hasNoExpressionBody=true, isDelegatedCallToThis=false, isExplicitDelegationCall=false, isExtension=false, isTopLevel=false, mayHaveContract=false, name=Simple]
        VALUE_PARAMETER_LIST
          VALUE_PARAMETER[fqName=test.Simple.i, hasDefaultValue=false, hasValOrVar=true, isMutable=false, name=i]
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Int]
      CLASS_BODY
        OBJECT_DECLARATION[classId=test/Simple.Companion, fqName=test.Simple.Companion, isLocal=false, isObjectLiteral=false, isTopLevel=false, name=Companion, superNames=[]]
          MODIFIER_LIST[companion]
          CLASS_BODY
            PROPERTY[fqName=test.Simple.Companion.CONST1, hasBackingField=null, hasDelegate=false, hasDelegateExpression=false, hasInitializer=true, hasReturnTypeRef=false, isExtension=false, isTopLevel=false, isVar=false, name=CONST1]
              MODIFIER_LIST[const]
            PROPERTY[fqName=test.Simple.Companion.CONST2, hasBackingField=null, hasDelegate=false, hasDelegateExpression=false, hasInitializer=true, hasReturnTypeRef=false, isExtension=false, isTopLevel=false, isVar=false, name=CONST2]
              MODIFIER_LIST[const]


Sum.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=test.Simple, isAllUnder=false, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=test]
          REFERENCE_EXPRESSION[referencedName=Simple]
    CLASS[classId=/Sum, fqName=Sum, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Sum, superNames=[]]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Simple]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Simple]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]
