/predicates.kt:(157,163): info: Generated Viper text for useFoo:
field public$backing_field_foo: Ref

field public$backing_field_next: Ref

field public$backing_field_x: Ref

field public$backing_field_y: Ref

predicate T_class_global$class_Bar(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.public$backing_field_foo, wildcard) &&
  acc(T_class_global$class_Foo(special$class$predicate$subject.public$backing_field_foo), wildcard) &&
  acc(T_class_global$class_Baz(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.public$backing_field_foo),
  dom$RuntimeType$T_class_global$class_Foo())
}

predicate T_class_global$class_Baz(special$class$predicate$subject: Ref) {
  true
}

predicate T_class_global$class_Foo(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.public$backing_field_x, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.public$backing_field_x),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_Rec(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.public$backing_field_next, wildcard) &&
  (special$class$predicate$subject.public$backing_field_next !=
  dom$RuntimeType$nullValue() ==>
  acc(T_class_global$class_Rec(special$class$predicate$subject.public$backing_field_next), wildcard)) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.public$backing_field_next),
  dom$RuntimeType$nullable(dom$RuntimeType$T_class_global$class_Rec()))
}

method global$fun_useFoo$fun_take$T_class_global$class_Bar$T_class_global$class_Rec$return$T_Unit(local$bar: Ref,
  local$rec: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$bar), dom$RuntimeType$T_class_global$class_Bar())
  inhale acc(T_class_global$class_Bar(local$bar), wildcard)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$rec), dom$RuntimeType$T_class_global$class_Rec())
  inhale acc(T_class_global$class_Rec(local$rec), wildcard)
  ret$0 := dom$RuntimeType$unitValue()
  label label$ret$0
}

/predicates.kt:(289,311): info: Generated Viper text for three_layers_hierarchy:
field public$backing_field_x: Ref

field public$backing_field_y: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.public$backing_field_x, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.public$backing_field_x),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard)
}

predicate T_class_global$class_C(special$class$predicate$subject: Ref) {
  acc(T_class_global$class_B(special$class$predicate$subject), wildcard)
}

method global$fun_three_layers_hierarchy$fun_take$T_class_global$class_C$return$T_Unit(local$c: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$c), dom$RuntimeType$T_class_global$class_C())
  inhale acc(T_class_global$class_C(local$c), wildcard)
  ret$0 := dom$RuntimeType$unitValue()
  label label$ret$0
}

/predicates.kt:(327,341): info: Generated Viper text for list_hierarchy:
field special$size: Ref

predicate T_class_pkg$kotlin$collections$global$class_Collection(special$class$predicate$subject: Ref) {
  acc(T_class_pkg$kotlin$collections$global$class_Iterable(special$class$predicate$subject), wildcard)
}

predicate T_class_pkg$kotlin$collections$global$class_Iterable(special$class$predicate$subject: Ref) {
  true
}

predicate T_class_pkg$kotlin$collections$global$class_List(special$class$predicate$subject: Ref) {
  acc(T_class_pkg$kotlin$collections$global$class_Collection(special$class$predicate$subject), wildcard)
}

predicate T_class_pkg$kotlin$collections$global$class_MutableCollection(special$class$predicate$subject: Ref) {
  acc(T_class_pkg$kotlin$collections$global$class_Collection(special$class$predicate$subject), wildcard) &&
  acc(T_class_pkg$kotlin$collections$global$class_MutableIterable(special$class$predicate$subject), wildcard)
}

predicate T_class_pkg$kotlin$collections$global$class_MutableIterable(special$class$predicate$subject: Ref) {
  acc(T_class_pkg$kotlin$collections$global$class_Iterable(special$class$predicate$subject), wildcard)
}

predicate T_class_pkg$kotlin$collections$global$class_MutableList(special$class$predicate$subject: Ref) {
  acc(T_class_pkg$kotlin$collections$global$class_List(special$class$predicate$subject), wildcard) &&
  acc(T_class_pkg$kotlin$collections$global$class_MutableCollection(special$class$predicate$subject), wildcard)
}

method global$fun_list_hierarchy$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$return$T_Unit(local$xs: Ref)
  returns (ret$0: Ref)
  requires acc(local$xs.special$size, write)
  requires dom$RuntimeType$intFromRef(local$xs.special$size) >= 0
  ensures acc(local$xs.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$xs.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$xs), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_MutableList())
  inhale acc(T_class_pkg$kotlin$collections$global$class_MutableList(local$xs), wildcard)
  ret$0 := dom$RuntimeType$unitValue()
  label label$ret$0
}
