// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
 */
public final class IrEnumEntry extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
    IrEnumEntryOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrEnumEntry.class.getName());
  }
  // Use IrEnumEntry.newBuilder() to construct.
  private IrEnumEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrEnumEntry() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrEnumEntry_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrEnumEntry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.Builder.class);
  }

  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   * @return Whether the base field is set.
   */
  @java.lang.Override
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   * @return The base.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder getBaseOrBuilder() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private int name_ = 0;
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return Whether the name field is set.
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public int getName() {
    return name_;
  }

  public static final int INITIALIZER_FIELD_NUMBER = 3;
  private int initializer_ = 0;
  /**
   * <code>int32 initializer = 3;</code>
   * @return Whether the initializer field is set.
   */
  @java.lang.Override
  public boolean hasInitializer() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int32 initializer = 3;</code>
   * @return The initializer.
   */
  @java.lang.Override
  public int getInitializer() {
    return initializer_;
  }

  public static final int CORRESPONDING_CLASS_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass correspondingClass_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   * @return Whether the correspondingClass field is set.
   */
  @java.lang.Override
  public boolean hasCorrespondingClass() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   * @return The correspondingClass.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getCorrespondingClass() {
    return correspondingClass_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance() : correspondingClass_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder getCorrespondingClassOrBuilder() {
    return correspondingClass_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance() : correspondingClass_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasBase()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getBase().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasCorrespondingClass()) {
      if (!getCorrespondingClass().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getBase());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt32(2, name_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(3, initializer_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(4, getCorrespondingClass());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, getBase());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(2, name_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(3, initializer_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, getCorrespondingClass());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) obj;

    if (hasBase() != other.hasBase()) return false;
    if (hasBase()) {
      if (!getBase()
          .equals(other.getBase())) return false;
    }
    if (hasName() != other.hasName()) return false;
    if (hasName()) {
      if (getName()
          != other.getName()) return false;
    }
    if (hasInitializer() != other.hasInitializer()) return false;
    if (hasInitializer()) {
      if (getInitializer()
          != other.getInitializer()) return false;
    }
    if (hasCorrespondingClass() != other.hasCorrespondingClass()) return false;
    if (hasCorrespondingClass()) {
      if (!getCorrespondingClass()
          .equals(other.getCorrespondingClass())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasBase()) {
      hash = (37 * hash) + BASE_FIELD_NUMBER;
      hash = (53 * hash) + getBase().hashCode();
    }
    if (hasName()) {
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName();
    }
    if (hasInitializer()) {
      hash = (37 * hash) + INITIALIZER_FIELD_NUMBER;
      hash = (53 * hash) + getInitializer();
    }
    if (hasCorrespondingClass()) {
      hash = (37 * hash) + CORRESPONDING_CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getCorrespondingClass().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntryOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrEnumEntry_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrEnumEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getBaseFieldBuilder();
        getCorrespondingClassFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      base_ = null;
      if (baseBuilder_ != null) {
        baseBuilder_.dispose();
        baseBuilder_ = null;
      }
      name_ = 0;
      initializer_ = 0;
      correspondingClass_ = null;
      if (correspondingClassBuilder_ != null) {
        correspondingClassBuilder_.dispose();
        correspondingClassBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrEnumEntry_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.base_ = baseBuilder_ == null
            ? base_
            : baseBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.name_ = name_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.initializer_ = initializer_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.correspondingClass_ = correspondingClassBuilder_ == null
            ? correspondingClass_
            : correspondingClassBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.getDefaultInstance()) return this;
      if (other.hasBase()) {
        mergeBase(other.getBase());
      }
      if (other.hasName()) {
        setName(other.getName());
      }
      if (other.hasInitializer()) {
        setInitializer(other.getInitializer());
      }
      if (other.hasCorrespondingClass()) {
        mergeCorrespondingClass(other.getCorrespondingClass());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasBase()) {
        return false;
      }
      if (!hasName()) {
        return false;
      }
      if (!getBase().isInitialized()) {
        return false;
      }
      if (hasCorrespondingClass()) {
        if (!getCorrespondingClass().isInitialized()) {
          return false;
        }
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getBaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              name_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              initializer_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getCorrespondingClassFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder> baseBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     * @return Whether the base field is set.
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     * @return The base.
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
      if (baseBuilder_ == null) {
        return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
      } else {
        return baseBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (baseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        base_ = value;
      } else {
        baseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder builderForValue) {
      if (baseBuilder_ == null) {
        base_ = builderForValue.build();
      } else {
        baseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (baseBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          base_ != null &&
          base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance()) {
          getBaseBuilder().mergeFrom(value);
        } else {
          base_ = value;
        }
      } else {
        baseBuilder_.mergeFrom(value);
      }
      if (base_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder clearBase() {
      bitField0_ = (bitField0_ & ~0x00000001);
      base_ = null;
      if (baseBuilder_ != null) {
        baseBuilder_.dispose();
        baseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder getBaseBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getBaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder getBaseOrBuilder() {
      if (baseBuilder_ != null) {
        return baseBuilder_.getMessageOrBuilder();
      } else {
        return base_ == null ?
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder> 
        getBaseFieldBuilder() {
      if (baseBuilder_ == null) {
        baseBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder>(
                getBase(),
                getParentForChildren(),
                isClean());
        base_ = null;
      }
      return baseBuilder_;
    }

    private int name_ ;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(int value) {

      name_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = 0;
      onChanged();
      return this;
    }

    private int initializer_ ;
    /**
     * <code>int32 initializer = 3;</code>
     * @return Whether the initializer field is set.
     */
    @java.lang.Override
    public boolean hasInitializer() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @return The initializer.
     */
    @java.lang.Override
    public int getInitializer() {
      return initializer_;
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @param value The initializer to set.
     * @return This builder for chaining.
     */
    public Builder setInitializer(int value) {

      initializer_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearInitializer() {
      bitField0_ = (bitField0_ & ~0x00000004);
      initializer_ = 0;
      onChanged();
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass correspondingClass_;
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass, org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder> correspondingClassBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     * @return Whether the correspondingClass field is set.
     */
    public boolean hasCorrespondingClass() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     * @return The correspondingClass.
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getCorrespondingClass() {
      if (correspondingClassBuilder_ == null) {
        return correspondingClass_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance() : correspondingClass_;
      } else {
        return correspondingClassBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder setCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      if (correspondingClassBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        correspondingClass_ = value;
      } else {
        correspondingClassBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder setCorrespondingClass(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder builderForValue) {
      if (correspondingClassBuilder_ == null) {
        correspondingClass_ = builderForValue.build();
      } else {
        correspondingClassBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder mergeCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      if (correspondingClassBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          correspondingClass_ != null &&
          correspondingClass_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) {
          getCorrespondingClassBuilder().mergeFrom(value);
        } else {
          correspondingClass_ = value;
        }
      } else {
        correspondingClassBuilder_.mergeFrom(value);
      }
      if (correspondingClass_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder clearCorrespondingClass() {
      bitField0_ = (bitField0_ & ~0x00000008);
      correspondingClass_ = null;
      if (correspondingClassBuilder_ != null) {
        correspondingClassBuilder_.dispose();
        correspondingClassBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder getCorrespondingClassBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getCorrespondingClassFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder getCorrespondingClassOrBuilder() {
      if (correspondingClassBuilder_ != null) {
        return correspondingClassBuilder_.getMessageOrBuilder();
      } else {
        return correspondingClass_ == null ?
            org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance() : correspondingClass_;
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass, org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder> 
        getCorrespondingClassFieldBuilder() {
      if (correspondingClassBuilder_ == null) {
        correspondingClassBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrClass, org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder>(
                getCorrespondingClass(),
                getParentForChildren(),
                isClean());
        correspondingClass_ = null;
      }
      return correspondingClassBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrEnumEntry>() {
    @java.lang.Override
    public IrEnumEntry parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
