class LockFreeLongCounter {
  private var counter$volatile: Long
    field = 0L
    private get(): Long {
      return <this>.#counter$volatile
    }
    private set(value: Long) {
      return <this>.#counter$volatile = value
    }

  private inner class Inner {
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun getFromOuter(): Long {
      return atomicGetField<Long>(/* <this> = LockFreeLongCounter<this>::counter$volatile */) as Long
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun add2(): Long {
    return getAndAddField(/* <this> = LockFreeLongCounter<this>::counter$volatile, */ delta = 2L /*as Long */)
  }

  fun get(): Long {
    return atomicGetField<Long>(/* <this> = LockFreeLongCounter<this>::counter$volatile */) as Long
  }

  fun getInner(): Long {
    return <this>.Inner().getFromOuter()
  }

  fun increment(): Long {
    return getAndAddField(/* <this> = LockFreeLongCounter<this>::counter$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
  }

  fun setM2() {
    atomicSetField<Long>(/* <this> = LockFreeLongCounter<this>::counter$volatile, */ newValue = 2L.unaryMinus())
  }

}

class LockFreeLongCounterTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testAdd2() {
    val c: LockFreeLongCounter = LockFreeLongCounter()
    c.add2() /*~> Unit */
    assertEquals<Long>(expected = 2L, actual = c.get())
    c.add2() /*~> Unit */
    assertEquals<Long>(expected = 4L, actual = c.get())
  }

  fun testBasic() {
    return <this>.testWith(g = local fun LockFreeLongCounter.<anonymous>(): Long {
      return $this$testWith.get()
    }
)
  }

  fun testGetInner() {
    return <this>.testWith(g = local fun LockFreeLongCounter.<anonymous>(): Long {
      return $this$testWith.getInner()
    }
)
  }

  fun testSetM2() {
    val c: LockFreeLongCounter = LockFreeLongCounter()
    c.setM2()
    assertEquals<Long>(expected = 2L.unaryMinus(), actual = c.get())
  }

  private inline fun testWith(g: @ExtensionFunctionType Function1<LockFreeLongCounter, Long>) {
    val c: LockFreeLongCounter = LockFreeLongCounter()
    assertEquals<Long>(expected = 0L, actual = g.invoke(p1 = c))
    assertEquals<Long>(expected = 1L, actual = c.increment())
    assertEquals<Long>(expected = 1L, actual = g.invoke(p1 = c))
    assertEquals<Long>(expected = 2L, actual = c.increment())
    assertEquals<Long>(expected = 2L, actual = g.invoke(p1 = c))
  }

}

fun box(): String {
  val testClass: LockFreeLongCounterTest = LockFreeLongCounterTest()
  testClass.testBasic()
  testClass.testAdd2()
  testClass.testSetM2()
  testClass.testGetInner()
  return "OK"
}
